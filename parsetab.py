
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND BOOLEAN_KW BOOL_KW CHARACTER_KW CHAR_KW CLOSING_BRACE CLOSING_BRACKET CLOSING_PARENTHESES COMEBACK_KW COMMA COMMENT CONST_KW CONTINUE_KW DIVIDE DIVIDEEQUAL DOT DOUBLE_DOT ELSE_KW EQUAL EQUALEQUAL FALSE_KW GIVEBACK_KW GREATEREQUAL GREATER_THAN IF_KW INTEGER_KW INT_KW LESSEQUAL LESS_THAN LETTER LOGICAL_AND LOGICAL_OR MINUS MINUSEQUAL MINUSMINUS NOTEQUAL NUMBER OPENING_BRACE OPENING_BRACKET OPENING_PARENTHESES OR OTHER_KW PERCENTAGE PLUS PLUSEQUAL PLUSPLUS QUESTION_MARK SEMICOLON STATIC_KW THEN_KW TILDA TILL_KW TIMES TIMESEQUAL TRUE_KW VOID_KWprogram : listnumOrletter : NUMBER\n        |   LETTER\n        |   empty\n        list : list declaration\n                | declarationdeclaration : function\n        | varDeclarationvarDeclaration : type variableListScopedVariableDec : scopedSpecifier variableListvariableList : variableList COMMA varInitialization\n        |   varInitializationvarInitialization : varForm\n        | varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESESvarForm : LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET\n        | LETTER numOrletterscopedSpecifier : STATIC_KW type\n        | typetype : BOOLEAN_KW\n        | CHARACTER_KW \n        | INTEGER_KW \n        | CHAR_KW \n        | BOOL_KW \n        | INT_KWfunction : VOID_KW\n        |   numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE\n        |   type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementparameter : listOfParameters \n        | emptylistOfParameters : listOfParameters SEMICOLON paramTypeList \n        | paramTypeListparamTypeList : type paramListparamList : paramList COMMA paramId \n        | paramIdlocalDeclarations : localDeclarations ScopedVariableDec \n        | emptyparamId : LETTER numOrletter \n        | LETTER numOrletter OPENING_BRACKET CLOSING_BRACKETstatement : phrase \n        | compoundPhrase \n        | selectPhrase \n        | iterationPhrase \n        | returnPhrase \n        | continuecompoundPhrase : OPENING_BRACE localDeclarations statementList CLOSING_BRACEstatementList : statementList statement \n        | emptyphrase : allExpression SEMICOLON \n        | SEMICOLONselectPhrase : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody\n        |   IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE\n        ifBody : statement \n        | statement OTHER_KW statement \n        | SEMICOLONiterationPhrase : TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementreturnPhrase : COMEBACK_KW SEMICOLON\n        |   GIVEBACK_KW allExpression SEMICOLON\n        |   GIVEBACK_KW numOrletter SEMICOLONcontinue : CONTINUE_KW SEMICOLONallExpression : alterable mathOp allExpression\n        | alterable PLUSPLUS \n        | alterable MINUSMINUS\n        | eachExpression \n        | alterable mathOp alterablemathOp : EQUAL \n        | PLUSEQUAL \n        | MINUSEQUAL\n        | TIMESEQUAL \n        | DIVIDEEQUALeachExpression : eachExpression logicOp eachExpression\n        | eachExpression logicOp THEN_KW\n        | logicOp eachExpression \n        | relExpression\n        | eachExpression logicOp ELSE_KW eachExpressionrelExpression : mathEXP compareType mathEXP \n        | mathEXPcompareType : equal \n        | nonEqualequal : LESSEQUAL \n       | GREATEREQUAL \n       | EQUALEQUALnonEqual : LESS_THAN \n       | GREATER_THAN \n       | NOTEQUALmathEXP : mathEXP op mathEXP \n        | unaryExpressionop : PLUS \n        | MINUS \n        | TIMES \n        | DIVIDE \n        | PERCENTAGEunaryExpression : unaryop unaryExpression \n        | factorunaryop : MINUS \n        | TIMES \n        | QUESTION_MARKfactor : inalterable \n        | alterablealterable : LETTER numOrletter \n        | alterable OPENING_BRACKET allExpression CLOSING_BRACKET \n        | alterable DOT LETTERinalterable : OPENING_PARENTHESES allExpression CLOSING_PARENTHESES \n        | constant \n        | LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESESargs : arguments \n        | emptyarguments : arguments COMMA allExpression \n        | allExpressionconstant : CONST_KW \n        | TRUE_KW \n        | FALSE_KWlogicOp : LOGICAL_AND \n        | LOGICAL_OR \n        | TILDA \n        | AND \n        | OR\n        empty :\n        '
    
_lr_action_items = {'INTEGER_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,23,24,32,35,36,37,67,76,99,101,102,103,104,106,108,109,114,117,136,141,142,143,144,146,157,158,160,162,169,171,175,176,177,178,179,183,184,],[1,-8,-6,1,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,1,-16,1,-117,-11,1,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-27,-59,-36,1,-26,-48,-56,-57,-58,-35,1,-45,-10,-55,-50,-49,-117,-52,-53,-51,]),'LESS_THAN':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,83,-92,-98,-117,-99,-101,-102,-99,-85,-117,-100,-98,-104,]),'LOGICAL_AND':([7,11,13,19,21,33,34,35,36,43,44,46,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,72,74,75,76,77,78,80,81,82,98,99,101,102,103,104,106,107,108,109,114,118,120,121,122,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,149,150,156,157,158,159,160,164,165,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,43,43,-117,-11,-112,-98,-111,-116,-114,-113,-110,-103,-86,43,43,-109,-93,-115,-73,-117,-97,-76,43,43,-16,43,43,43,-92,-15,43,-98,43,-117,-99,43,-14,-40,-49,-44,-41,-39,43,-42,-117,-43,-101,-71,43,43,-66,-68,-67,-65,43,-69,-102,-99,43,-85,-75,-59,43,-117,-36,-117,-48,43,-56,-100,43,-98,43,-57,-58,43,-35,-47,43,-104,43,43,-45,-46,-10,43,-55,-50,-49,43,-52,43,43,-53,-51,]),'PERCENTAGE':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,135,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,86,-92,-98,-117,-99,-101,-102,-99,86,86,-117,-100,-98,-104,]),'MINUS':([7,11,13,19,21,33,34,35,36,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,61,62,63,64,65,67,69,72,74,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,118,121,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,150,157,158,159,160,164,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,45,45,-117,-11,-112,-98,-94,-111,45,-116,-114,-113,-110,-103,-86,45,-109,-93,-96,-115,-117,-97,-95,87,45,-16,45,45,45,-92,-15,45,-98,-117,-99,-82,45,-81,-91,-88,-83,-84,-90,-77,45,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,45,-42,-117,-43,-101,45,-66,-68,-67,-65,45,-69,-102,-99,45,87,87,-59,45,-117,-36,-117,-48,45,-56,-100,-98,-57,-58,45,-35,-47,-104,45,45,-45,-46,-10,45,-55,-50,-49,45,-52,45,45,-53,-51,]),'CLOSING_BRACE':([7,11,13,19,21,35,36,67,76,99,101,102,103,104,106,108,109,110,114,136,141,142,144,146,157,158,159,160,164,169,170,171,175,176,177,178,179,182,183,184,],[-4,-2,-3,-12,-13,-117,-11,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,143,-43,-59,-36,-117,-48,-56,-57,-58,169,-35,-47,-45,-46,-10,-55,-50,-49,-117,-52,184,-53,-51,]),'VOID_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,24,35,36,67,76,99,101,102,103,104,106,108,114,117,136,143,144,146,157,158,169,175,176,177,179,183,184,],[5,-8,-6,5,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,-16,-117,-11,-16,-15,-14,-40,-49,-44,-41,-39,-42,-43,-27,-59,-26,-48,-56,-57,-58,-45,-55,-50,-49,-52,-53,-51,]),'NOTEQUAL':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,89,-92,-98,-117,-99,-101,-102,-99,-85,-117,-100,-98,-104,]),'THEN_KW':([43,48,49,50,59,77,],[-112,-116,-114,-113,-115,120,]),'CONTINUE_KW':([7,11,13,19,21,35,36,67,69,72,76,99,101,102,103,104,106,108,109,114,136,141,142,144,146,157,158,159,160,164,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-117,-11,-16,100,100,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-59,-36,-117,-48,-56,-57,-58,100,-35,-47,100,-45,-46,-10,100,-55,-50,-49,100,-52,100,100,-53,-51,]),'QUESTION_MARK':([7,11,13,19,21,33,34,35,36,43,45,47,48,49,50,55,58,59,63,65,67,69,72,74,76,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,121,123,125,126,127,128,129,133,136,137,141,142,144,145,146,157,158,159,160,164,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,58,58,-117,-11,-112,-94,58,-116,-114,-113,58,-96,-115,-95,58,-16,58,58,58,-15,58,-82,58,-81,-91,-88,-83,-84,-90,-77,58,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,58,-42,-117,-43,58,-66,-68,-67,-65,58,-69,58,-59,58,-36,-117,-48,58,-56,-57,-58,58,-35,-47,58,58,-45,-46,-10,58,-55,-50,-49,58,-52,58,58,-53,-51,]),'PLUS':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,135,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,93,-92,-98,-117,-99,-101,-102,-99,93,93,-117,-100,-98,-104,]),'EQUALEQUAL':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,85,-92,-98,-117,-99,-101,-102,-99,-85,-117,-100,-98,-104,]),'DIVIDEEQUAL':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,129,-117,-101,-99,-117,-100,129,]),'FALSE_KW':([7,11,13,19,21,33,34,35,36,43,45,47,48,49,50,55,58,59,63,65,67,69,72,74,76,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,121,123,125,126,127,128,129,133,136,137,141,142,144,145,146,157,158,159,160,164,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,46,46,-117,-11,-112,-94,46,-116,-114,-113,46,-96,-115,-95,46,-16,46,46,46,-15,46,-82,46,-81,-91,-88,-83,-84,-90,-77,46,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,46,-42,-117,-43,46,-66,-68,-67,-65,46,-69,46,-59,46,-36,-117,-48,46,-56,-57,-58,46,-35,-47,46,46,-45,-46,-10,46,-55,-50,-49,46,-52,46,46,-53,-51,]),'TILDA':([7,11,13,19,21,33,34,35,36,43,44,46,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,72,74,75,76,77,78,80,81,82,98,99,101,102,103,104,106,107,108,109,114,118,120,121,122,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,149,150,156,157,158,159,160,164,165,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,49,49,-117,-11,-112,-98,-111,-116,-114,-113,-110,-103,-86,49,49,-109,-93,-115,-73,-117,-97,-76,49,49,-16,49,49,49,-92,-15,49,-98,49,-117,-99,49,-14,-40,-49,-44,-41,-39,49,-42,-117,-43,-101,-71,49,49,-66,-68,-67,-65,49,-69,-102,-99,49,-85,-75,-59,49,-117,-36,-117,-48,49,-56,-100,49,-98,49,-57,-58,49,-35,-47,49,-104,49,49,-45,-46,-10,49,-55,-50,-49,49,-52,49,49,-53,-51,]),'ELSE_KW':([43,48,49,50,59,77,],[-112,-116,-114,-113,-115,121,]),'PLUSEQUAL':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,123,-117,-101,-99,-117,-100,123,]),'PLUSPLUS':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,124,-117,-101,-99,-117,-100,124,]),'NUMBER':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,24,35,36,39,61,67,76,81,99,101,102,103,104,106,107,108,114,117,136,140,143,144,146,157,158,169,175,176,177,179,183,184,],[11,-8,-6,11,-25,-4,-7,-2,-3,-5,-12,11,-13,-9,-16,11,-11,11,11,-16,-15,11,-14,-40,-49,-44,-41,-39,11,-42,-43,-27,-59,11,-26,-48,-56,-57,-58,-45,-55,-50,-49,-52,-53,-51,]),'CONST_KW':([7,11,13,19,21,33,34,35,36,43,45,47,48,49,50,55,58,59,63,65,67,69,72,74,76,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,121,123,125,126,127,128,129,133,136,137,141,142,144,145,146,157,158,159,160,164,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,56,56,-117,-11,-112,-94,56,-116,-114,-113,56,-96,-115,-95,56,-16,56,56,56,-15,56,-82,56,-81,-91,-88,-83,-84,-90,-77,56,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,56,-42,-117,-43,56,-66,-68,-67,-65,56,-69,56,-59,56,-36,-117,-48,56,-56,-57,-58,56,-35,-47,56,56,-45,-46,-10,56,-55,-50,-49,56,-52,56,56,-53,-51,]),'OTHER_KW':([101,102,103,104,106,108,114,136,144,146,157,158,169,175,176,177,179,183,184,],[-40,-49,-44,-41,-39,-42,-43,-59,-48,-56,-57,-58,-45,-55,-50,-49,181,-53,-51,]),'AND':([7,11,13,19,21,33,34,35,36,43,44,46,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,72,74,75,76,77,78,80,81,82,98,99,101,102,103,104,106,107,108,109,114,118,120,121,122,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,149,150,156,157,158,159,160,164,165,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,59,59,-117,-11,-112,-98,-111,-116,-114,-113,-110,-103,-86,59,59,-109,-93,-115,-73,-117,-97,-76,59,59,-16,59,59,59,-92,-15,59,-98,59,-117,-99,59,-14,-40,-49,-44,-41,-39,59,-42,-117,-43,-101,-71,59,59,-66,-68,-67,-65,59,-69,-102,-99,59,-85,-75,-59,59,-117,-36,-117,-48,59,-56,-100,59,-98,59,-57,-58,59,-35,-47,59,-104,59,59,-45,-46,-10,59,-55,-50,-49,59,-52,59,59,-53,-51,]),'DIVIDE':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,135,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,90,-92,-98,-117,-99,-101,-102,-99,90,90,-117,-100,-98,-104,]),'LETTER':([0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,17,18,19,20,21,22,24,26,30,33,34,35,36,39,43,45,47,48,49,50,55,58,59,61,63,65,67,69,71,72,73,74,76,77,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,117,121,123,125,126,127,128,129,133,136,137,140,141,142,143,144,145,146,157,158,159,160,161,163,164,167,168,169,170,171,172,173,175,176,177,178,179,180,181,183,184,],[13,-21,-8,-6,13,-25,20,-4,-22,-7,-2,-19,-3,-23,-24,-20,-5,-12,13,-13,-9,-16,35,39,61,61,13,-11,13,-112,-94,61,-116,-114,-113,81,-96,-115,13,-95,61,-16,81,39,81,118,81,-15,61,13,-82,61,-81,-91,-88,-83,-84,-90,-77,61,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,140,-42,-117,-43,-27,61,-66,-68,-67,-65,81,-69,81,-59,61,13,-36,-117,-26,-48,61,-56,-57,-58,81,-35,35,-18,-47,81,81,-45,-46,-10,-17,81,-55,-50,-49,81,-52,81,81,-53,-51,]),'COMMA':([7,11,13,19,20,21,22,24,35,36,39,40,41,44,46,51,52,53,56,57,60,61,62,64,67,70,75,76,78,80,81,82,98,99,116,118,120,122,124,130,131,132,134,135,147,148,149,150,151,152,155,166,171,174,],[-4,-2,-3,-12,-117,-13,26,-16,-117,-11,-117,71,-34,-98,-111,-110,-103,-86,-109,-93,-73,-117,-97,-76,-16,-37,-92,-15,-98,-63,-117,-99,-72,-14,-33,-101,-71,-70,-61,-62,-102,-99,-85,-75,-38,-100,-74,-64,-60,-108,167,-104,26,-107,]),'TRUE_KW':([7,11,13,19,21,33,34,35,36,43,45,47,48,49,50,55,58,59,63,65,67,69,72,74,76,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,121,123,125,126,127,128,129,133,136,137,141,142,144,145,146,157,158,159,160,164,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,51,51,-117,-11,-112,-94,51,-116,-114,-113,51,-96,-115,-95,51,-16,51,51,51,-15,51,-82,51,-81,-91,-88,-83,-84,-90,-77,51,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,51,-42,-117,-43,51,-66,-68,-67,-65,51,-69,51,-59,51,-36,-117,-48,51,-56,-57,-58,51,-35,-47,51,51,-45,-46,-10,51,-55,-50,-49,51,-52,51,51,-53,-51,]),'INT_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,23,24,32,35,36,37,67,76,99,101,102,103,104,106,108,109,114,117,136,141,142,143,144,146,157,158,160,162,169,171,175,176,177,178,179,183,184,],[15,-8,-6,15,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,15,-16,15,-117,-11,15,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-27,-59,-36,15,-26,-48,-56,-57,-58,-35,15,-45,-10,-55,-50,-49,-117,-52,-53,-51,]),'GREATEREQUAL':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,97,-92,-98,-117,-99,-101,-102,-99,-85,-117,-100,-98,-104,]),'CLOSING_BRACKET':([7,11,13,44,46,51,52,53,54,56,57,60,61,62,64,75,78,80,81,82,98,115,118,119,120,122,124,130,131,132,134,135,148,149,150,151,166,],[-4,-2,-3,-98,-111,-110,-103,-86,76,-109,-93,-73,-117,-97,-76,-92,-98,-63,-117,-99,-72,147,-101,148,-71,-70,-61,-62,-102,-99,-85,-75,-100,-74,-64,-60,-104,]),'TILL_KW':([7,11,13,19,21,35,36,67,69,72,76,99,101,102,103,104,106,108,109,114,136,141,142,144,146,157,158,159,160,164,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-117,-11,-16,105,105,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-59,-36,-117,-48,-56,-57,-58,105,-35,-47,105,-45,-46,-10,105,-55,-50,-49,105,-52,105,105,-53,-51,]),'$end':([2,3,4,5,7,9,11,13,16,18,19,20,21,22,24,35,36,67,76,99,101,102,103,104,106,108,114,117,136,143,144,146,157,158,169,175,176,177,179,183,184,],[-8,-6,-1,-25,-4,-7,-2,-3,0,-5,-12,-117,-13,-9,-16,-117,-11,-16,-15,-14,-40,-49,-44,-41,-39,-42,-43,-27,-59,-26,-48,-56,-57,-58,-45,-55,-50,-49,-52,-53,-51,]),'TIMESEQUAL':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,125,-117,-101,-99,-117,-100,125,]),'GREATER_THAN':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,88,-92,-98,-117,-99,-101,-102,-99,-85,-117,-100,-98,-104,]),'OR':([7,11,13,19,21,33,34,35,36,43,44,46,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,72,74,75,76,77,78,80,81,82,98,99,101,102,103,104,106,107,108,109,114,118,120,121,122,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,149,150,156,157,158,159,160,164,165,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,48,48,-117,-11,-112,-98,-111,-116,-114,-113,-110,-103,-86,48,48,-109,-93,-115,-73,-117,-97,-76,48,48,-16,48,48,48,-92,-15,48,-98,48,-117,-99,48,-14,-40,-49,-44,-41,-39,48,-42,-117,-43,-101,-71,48,48,-66,-68,-67,-65,48,-69,-102,-99,48,-85,-75,-59,48,-117,-36,-117,-48,48,-56,-100,48,-98,48,-57,-58,48,-35,-47,48,-104,48,48,-45,-46,-10,48,-55,-50,-49,48,-52,48,48,-53,-51,]),'DOT':([7,11,13,44,61,78,81,82,118,132,140,148,150,],[-4,-2,-3,73,-117,73,-117,-99,-101,-99,-117,-100,73,]),'CHARACTER_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,23,24,32,35,36,37,67,76,99,101,102,103,104,106,108,109,114,117,136,141,142,143,144,146,157,158,160,162,169,171,175,176,177,178,179,183,184,],[17,-8,-6,17,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,17,-16,17,-117,-11,17,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-27,-59,-36,17,-26,-48,-56,-57,-58,-35,17,-45,-10,-55,-50,-49,-117,-52,-53,-51,]),'LESSEQUAL':([7,11,13,44,46,51,52,53,56,57,61,62,64,75,78,81,82,118,131,132,134,140,148,150,166,],[-4,-2,-3,-98,-111,-110,-103,-86,-109,-93,-117,-97,94,-92,-98,-117,-99,-101,-102,-99,-85,-117,-100,-98,-104,]),'OPENING_PARENTHESES':([0,2,3,4,5,7,9,10,11,13,18,19,20,21,22,24,25,33,34,35,36,43,45,47,48,49,50,55,58,59,61,63,65,67,69,72,74,76,77,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,105,106,107,108,109,112,114,117,121,123,125,126,127,128,129,132,133,136,137,140,141,142,143,144,145,146,157,158,159,160,164,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-117,-8,-6,-117,-25,-4,-7,23,-2,-3,-5,-12,-117,-13,-9,32,34,55,55,-117,-11,-112,-94,55,-116,-114,-113,55,-96,-115,-117,-95,55,-16,55,55,55,-15,55,-117,133,-82,55,-81,-91,-88,-83,-84,-90,-77,55,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,137,-39,55,-42,-117,145,-43,-27,55,-66,-68,-67,-65,55,-69,133,55,-59,55,-117,-36,-117,-26,-48,55,-56,-57,-58,55,-35,-47,55,55,-45,-46,-10,55,-55,-50,-49,55,-52,55,55,-53,-51,]),'DOUBLE_DOT':([7,11,13,20,21,24,35,67,76,],[-4,-2,-3,-117,25,-16,-117,-16,-15,]),'GIVEBACK_KW':([7,11,13,19,21,35,36,67,69,72,76,99,101,102,103,104,106,108,109,114,136,141,142,144,146,157,158,159,160,164,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-117,-11,-16,107,107,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-59,-36,-117,-48,-56,-57,-58,107,-35,-47,107,-45,-46,-10,107,-55,-50,-49,107,-52,107,107,-53,-51,]),'OPENING_BRACE':([7,11,13,19,21,35,36,38,67,69,72,76,99,101,102,103,104,106,108,109,114,136,141,142,144,146,157,158,159,160,164,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-117,-11,69,-16,109,109,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-59,-36,-117,-48,-56,-57,-58,109,-35,-47,109,-45,-46,-10,178,-55,-50,-49,109,-52,109,109,-53,-51,]),'CLOSING_PARENTHESES':([7,11,13,23,27,28,29,31,32,39,40,41,42,44,46,51,52,53,56,57,60,61,62,64,66,68,70,75,78,79,80,81,82,98,116,118,120,122,124,130,131,132,133,134,135,147,148,149,150,151,152,153,154,155,156,165,166,174,],[-4,-2,-3,-117,-31,-28,38,-29,-117,-117,-32,-34,72,-98,-111,-110,-103,-86,-109,-93,-73,-117,-97,-76,99,-30,-37,-92,-98,131,-63,-117,-99,-72,-33,-101,-71,-70,-61,-62,-102,-99,-117,-85,-75,-38,-100,-74,-64,-60,-108,166,-106,-105,168,173,-104,-107,]),'SEMICOLON':([7,11,13,19,21,27,28,35,36,39,40,41,44,46,51,52,53,56,57,60,61,62,64,67,68,69,70,72,75,76,78,80,81,82,98,99,100,101,102,103,104,106,107,108,109,111,113,114,116,118,120,122,124,130,131,132,134,135,136,138,139,140,141,142,144,146,147,148,149,150,151,157,158,159,160,164,166,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-31,37,-117,-11,-117,-32,-34,-98,-111,-110,-103,-86,-109,-93,-73,-117,-97,-76,-16,-30,102,-37,102,-92,-15,-98,-63,-117,-99,-72,-14,136,-40,-49,-44,-41,-39,-117,-42,-117,144,146,-43,-33,-101,-71,-70,-61,-62,-102,-99,-85,-75,-59,157,158,-3,-36,-117,-48,-56,-38,-100,-74,-64,-60,-57,-58,102,-35,-47,-104,102,-45,-46,-10,177,-55,-50,-49,177,-52,177,102,-53,-51,]),'MINUSEQUAL':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,126,-117,-101,-99,-117,-100,126,]),'IF_KW':([7,11,13,19,21,35,36,67,69,72,76,99,101,102,103,104,106,108,109,114,136,141,142,144,146,157,158,159,160,164,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-117,-11,-16,112,112,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-59,-36,-117,-48,-56,-57,-58,112,-35,-47,112,-45,-46,-10,112,-55,-50,-49,112,-52,112,112,-53,-51,]),'BOOLEAN_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,23,24,32,35,36,37,67,76,99,101,102,103,104,106,108,109,114,117,136,141,142,143,144,146,157,158,160,162,169,171,175,176,177,178,179,183,184,],[12,-8,-6,12,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,12,-16,12,-117,-11,12,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-27,-59,-36,12,-26,-48,-56,-57,-58,-35,12,-45,-10,-55,-50,-49,-117,-52,-53,-51,]),'OPENING_BRACKET':([7,11,13,20,24,35,39,44,61,67,70,78,81,82,118,132,140,148,150,],[-4,-2,-3,-117,33,-117,-117,74,-117,33,115,74,-117,-99,-101,-99,-117,-100,74,]),'EQUAL':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,127,-117,-101,-99,-117,-100,127,]),'BOOL_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,23,24,32,35,36,37,67,76,99,101,102,103,104,106,108,109,114,117,136,141,142,143,144,146,157,158,160,162,169,171,175,176,177,178,179,183,184,],[14,-8,-6,14,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,14,-16,14,-117,-11,14,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-27,-59,-36,14,-26,-48,-56,-57,-58,-35,14,-45,-10,-55,-50,-49,-117,-52,-53,-51,]),'COMEBACK_KW':([7,11,13,19,21,35,36,67,69,72,76,99,101,102,103,104,106,108,109,114,136,141,142,144,146,157,158,159,160,164,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,-117,-11,-16,113,113,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-59,-36,-117,-48,-56,-57,-58,113,-35,-47,113,-45,-46,-10,113,-55,-50,-49,113,-52,113,113,-53,-51,]),'STATIC_KW':([7,11,13,19,21,35,36,67,76,99,109,141,142,160,171,178,],[-4,-2,-3,-12,-13,-117,-11,-16,-15,-14,-117,-36,162,-35,-10,-117,]),'TIMES':([7,11,13,19,21,33,34,35,36,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,61,62,63,64,65,67,69,72,74,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,106,107,108,109,114,118,121,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,150,157,158,159,160,164,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,63,63,-117,-11,-112,-98,-94,-111,63,-116,-114,-113,-110,-103,-86,63,-109,-93,-96,-115,-117,-97,-95,96,63,-16,63,63,63,-92,-15,63,-98,-117,-99,-82,63,-81,-91,-88,-83,-84,-90,-77,63,-87,-79,-78,-89,-80,-14,-40,-49,-44,-41,-39,63,-42,-117,-43,-101,63,-66,-68,-67,-65,63,-69,-102,-99,63,96,96,-59,63,-117,-36,-117,-48,63,-56,-100,-98,-57,-58,63,-35,-47,-104,63,63,-45,-46,-10,63,-55,-50,-49,63,-52,63,63,-53,-51,]),'CHAR_KW':([0,2,3,4,5,7,9,11,13,18,19,20,21,22,23,24,32,35,36,37,67,76,99,101,102,103,104,106,108,109,114,117,136,141,142,143,144,146,157,158,160,162,169,171,175,176,177,178,179,183,184,],[8,-8,-6,8,-25,-4,-7,-2,-3,-5,-12,-117,-13,-9,8,-16,8,-117,-11,8,-16,-15,-14,-40,-49,-44,-41,-39,-42,-117,-43,-27,-59,-36,8,-26,-48,-56,-57,-58,-35,8,-45,-10,-55,-50,-49,-117,-52,-53,-51,]),'MINUSMINUS':([7,11,13,78,81,118,132,140,148,150,],[-4,-2,-3,130,-117,-101,-99,-117,-100,130,]),'LOGICAL_OR':([7,11,13,19,21,33,34,35,36,43,44,46,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,72,74,75,76,77,78,80,81,82,98,99,101,102,103,104,106,107,108,109,114,118,120,121,122,123,125,126,127,128,129,131,132,133,134,135,136,137,140,141,142,144,145,146,148,149,150,156,157,158,159,160,164,165,166,167,168,169,170,171,173,175,176,177,178,179,180,181,183,184,],[-4,-2,-3,-12,-13,50,50,-117,-11,-112,-98,-111,-116,-114,-113,-110,-103,-86,50,50,-109,-93,-115,-73,-117,-97,-76,50,50,-16,50,50,50,-92,-15,50,-98,50,-117,-99,50,-14,-40,-49,-44,-41,-39,50,-42,-117,-43,-101,-71,50,50,-66,-68,-67,-65,50,-69,-102,-99,50,-85,-75,-59,50,-117,-36,-117,-48,50,-56,-100,50,-98,50,-57,-58,50,-35,-47,50,-104,50,50,-45,-46,-10,50,-55,-50,-49,50,-52,50,50,-53,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'list':([0,],[4,]),'alterable':([33,34,47,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[44,44,44,78,44,78,78,78,44,44,44,78,44,150,78,44,44,78,78,78,78,78,78,78,]),'unaryop':([33,34,47,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'localDeclarations':([109,178,],[142,142,]),'eachExpression':([33,34,55,65,69,72,74,77,107,121,128,133,137,145,159,167,168,173,178,180,181,],[54,66,80,98,80,80,80,122,80,149,80,80,156,165,80,80,80,80,80,80,80,]),'compareType':([64,],[92,]),'selectPhrase':([69,72,159,168,173,178,180,181,],[104,104,104,104,104,104,104,104,]),'type':([0,4,23,32,37,142,162,],[6,6,30,30,30,163,172,]),'empty':([0,4,20,23,32,35,39,61,81,107,109,133,140,142,178,],[7,7,7,31,31,7,7,7,7,7,141,154,7,164,141,]),'compoundPhrase':([69,72,159,168,173,178,180,181,],[101,101,101,101,101,101,101,101,]),'statementList':([142,],[159,]),'numOrletter':([0,4,20,35,39,61,81,107,140,],[10,10,24,67,70,82,132,139,132,]),'equal':([64,],[91,]),'factor':([33,34,47,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'varInitialization':([6,26,161,],[19,36,19,]),'arguments':([133,],[155,]),'scopedSpecifier':([142,],[161,]),'varForm':([6,26,161,],[21,21,21,]),'mathEXP':([33,34,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[64,64,64,64,64,64,64,64,134,135,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'continue':([69,72,159,168,173,178,180,181,],[103,103,103,103,103,103,103,103,]),'variableList':([6,161,],[22,171,]),'varDeclaration':([0,4,],[2,2,]),'op':([64,134,135,],[84,84,84,]),'declaration':([0,4,],[3,18,]),'constant':([33,34,47,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'paramTypeList':([23,32,37,],[27,27,68,]),'ifBody':([173,178,180,],[176,180,182,]),'paramList':([30,],[40,]),'allExpression':([55,69,72,74,107,128,133,159,167,168,173,178,180,181,],[79,111,111,119,138,151,152,111,174,111,111,111,111,111,]),'phrase':([69,72,159,168,173,178,180,181,],[106,106,106,106,106,106,106,106,]),'args':([133,],[153,]),'parameter':([23,32,],[29,42,]),'unaryExpression':([33,34,47,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[53,53,75,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'function':([0,4,],[9,9,]),'statement':([69,72,159,168,173,178,180,181,],[110,117,170,175,179,179,179,183,]),'inalterable':([33,34,47,55,65,69,72,74,77,84,92,107,121,128,133,137,145,159,167,168,173,178,180,181,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'listOfParameters':([23,32,],[28,28,]),'ScopedVariableDec':([142,],[160,]),'paramId':([30,71,],[41,116,]),'relExpression':([33,34,55,65,69,72,74,77,107,121,128,133,137,145,159,167,168,173,178,180,181,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'mathOp':([78,150,],[128,128,]),'iterationPhrase':([69,72,159,168,173,178,180,181,],[108,108,108,108,108,108,108,108,]),'nonEqual':([64,],[95,]),'returnPhrase':([69,72,159,168,173,178,180,181,],[114,114,114,114,114,114,114,114,]),'program':([0,],[16,]),'logicOp':([33,34,54,55,65,66,69,72,74,77,80,98,107,121,122,128,133,137,145,149,156,159,165,167,168,173,178,180,181,],[65,65,77,65,65,77,65,65,65,65,77,77,65,65,77,65,65,65,65,77,77,65,77,65,65,65,65,65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','yacc.py',26),
  ('numOrletter -> NUMBER','numOrletter',1,'p_numOrletter','yacc.py',29),
  ('numOrletter -> LETTER','numOrletter',1,'p_numOrletter','yacc.py',30),
  ('numOrletter -> empty','numOrletter',1,'p_numOrletter','yacc.py',31),
  ('list -> list declaration','list',2,'p_list','yacc.py',35),
  ('list -> declaration','list',1,'p_list','yacc.py',36),
  ('declaration -> function','declaration',1,'p_declaration','yacc.py',39),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','yacc.py',40),
  ('varDeclaration -> type variableList','varDeclaration',2,'p_varDeclaration','yacc.py',43),
  ('ScopedVariableDec -> scopedSpecifier variableList','ScopedVariableDec',2,'p_ScopedVariableDec','yacc.py',46),
  ('variableList -> variableList COMMA varInitialization','variableList',3,'p_variableList','yacc.py',49),
  ('variableList -> varInitialization','variableList',1,'p_variableList','yacc.py',50),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization','yacc.py',53),
  ('varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES','varInitialization',5,'p_varInitialization','yacc.py',54),
  ('varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET','varForm',5,'p_varForm','yacc.py',57),
  ('varForm -> LETTER numOrletter','varForm',2,'p_varForm','yacc.py',58),
  ('scopedSpecifier -> STATIC_KW type','scopedSpecifier',2,'p_scopedSpecifier','yacc.py',61),
  ('scopedSpecifier -> type','scopedSpecifier',1,'p_scopedSpecifier','yacc.py',62),
  ('type -> BOOLEAN_KW','type',1,'p_type','yacc.py',65),
  ('type -> CHARACTER_KW','type',1,'p_type','yacc.py',66),
  ('type -> INTEGER_KW','type',1,'p_type','yacc.py',67),
  ('type -> CHAR_KW','type',1,'p_type','yacc.py',68),
  ('type -> BOOL_KW','type',1,'p_type','yacc.py',69),
  ('type -> INT_KW','type',1,'p_type','yacc.py',70),
  ('function -> VOID_KW','function',1,'p_function','yacc.py',73),
  ('function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE','function',7,'p_function','yacc.py',74),
  ('function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement','function',7,'p_function','yacc.py',75),
  ('parameter -> listOfParameters','parameter',1,'p_parameter','yacc.py',78),
  ('parameter -> empty','parameter',1,'p_parameter','yacc.py',79),
  ('listOfParameters -> listOfParameters SEMICOLON paramTypeList','listOfParameters',3,'p_listOfParameters','yacc.py',82),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters','yacc.py',83),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','yacc.py',86),
  ('paramList -> paramList COMMA paramId','paramList',3,'p_paramList','yacc.py',89),
  ('paramList -> paramId','paramList',1,'p_paramList','yacc.py',90),
  ('localDeclarations -> localDeclarations ScopedVariableDec','localDeclarations',2,'p_localDeclarations','yacc.py',93),
  ('localDeclarations -> empty','localDeclarations',1,'p_localDeclarations','yacc.py',94),
  ('paramId -> LETTER numOrletter','paramId',2,'p_paramId','yacc.py',97),
  ('paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET','paramId',4,'p_paramId','yacc.py',98),
  ('statement -> phrase','statement',1,'p_statement','yacc.py',101),
  ('statement -> compoundPhrase','statement',1,'p_statement','yacc.py',102),
  ('statement -> selectPhrase','statement',1,'p_statement','yacc.py',103),
  ('statement -> iterationPhrase','statement',1,'p_statement','yacc.py',104),
  ('statement -> returnPhrase','statement',1,'p_statement','yacc.py',105),
  ('statement -> continue','statement',1,'p_statement','yacc.py',106),
  ('compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE','compoundPhrase',4,'p_compoundPhrase','yacc.py',109),
  ('statementList -> statementList statement','statementList',2,'p_statementList','yacc.py',112),
  ('statementList -> empty','statementList',1,'p_statementList','yacc.py',113),
  ('phrase -> allExpression SEMICOLON','phrase',2,'p_phrase','yacc.py',116),
  ('phrase -> SEMICOLON','phrase',1,'p_phrase','yacc.py',117),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody','selectPhrase',5,'p_selectPhrase','yacc.py',120),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE','selectPhrase',8,'p_selectPhrase','yacc.py',121),
  ('ifBody -> statement','ifBody',1,'p_ifBody','yacc.py',125),
  ('ifBody -> statement OTHER_KW statement','ifBody',3,'p_ifBody','yacc.py',126),
  ('ifBody -> SEMICOLON','ifBody',1,'p_ifBody','yacc.py',127),
  ('iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement','iterationPhrase',5,'p_iterationPhrase','yacc.py',130),
  ('returnPhrase -> COMEBACK_KW SEMICOLON','returnPhrase',2,'p_returnPhrase','yacc.py',133),
  ('returnPhrase -> GIVEBACK_KW allExpression SEMICOLON','returnPhrase',3,'p_returnPhrase','yacc.py',134),
  ('returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON','returnPhrase',3,'p_returnPhrase','yacc.py',135),
  ('continue -> CONTINUE_KW SEMICOLON','continue',2,'p_continue','yacc.py',138),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression','yacc.py',141),
  ('allExpression -> alterable PLUSPLUS','allExpression',2,'p_allExpression','yacc.py',142),
  ('allExpression -> alterable MINUSMINUS','allExpression',2,'p_allExpression','yacc.py',143),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression','yacc.py',144),
  ('allExpression -> alterable mathOp alterable','allExpression',3,'p_allExpression','yacc.py',145),
  ('mathOp -> EQUAL','mathOp',1,'p_mathOp','yacc.py',148),
  ('mathOp -> PLUSEQUAL','mathOp',1,'p_mathOp','yacc.py',149),
  ('mathOp -> MINUSEQUAL','mathOp',1,'p_mathOp','yacc.py',150),
  ('mathOp -> TIMESEQUAL','mathOp',1,'p_mathOp','yacc.py',151),
  ('mathOp -> DIVIDEEQUAL','mathOp',1,'p_mathOp','yacc.py',152),
  ('eachExpression -> eachExpression logicOp eachExpression','eachExpression',3,'p_eachExpression','yacc.py',155),
  ('eachExpression -> eachExpression logicOp THEN_KW','eachExpression',3,'p_eachExpression','yacc.py',156),
  ('eachExpression -> logicOp eachExpression','eachExpression',2,'p_eachExpression','yacc.py',157),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression','yacc.py',158),
  ('eachExpression -> eachExpression logicOp ELSE_KW eachExpression','eachExpression',4,'p_eachExpression','yacc.py',159),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression','yacc.py',162),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression','yacc.py',163),
  ('compareType -> equal','compareType',1,'p_compareType','yacc.py',166),
  ('compareType -> nonEqual','compareType',1,'p_compareType','yacc.py',167),
  ('equal -> LESSEQUAL','equal',1,'p_equal','yacc.py',170),
  ('equal -> GREATEREQUAL','equal',1,'p_equal','yacc.py',171),
  ('equal -> EQUALEQUAL','equal',1,'p_equal','yacc.py',172),
  ('nonEqual -> LESS_THAN','nonEqual',1,'p_nonEqual','yacc.py',175),
  ('nonEqual -> GREATER_THAN','nonEqual',1,'p_nonEqual','yacc.py',176),
  ('nonEqual -> NOTEQUAL','nonEqual',1,'p_nonEqual','yacc.py',177),
  ('mathEXP -> mathEXP op mathEXP','mathEXP',3,'p_mathEXP','yacc.py',181),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP','yacc.py',182),
  ('op -> PLUS','op',1,'p_op','yacc.py',185),
  ('op -> MINUS','op',1,'p_op','yacc.py',186),
  ('op -> TIMES','op',1,'p_op','yacc.py',187),
  ('op -> DIVIDE','op',1,'p_op','yacc.py',188),
  ('op -> PERCENTAGE','op',1,'p_op','yacc.py',189),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression','yacc.py',192),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression','yacc.py',193),
  ('unaryop -> MINUS','unaryop',1,'p_unaryop','yacc.py',196),
  ('unaryop -> TIMES','unaryop',1,'p_unaryop','yacc.py',197),
  ('unaryop -> QUESTION_MARK','unaryop',1,'p_unaryop','yacc.py',198),
  ('factor -> inalterable','factor',1,'p_factor','yacc.py',201),
  ('factor -> alterable','factor',1,'p_factor','yacc.py',202),
  ('alterable -> LETTER numOrletter','alterable',2,'p_alterable','yacc.py',205),
  ('alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET','alterable',4,'p_alterable','yacc.py',206),
  ('alterable -> alterable DOT LETTER','alterable',3,'p_alterable','yacc.py',207),
  ('inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES','inalterable',3,'p_inalterable','yacc.py',210),
  ('inalterable -> constant','inalterable',1,'p_inalterable','yacc.py',211),
  ('inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES','inalterable',5,'p_inalterable','yacc.py',212),
  ('args -> arguments','args',1,'p_args','yacc.py',215),
  ('args -> empty','args',1,'p_args','yacc.py',216),
  ('arguments -> arguments COMMA allExpression','arguments',3,'p_arguments','yacc.py',219),
  ('arguments -> allExpression','arguments',1,'p_arguments','yacc.py',220),
  ('constant -> CONST_KW','constant',1,'p_constant','yacc.py',223),
  ('constant -> TRUE_KW','constant',1,'p_constant','yacc.py',224),
  ('constant -> FALSE_KW','constant',1,'p_constant','yacc.py',225),
  ('logicOp -> LOGICAL_AND','logicOp',1,'p_logicOp','yacc.py',228),
  ('logicOp -> LOGICAL_OR','logicOp',1,'p_logicOp','yacc.py',229),
  ('logicOp -> TILDA','logicOp',1,'p_logicOp','yacc.py',230),
  ('logicOp -> AND','logicOp',1,'p_logicOp','yacc.py',231),
  ('logicOp -> OR','logicOp',1,'p_logicOp','yacc.py',232),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',236),
]
