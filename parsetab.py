
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORLOGICAL_ORleftANDLOGICAL_ANDleftEQUALleftLESS_THANGREATER_THANLESSEQUALGREATEREQUALleftPLUSMINUSleftTIMESDIVIDEleftPERCENTAGEleftTILDAPLUSPLUSMINUSMINUSAND BOOLEAN_KW BOOL_KW CHARACTER_KW CHAR_KW CLOSING_BRACE CLOSING_BRACKET CLOSING_PARENTHESES COMEBACK_KW COMMA COMMENT CONST_KW CONTINUE_KW DIVIDE DIVIDEEQUAL DOT DOUBLE_DOT ELSE_KW EQUAL EQUALEQUAL FALSE_KW GIVEBACK_KW GREATEREQUAL GREATER_THAN IF_KW INTEGER_KW INT_KW LESSEQUAL LESS_THAN LETTER LOGICAL_AND LOGICAL_OR MINUS MINUSEQUAL MINUSMINUS NOTEQUAL NUMBER OPENING_BRACE OPENING_BRACKET OPENING_PARENTHESES OR OTHER_KW PERCENTAGE PLUS PLUSEQUAL PLUSPLUS QUESTION_MARK SEMICOLON STATIC_KW THEN_KW TILDA TILL_KW TIMES TIMESEQUAL TRUE_KW VOID_KWprogram : listnumOrletter : NUMBERnumOrletter : LETTERlist : list declarationlist : declarationdeclaration : functiondeclaration : varDeclarationvarDeclaration : type variableList SEMICOLONScopedVariableDec : scopedSpecifier variableListvariableList : variableList COMMA varInitializationvariableList : varInitializationvarInitialization : varFormvarInitialization : varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESESvarForm : LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKETvarForm : LETTER numOrletterscopedSpecifier : STATIC_KW typescopedSpecifier : typetype : BOOLEAN_KWtype : CHARACTER_KWtype : INTEGER_KWtype : CHAR_KW type : BOOL_KWtype : INT_KWfunction : VOID_KWfunction : numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACEfunction : type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementparameter : listOfParametersparameter : emptylistOfParameters : listOfParameters SEMICOLON paramTypeListlistOfParameters : paramTypeListparamTypeList : type paramListparamList : paramList COMMA paramIdparamList : paramIdlocalDeclarations : localDeclarations ScopedVariableDeclocalDeclarations : emptyparamId : LETTER numOrletterparamId : LETTER numOrletter OPENING_BRACKET CLOSING_BRACKETstatement : phrasestatement : compoundPhrasestatement : selectPhrasestatement : iterationPhrasestatement : returnPhrasestatement : continuecompoundPhrase : OPENING_BRACE localDeclarations statementList CLOSING_BRACEstatementList : statementList statementstatementList : emptyphrase : allExpression SEMICOLONphrase : SEMICOLONselectPhrase : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyselectPhrase : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACEifBody : statementifBody : statement OTHER_KW statementiterationPhrase : TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementreturnPhrase : COMEBACK_KW SEMICOLONreturnPhrase : GIVEBACK_KW allExpression SEMICOLONreturnPhrase : GIVEBACK_KW numOrletter SEMICOLONcontinue : CONTINUE_KW SEMICOLONallExpression : alterable mathOp allExpressionallExpression : alterable PLUSPLUSallExpression : alterable MINUSMINUSallExpression : eachExpressionallExpression : alterable mathOp alterablemathOp : EQUALmathOp : PLUSEQUALmathOp : MINUSEQUALmathOp : TIMESEQUALmathOp : DIVIDEEQUALeachExpression : eachExpression LOGICAL_AND eachExpressioneachExpression : eachExpression LOGICAL_AND THEN_KW eachExpressioneachExpression : LOGICAL_AND eachExpressioneachExpression : eachExpression LOGICAL_AND ELSE_KW eachExpressioneachExpression : eachExpression LOGICAL_OR eachExpressioneachExpression : eachExpression LOGICAL_OR THEN_KW eachExpressioneachExpression : LOGICAL_OR eachExpressioneachExpression : eachExpression LOGICAL_OR ELSE_KW eachExpressioneachExpression : eachExpression TILDA eachExpressioneachExpression : eachExpression TILDA THEN_KW eachExpressioneachExpression : TILDA eachExpressioneachExpression : eachExpression TILDA ELSE_KW eachExpressioneachExpression : eachExpression AND eachExpressioneachExpression : eachExpression AND THEN_KW eachExpressioneachExpression : AND eachExpressioneachExpression : eachExpression AND ELSE_KW eachExpressioneachExpression : eachExpression OR eachExpressioneachExpression : eachExpression OR THEN_KW eachExpressioneachExpression : OR eachExpressioneachExpression : eachExpression OR ELSE_KW eachExpressioneachExpression : relExpressionrelExpression : mathEXP compareType mathEXPrelExpression : mathEXPcompareType : equalcompareType : nonEqualequal : LESSEQUALequal : GREATEREQUALequal : EQUALEQUALnonEqual : LESS_THANnonEqual : GREATER_THANnonEqual : NOTEQUALmathEXP : mathEXP PLUS mathEXPmathEXP : mathEXP MINUS mathEXPmathEXP : mathEXP TIMES mathEXPmathEXP : mathEXP DIVIDE mathEXPmathEXP : mathEXP PERCENTAGE mathEXPmathEXP : unaryExpressionunaryExpression : unaryop unaryExpressionunaryExpression : factorunaryop : MINUSunaryop : TIMESunaryop : QUESTION_MARKfactor : inalterablefactor : alterablealterable : LETTER numOrletteralterable : alterable OPENING_BRACKET allExpression CLOSING_BRACKETalterable : alterable DOT LETTERinalterable : OPENING_PARENTHESES allExpression CLOSING_PARENTHESESinalterable : constantinalterable : LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESESargs : argumentsargs : emptyarguments : arguments COMMA allExpressionarguments : allExpressionconstant : CONST_KWconstant : TRUE_KWconstant : FALSE_KW\n        empty :\n        '
    
_lr_action_items = {'STATIC_KW':([7,8,19,21,32,42,80,105,116,165,166,192,201,207,],[-2,-3,-11,-12,-10,-15,-14,-13,-125,-35,190,-34,-9,-125,]),'GREATEREQUAL':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,88,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,-101,-100,-99,-114,-111,-113,-117,]),'AND':([7,8,19,21,32,35,36,42,44,46,47,48,49,50,51,53,55,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,82,84,85,101,102,103,104,105,106,107,110,111,112,114,116,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,181,186,187,188,189,191,192,195,196,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,65,65,-15,65,-116,-88,65,-122,77,65,-123,-110,-90,-111,-104,65,-124,-106,65,65,77,65,65,-70,-105,77,65,65,65,65,65,-14,77,-111,-112,65,-78,77,-82,-13,-42,-48,-41,-40,65,-43,-125,-39,-38,-68,65,65,77,65,65,-80,65,65,77,65,65,-76,65,65,-115,-112,-66,-63,-65,-67,-64,65,65,-103,-102,-89,-101,-100,-99,-114,-57,-54,-47,65,-35,-125,65,77,77,77,77,77,77,77,77,77,77,-111,-113,-55,-56,77,-46,-34,65,77,-117,65,65,-9,-44,-45,65,-49,65,-51,-53,65,65,-52,-50,]),'EQUAL':([7,8,84,140,156,181,186,],[-2,-3,142,-112,-114,142,-113,]),'CHARACTER_KW':([0,3,4,7,8,12,14,16,17,19,21,22,24,32,34,38,42,80,105,106,107,110,111,114,116,119,120,123,158,159,163,165,166,168,187,188,190,192,201,202,206,207,208,209,213,214,],[6,6,-5,-2,-3,-7,-6,-24,-4,-11,-12,6,-8,-10,6,6,-15,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-26,-57,-54,-47,-35,6,-25,-55,-56,6,-34,-9,-44,-49,-125,-51,-53,-52,-50,]),'SEMICOLON':([7,8,18,19,21,25,29,31,32,40,41,42,46,47,49,53,55,57,58,59,61,63,67,68,69,71,72,73,74,80,82,84,85,102,103,104,105,106,107,108,109,110,111,113,114,116,119,120,122,124,127,130,133,136,139,140,144,147,150,151,152,153,154,155,156,158,159,160,161,162,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,186,187,188,191,192,195,197,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,24,-11,-12,-15,38,-30,-10,-33,-31,-15,-116,-88,-122,-123,-110,-90,-111,-104,-124,-106,107,-29,-36,107,-70,-105,-74,-14,-61,-111,-112,-78,-86,-82,-13,-42,-48,158,159,-41,-40,163,-43,-125,-39,-38,-32,-68,-84,-80,-72,-76,-115,-112,-60,-59,-103,-102,-89,-101,-100,-99,-114,-57,-54,187,-3,188,-47,-35,-125,-37,-71,-69,-87,-85,-83,-81,-75,-73,-79,-77,-58,-62,-113,-55,-56,-46,-34,107,-117,107,-9,-44,-45,107,-49,107,-51,-53,107,107,-52,-50,]),'OPENING_PARENTHESES':([7,8,13,19,21,25,26,32,35,36,42,44,45,48,51,54,56,60,62,64,65,67,71,75,76,77,78,79,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,115,116,117,119,120,125,126,128,129,131,132,134,135,137,138,140,141,142,143,145,146,148,149,158,159,163,164,165,166,167,187,188,191,192,195,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,22,-11,-12,34,36,-10,51,51,-15,51,51,51,51,-108,-109,51,-107,51,51,51,51,51,51,51,51,51,-14,149,-96,-92,-94,51,51,-91,51,-95,51,-93,51,51,-97,-98,51,-13,-42,-48,-41,-40,51,-43,164,-125,167,-39,-38,51,51,51,51,51,51,51,51,51,51,149,-66,-63,-65,-67,-64,51,51,-57,-54,-47,51,-35,-125,51,-55,-56,-46,-34,51,51,51,-9,-44,-45,51,-49,51,-51,-53,51,51,-52,-50,]),'BOOL_KW':([0,3,4,7,8,12,14,16,17,19,21,22,24,32,34,38,42,80,105,106,107,110,111,114,116,119,120,123,158,159,163,165,166,168,187,188,190,192,201,202,206,207,208,209,213,214,],[2,2,-5,-2,-3,-7,-6,-24,-4,-11,-12,2,-8,-10,2,2,-15,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-26,-57,-54,-47,-35,2,-25,-55,-56,2,-34,-9,-44,-49,-125,-51,-53,-52,-50,]),'LOGICAL_AND':([7,8,19,21,32,35,36,42,44,46,47,48,49,50,51,53,55,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,82,84,85,101,102,103,104,105,106,107,110,111,112,114,116,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,181,186,187,188,189,191,192,195,196,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,44,44,-15,44,-116,-88,44,-122,75,44,-123,-110,-90,-111,-104,44,-124,-106,44,44,75,44,44,-70,-105,75,44,44,44,44,44,-14,75,-111,-112,44,-78,75,-82,-13,-42,-48,-41,-40,44,-43,-125,-39,-38,-68,44,44,75,44,44,-80,44,44,75,44,44,-76,44,44,-115,-112,-66,-63,-65,-67,-64,44,44,-103,-102,-89,-101,-100,-99,-114,-57,-54,-47,44,-35,-125,44,75,75,75,75,75,75,75,75,75,75,-111,-113,-55,-56,75,-46,-34,44,75,-117,44,44,-9,-44,-45,44,-49,44,-51,-53,44,44,-52,-50,]),'EQUALEQUAL':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,93,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,-101,-100,-99,-114,-111,-113,-117,]),'PLUSEQUAL':([7,8,84,140,156,181,186,],[-2,-3,146,-112,-114,146,-113,]),'GIVEBACK_KW':([7,8,19,21,32,42,67,71,80,105,106,107,110,111,114,116,119,120,158,159,163,165,166,187,188,191,192,195,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,-15,112,112,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,112,112,-9,-44,-45,112,-49,112,-51,-53,112,112,-52,-50,]),'CLOSING_PARENTHESES':([7,8,22,27,28,29,31,34,40,41,43,46,47,49,53,55,57,58,59,61,63,66,68,69,72,73,74,81,82,84,85,102,103,104,122,124,127,130,133,136,139,140,144,147,149,150,151,152,153,154,155,156,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,196,197,205,],[-2,-3,-125,37,-28,-27,-30,-125,-33,-31,71,-116,-88,-122,-123,-110,-90,-111,-104,-124,-106,105,-29,-36,-70,-105,-74,139,-61,-111,-112,-78,-86,-82,-32,-68,-84,-80,-72,-76,-115,-112,-60,-59,-125,-103,-102,-89,-101,-100,-99,-114,-37,-71,-69,-87,-85,-83,-81,-75,-73,-79,-77,-58,-62,-121,197,-118,-119,-113,199,204,-117,-120,]),'THEN_KW':([75,76,77,78,79,],[126,129,132,135,138,]),'MINUSEQUAL':([7,8,84,140,156,181,186,],[-2,-3,143,-112,-114,143,-113,]),'CONTINUE_KW':([7,8,19,21,32,42,67,71,80,105,106,107,110,111,114,116,119,120,158,159,163,165,166,187,188,191,192,195,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,-15,108,108,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,108,108,-9,-44,-45,108,-49,108,-51,-53,108,108,-52,-50,]),'$end':([3,4,5,12,14,16,17,24,106,107,110,111,114,119,120,123,158,159,163,168,187,188,202,206,208,209,213,214,],[-1,-5,0,-7,-6,-24,-4,-8,-42,-48,-41,-40,-43,-39,-38,-26,-57,-54,-47,-25,-55,-56,-44,-49,-51,-53,-52,-50,]),'DOT':([7,8,58,84,85,140,156,181,186,],[-2,-3,100,100,-112,-112,-114,100,-113,]),'OPENING_BRACKET':([7,8,25,42,58,69,84,85,140,156,181,186,],[-2,-3,35,35,101,121,101,-112,-112,-114,101,-113,]),'BOOLEAN_KW':([0,3,4,7,8,12,14,16,17,19,21,22,24,32,34,38,42,80,105,106,107,110,111,114,116,119,120,123,158,159,163,165,166,168,187,188,190,192,201,202,206,207,208,209,213,214,],[11,11,-5,-2,-3,-7,-6,-24,-4,-11,-12,11,-8,-10,11,11,-15,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-26,-57,-54,-47,-35,11,-25,-55,-56,11,-34,-9,-44,-49,-125,-51,-53,-52,-50,]),'DIVIDEEQUAL':([7,8,84,140,156,181,186,],[-2,-3,145,-112,-114,145,-113,]),'COMEBACK_KW':([7,8,19,21,32,42,67,71,80,105,106,107,110,111,114,116,119,120,158,159,163,165,166,187,188,191,192,195,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,-15,109,109,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,109,109,-9,-44,-45,109,-49,109,-51,-53,109,109,-52,-50,]),'CLOSING_BRACKET':([7,8,46,47,49,50,53,55,57,58,59,61,63,72,73,74,82,84,85,102,103,104,121,124,127,130,133,136,139,140,144,147,150,151,152,153,154,155,156,157,170,171,172,173,174,175,176,177,178,179,180,181,186,197,],[-2,-3,-116,-88,-122,80,-123,-110,-90,-111,-104,-124,-106,-70,-105,-74,-61,-111,-112,-78,-86,-82,169,-68,-84,-80,-72,-76,-115,-112,-60,-59,-103,-102,-89,-101,-100,-99,-114,186,-71,-69,-87,-85,-83,-81,-75,-73,-79,-77,-58,-62,-113,-117,]),'PLUSPLUS':([7,8,84,140,156,181,186,],[-2,-3,147,-112,-114,147,-113,]),'OR':([7,8,19,21,32,35,36,42,44,46,47,48,49,50,51,53,55,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,82,84,85,101,102,103,104,105,106,107,110,111,112,114,116,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,181,186,187,188,189,191,192,195,196,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,64,64,-15,64,-116,-88,64,-122,76,64,-123,-110,-90,-111,-104,64,-124,-106,64,64,76,64,64,-70,-105,-74,64,64,64,64,64,-14,76,-111,-112,64,-78,-86,-82,-13,-42,-48,-41,-40,64,-43,-125,-39,-38,-68,64,64,-84,64,64,-80,64,64,-72,64,64,-76,64,64,-115,-112,-66,-63,-65,-67,-64,64,64,-103,-102,-89,-101,-100,-99,-114,-57,-54,-47,64,-35,-125,64,76,76,76,76,76,76,76,76,76,76,-111,-113,-55,-56,76,-46,-34,64,76,-117,64,64,-9,-44,-45,64,-49,64,-51,-53,64,64,-52,-50,]),'GREATER_THAN':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,98,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,-101,-100,-99,-114,-111,-113,-117,]),'TIMESEQUAL':([7,8,84,140,156,181,186,],[-2,-3,141,-112,-114,141,-113,]),'CLOSING_BRACE':([7,8,19,21,32,42,80,105,106,107,110,111,114,116,118,119,120,158,159,163,165,166,187,188,191,192,195,201,202,203,206,207,208,209,212,213,214,],[-2,-3,-11,-12,-10,-15,-14,-13,-42,-48,-41,-40,-43,-125,168,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,202,-9,-44,-45,-49,-125,-51,-53,214,-52,-50,]),'INTEGER_KW':([0,3,4,7,8,12,14,16,17,19,21,22,24,32,34,38,42,80,105,106,107,110,111,114,116,119,120,123,158,159,163,165,166,168,187,188,190,192,201,202,206,207,208,209,213,214,],[15,15,-5,-2,-3,-7,-6,-24,-4,-11,-12,15,-8,-10,15,15,-15,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-26,-57,-54,-47,-35,15,-25,-55,-56,15,-34,-9,-44,-49,-125,-51,-53,-52,-50,]),'DIVIDE':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,152,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,90,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,90,-101,90,90,-114,-111,-113,-117,]),'LOGICAL_OR':([7,8,19,21,32,35,36,42,44,46,47,48,49,50,51,53,55,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,82,84,85,101,102,103,104,105,106,107,110,111,112,114,116,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,181,186,187,188,189,191,192,195,196,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,48,48,-15,48,-116,-88,48,-122,78,48,-123,-110,-90,-111,-104,48,-124,-106,48,48,78,48,48,-70,-105,-74,48,48,48,48,48,-14,78,-111,-112,48,-78,-86,-82,-13,-42,-48,-41,-40,48,-43,-125,-39,-38,-68,48,48,-84,48,48,-80,48,48,-72,48,48,-76,48,48,-115,-112,-66,-63,-65,-67,-64,48,48,-103,-102,-89,-101,-100,-99,-114,-57,-54,-47,48,-35,-125,48,78,78,78,78,78,78,78,78,78,78,-111,-113,-55,-56,78,-46,-34,48,78,-117,48,48,-9,-44,-45,48,-49,48,-51,-53,48,48,-52,-50,]),'CHAR_KW':([0,3,4,7,8,12,14,16,17,19,21,22,24,32,34,38,42,80,105,106,107,110,111,114,116,119,120,123,158,159,163,165,166,168,187,188,190,192,201,202,206,207,208,209,213,214,],[1,1,-5,-2,-3,-7,-6,-24,-4,-11,-12,1,-8,-10,1,1,-15,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-26,-57,-54,-47,-35,1,-25,-55,-56,1,-34,-9,-44,-49,-125,-51,-53,-52,-50,]),'NUMBER':([0,3,4,12,14,16,17,20,24,33,39,52,83,106,107,110,111,112,114,119,120,123,158,159,161,163,168,187,188,202,206,208,209,213,214,],[7,7,-5,-7,-6,-24,-4,7,-8,7,7,7,7,-42,-48,-41,-40,7,-43,-39,-38,-26,-57,-54,7,-47,-25,-55,-56,-44,-49,-51,-53,-52,-50,]),'LETTER':([0,1,2,3,4,6,7,8,9,10,11,12,14,15,16,17,19,20,21,23,24,30,32,33,35,36,39,42,44,45,48,51,52,54,56,60,62,64,65,67,70,71,75,76,77,78,79,80,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,106,107,110,111,112,114,116,119,120,123,125,126,128,129,131,132,134,135,137,138,141,142,143,145,146,148,149,158,159,161,163,164,165,166,167,168,187,188,191,192,193,194,195,198,199,200,201,202,203,204,206,207,208,209,210,211,213,214,],[8,-21,-22,8,-5,-19,-2,-3,-23,20,-18,-7,-6,-20,-24,-4,-11,8,-12,33,-8,39,-10,8,52,52,8,-15,52,52,52,83,8,-108,-109,52,-107,52,52,83,39,83,52,52,52,52,52,-14,8,-96,-92,-94,52,52,-91,52,-95,52,-93,52,52,-97,-98,156,83,-13,-42,-48,-41,-40,161,-43,-125,-39,-38,-26,52,52,52,52,52,52,52,52,52,52,-66,-63,-65,-67,-64,83,83,-57,-54,8,-47,52,-35,-125,52,-25,-55,-56,-46,-34,33,-17,83,83,83,-16,-9,-44,-45,83,-49,83,-51,-53,83,83,-52,-50,]),'INT_KW':([0,3,4,7,8,12,14,16,17,19,21,22,24,32,34,38,42,80,105,106,107,110,111,114,116,119,120,123,158,159,163,165,166,168,187,188,190,192,201,202,206,207,208,209,213,214,],[9,9,-5,-2,-3,-7,-6,-24,-4,-11,-12,9,-8,-10,9,9,-15,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-26,-57,-54,-47,-35,9,-25,-55,-56,9,-34,-9,-44,-49,-125,-51,-53,-52,-50,]),'IF_KW':([7,8,19,21,32,42,67,71,80,105,106,107,110,111,114,116,119,120,158,159,163,165,166,187,188,191,192,195,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,-15,115,115,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,115,115,-9,-44,-45,115,-49,115,-51,-53,115,115,-52,-50,]),'TIMES':([7,8,19,21,32,35,36,42,44,45,46,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,75,76,77,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,116,119,120,125,126,128,129,131,132,134,135,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,181,186,187,188,191,192,195,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,54,54,-15,54,54,-116,54,-122,54,-123,-108,-110,-109,94,-111,-104,54,-124,-107,-106,54,54,54,54,-105,54,54,54,54,54,-14,-111,-112,-96,-92,-94,54,54,-91,54,-95,54,-93,54,54,-97,-98,54,-13,-42,-48,-41,-40,54,-43,-125,-39,-38,54,54,54,54,54,54,54,54,54,54,-115,-112,-66,-63,-65,-67,-64,54,54,-103,-102,94,-101,94,94,-114,-57,-54,-47,54,-35,-125,54,-111,-113,-55,-56,-46,-34,54,-117,54,54,-9,-44,-45,54,-49,54,-51,-53,54,54,-52,-50,]),'QUESTION_MARK':([7,8,19,21,32,35,36,42,44,45,48,51,54,56,60,62,64,65,67,71,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,116,119,120,125,126,128,129,131,132,134,135,137,138,141,142,143,145,146,148,149,158,159,163,164,165,166,167,187,188,191,192,195,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,56,56,-15,56,56,56,56,-108,-109,56,-107,56,56,56,56,56,56,56,56,56,-14,-96,-92,-94,56,56,-91,56,-95,56,-93,56,56,-97,-98,56,-13,-42,-48,-41,-40,56,-43,-125,-39,-38,56,56,56,56,56,56,56,56,56,56,-66,-63,-65,-67,-64,56,56,-57,-54,-47,56,-35,-125,56,-55,-56,-46,-34,56,56,56,-9,-44,-45,56,-49,56,-51,-53,56,56,-52,-50,]),'COMMA':([7,8,18,19,21,25,32,40,41,42,46,47,49,53,55,57,58,59,61,63,69,72,73,74,80,82,84,85,102,103,104,105,122,124,127,130,133,136,139,140,144,147,150,151,152,153,154,155,156,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,186,197,201,205,],[-2,-3,23,-11,-12,-15,-10,-33,70,-15,-116,-88,-122,-123,-110,-90,-111,-104,-124,-106,-36,-70,-105,-74,-14,-61,-111,-112,-78,-86,-82,-13,-32,-68,-84,-80,-72,-76,-115,-112,-60,-59,-103,-102,-89,-101,-100,-99,-114,-37,-71,-69,-87,-85,-83,-81,-75,-73,-79,-77,-58,-62,-121,198,-113,-117,23,-120,]),'OPENING_BRACE':([7,8,19,21,32,37,42,67,71,80,105,106,107,110,111,114,116,119,120,158,159,163,165,166,187,188,191,192,195,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,67,-15,116,116,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,116,207,-9,-44,-45,116,-49,116,-51,-53,116,116,-52,-50,]),'NOTEQUAL':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,99,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,-101,-100,-99,-114,-111,-113,-117,]),'LESS_THAN':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,86,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,-101,-100,-99,-114,-111,-113,-117,]),'PERCENTAGE':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,152,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,89,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,89,89,89,89,89,-114,-111,-113,-117,]),'ELSE_KW':([75,76,77,78,79,],[125,128,131,134,137,]),'VOID_KW':([0,3,4,12,14,16,17,24,106,107,110,111,114,119,120,123,158,159,163,168,187,188,202,206,208,209,213,214,],[16,16,-5,-7,-6,-24,-4,-8,-42,-48,-41,-40,-43,-39,-38,-26,-57,-54,-47,-25,-55,-56,-44,-49,-51,-53,-52,-50,]),'DOUBLE_DOT':([7,8,21,25,42,80,],[-2,-3,26,-15,-15,-14,]),'CONST_KW':([7,8,19,21,32,35,36,42,44,45,48,51,54,56,60,62,64,65,67,71,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,116,119,120,125,126,128,129,131,132,134,135,137,138,141,142,143,145,146,148,149,158,159,163,164,165,166,167,187,188,191,192,195,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,49,49,-15,49,49,49,49,-108,-109,49,-107,49,49,49,49,49,49,49,49,49,-14,-96,-92,-94,49,49,-91,49,-95,49,-93,49,49,-97,-98,49,-13,-42,-48,-41,-40,49,-43,-125,-39,-38,49,49,49,49,49,49,49,49,49,49,-66,-63,-65,-67,-64,49,49,-57,-54,-47,49,-35,-125,49,-55,-56,-46,-34,49,49,49,-9,-44,-45,49,-49,49,-51,-53,49,49,-52,-50,]),'TILL_KW':([7,8,19,21,32,42,67,71,80,105,106,107,110,111,114,116,119,120,158,159,163,165,166,187,188,191,192,195,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,-15,117,117,-14,-13,-42,-48,-41,-40,-43,-125,-39,-38,-57,-54,-47,-35,-125,-55,-56,-46,-34,117,117,-9,-44,-45,117,-49,117,-51,-53,117,117,-52,-50,]),'MINUSMINUS':([7,8,84,140,156,181,186,],[-2,-3,144,-112,-114,144,-113,]),'TRUE_KW':([7,8,19,21,32,35,36,42,44,45,48,51,54,56,60,62,64,65,67,71,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,116,119,120,125,126,128,129,131,132,134,135,137,138,141,142,143,145,146,148,149,158,159,163,164,165,166,167,187,188,191,192,195,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,53,53,-15,53,53,53,53,-108,-109,53,-107,53,53,53,53,53,53,53,53,53,-14,-96,-92,-94,53,53,-91,53,-95,53,-93,53,53,-97,-98,53,-13,-42,-48,-41,-40,53,-43,-125,-39,-38,53,53,53,53,53,53,53,53,53,53,-66,-63,-65,-67,-64,53,53,-57,-54,-47,53,-35,-125,53,-55,-56,-46,-34,53,53,53,-9,-44,-45,53,-49,53,-51,-53,53,53,-52,-50,]),'TILDA':([7,8,19,21,32,35,36,42,44,46,47,48,49,50,51,53,55,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,82,84,85,101,102,103,104,105,106,107,110,111,112,114,116,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,181,186,187,188,189,191,192,195,196,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,60,60,-15,60,-116,-88,60,-122,79,60,-123,-110,-90,-111,-104,60,-124,-106,60,60,79,60,60,79,-105,79,60,60,60,60,60,-14,79,-111,-112,60,-78,79,79,-13,-42,-48,-41,-40,60,-43,-125,-39,-38,79,60,60,79,60,60,79,60,60,79,60,60,-76,60,60,-115,-112,-66,-63,-65,-67,-64,60,60,-103,-102,-89,-101,-100,-99,-114,-57,-54,-47,60,-35,-125,60,79,79,79,79,79,79,79,79,79,79,-111,-113,-55,-56,79,-46,-34,60,79,-117,60,60,-9,-44,-45,60,-49,60,-51,-53,60,60,-52,-50,]),'LESSEQUAL':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,95,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,-101,-100,-99,-114,-111,-113,-117,]),'FALSE_KW':([7,8,19,21,32,35,36,42,44,45,48,51,54,56,60,62,64,65,67,71,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,116,119,120,125,126,128,129,131,132,134,135,137,138,141,142,143,145,146,148,149,158,159,163,164,165,166,167,187,188,191,192,195,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,61,61,-15,61,61,61,61,-108,-109,61,-107,61,61,61,61,61,61,61,61,61,-14,-96,-92,-94,61,61,-91,61,-95,61,-93,61,61,-97,-98,61,-13,-42,-48,-41,-40,61,-43,-125,-39,-38,61,61,61,61,61,61,61,61,61,61,-66,-63,-65,-67,-64,61,61,-57,-54,-47,61,-35,-125,61,-55,-56,-46,-34,61,61,61,-9,-44,-45,61,-49,61,-51,-53,61,61,-52,-50,]),'MINUS':([7,8,19,21,32,35,36,42,44,45,46,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,75,76,77,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,107,110,111,112,114,116,119,120,125,126,128,129,131,132,134,135,137,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,155,156,158,159,163,164,165,166,167,181,186,187,188,191,192,195,197,198,199,201,202,203,204,206,207,208,209,210,211,213,214,],[-2,-3,-11,-12,-10,62,62,-15,62,62,-116,62,-122,62,-123,-108,-110,-109,96,-111,-104,62,-124,-107,-106,62,62,62,62,-105,62,62,62,62,62,-14,-111,-112,-96,-92,-94,62,62,-91,62,-95,62,-93,62,62,-97,-98,62,-13,-42,-48,-41,-40,62,-43,-125,-39,-38,62,62,62,62,62,62,62,62,62,62,-115,-112,-66,-63,-65,-67,-64,62,62,-103,-102,96,-101,-100,-99,-114,-57,-54,-47,62,-35,-125,62,-111,-113,-55,-56,-46,-34,62,-117,62,62,-9,-44,-45,62,-49,62,-51,-53,62,62,-52,-50,]),'OTHER_KW':([106,107,110,111,114,119,120,158,159,163,187,188,202,206,208,209,213,214,],[-42,-48,-41,-40,-43,-39,-38,-57,-54,-47,-55,-56,-44,-49,211,-53,-52,-50,]),'PLUS':([7,8,46,49,53,55,57,58,59,61,63,73,84,85,139,140,150,151,152,153,154,155,156,181,186,197,],[-2,-3,-116,-122,-123,-110,97,-111,-104,-124,-106,-105,-111,-112,-115,-112,-103,-102,97,-101,-100,-99,-114,-111,-113,-117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'returnPhrase':([67,71,195,199,204,207,210,211,],[106,106,106,106,106,106,106,106,]),'ScopedVariableDec':([166,],[192,]),'relExpression':([35,36,44,48,51,60,64,65,67,71,75,76,77,78,79,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'program':([0,],[5,]),'numOrletter':([0,3,20,33,39,52,83,112,161,],[13,13,25,42,69,85,140,162,140,]),'ifBody':([199,207,210,],[206,210,212,]),'compareType':([57,],[92,]),'inalterable':([35,36,44,45,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'variableList':([10,193,],[18,201,]),'unaryExpression':([35,36,44,45,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[59,59,59,73,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'empty':([22,34,116,149,166,207,],[28,28,165,185,191,165,]),'localDeclarations':([116,207,],[166,166,]),'function':([0,3,],[14,14,]),'iterationPhrase':([67,71,195,199,204,207,210,211,],[110,110,110,110,110,110,110,110,]),'selectPhrase':([67,71,195,199,204,207,210,211,],[111,111,111,111,111,111,111,111,]),'paramTypeList':([22,34,38,],[31,31,68,]),'mathOp':([84,181,],[148,148,]),'statementList':([166,],[195,]),'unaryop':([35,36,44,45,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'parameter':([22,34,],[27,43,]),'constant':([35,36,44,45,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'paramId':([30,70,],[40,122,]),'list':([0,],[3,]),'declaration':([0,3,],[4,17,]),'paramList':([30,],[41,]),'allExpression':([51,67,71,101,112,148,149,195,198,199,204,207,210,211,],[81,113,113,157,160,180,182,113,205,113,113,113,113,113,]),'varForm':([10,23,193,],[21,21,21,]),'varInitialization':([10,23,193,],[19,32,19,]),'eachExpression':([35,36,44,48,51,60,64,65,67,71,75,76,77,78,79,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[50,66,72,74,82,102,103,104,82,82,124,127,130,133,136,82,82,170,171,172,173,174,175,176,177,178,179,82,82,189,196,82,82,82,82,82,82,82,]),'continue':([67,71,195,199,204,207,210,211,],[114,114,114,114,114,114,114,114,]),'type':([0,3,22,34,38,166,190,],[10,10,30,30,30,194,200,]),'args':([149,],[183,]),'listOfParameters':([22,34,],[29,29,]),'mathEXP':([35,36,44,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,150,151,152,153,154,155,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'varDeclaration':([0,3,],[12,12,]),'arguments':([149,],[184,]),'nonEqual':([57,],[87,]),'alterable':([35,36,44,45,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[58,58,58,58,58,84,58,58,58,84,84,58,58,58,58,58,58,58,58,58,58,58,84,84,58,58,58,58,58,58,58,58,58,58,181,84,58,58,84,84,84,84,84,84,84,]),'equal':([57,],[91,]),'scopedSpecifier':([166,],[193,]),'statement':([67,71,195,199,204,207,210,211,],[118,123,203,208,209,208,208,213,]),'compoundPhrase':([67,71,195,199,204,207,210,211,],[119,119,119,119,119,119,119,119,]),'phrase':([67,71,195,199,204,207,210,211,],[120,120,120,120,120,120,120,120,]),'factor':([35,36,44,45,48,51,60,64,65,67,71,75,76,77,78,79,89,90,92,94,96,97,101,112,125,126,128,129,131,132,134,135,137,138,148,149,164,167,195,198,199,204,207,210,211,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','yacc.py',32),
  ('numOrletter -> NUMBER','numOrletter',1,'p_numOrletter_0','yacc.py',35),
  ('numOrletter -> LETTER','numOrletter',1,'p_numOrletter_1','yacc.py',38),
  ('list -> list declaration','list',2,'p_list_0','yacc.py',41),
  ('list -> declaration','list',1,'p_list_1','yacc.py',45),
  ('declaration -> function','declaration',1,'p_declaration_0','yacc.py',48),
  ('declaration -> varDeclaration','declaration',1,'p_declaration_1','yacc.py',52),
  ('varDeclaration -> type variableList SEMICOLON','varDeclaration',3,'p_varDeclaration','yacc.py',55),
  ('ScopedVariableDec -> scopedSpecifier variableList','ScopedVariableDec',2,'p_ScopedVariableDec','yacc.py',58),
  ('variableList -> variableList COMMA varInitialization','variableList',3,'p_variableList_0','yacc.py',61),
  ('variableList -> varInitialization','variableList',1,'p_variableList_1','yacc.py',64),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization_0','yacc.py',67),
  ('varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES','varInitialization',5,'p_varInitialization_1','yacc.py',70),
  ('varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET','varForm',5,'p_varForm_0','yacc.py',73),
  ('varForm -> LETTER numOrletter','varForm',2,'p_varForm_1','yacc.py',76),
  ('scopedSpecifier -> STATIC_KW type','scopedSpecifier',2,'p_scopedSpecifier_0','yacc.py',79),
  ('scopedSpecifier -> type','scopedSpecifier',1,'p_scopedSpecifier_1','yacc.py',82),
  ('type -> BOOLEAN_KW','type',1,'p_type_0','yacc.py',85),
  ('type -> CHARACTER_KW','type',1,'p_type_1','yacc.py',88),
  ('type -> INTEGER_KW','type',1,'p_type_2','yacc.py',91),
  ('type -> CHAR_KW','type',1,'p_type_3','yacc.py',94),
  ('type -> BOOL_KW','type',1,'p_type_4','yacc.py',97),
  ('type -> INT_KW','type',1,'p_type_5','yacc.py',100),
  ('function -> VOID_KW','function',1,'p_function_0','yacc.py',103),
  ('function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE','function',7,'p_function_1','yacc.py',107),
  ('function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement','function',7,'p_function_2','yacc.py',111),
  ('parameter -> listOfParameters','parameter',1,'p_parameter_0','yacc.py',114),
  ('parameter -> empty','parameter',1,'p_parameter_1','yacc.py',117),
  ('listOfParameters -> listOfParameters SEMICOLON paramTypeList','listOfParameters',3,'p_listOfParameters_0','yacc.py',120),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters_1','yacc.py',124),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','yacc.py',127),
  ('paramList -> paramList COMMA paramId','paramList',3,'p_paramList_0','yacc.py',130),
  ('paramList -> paramId','paramList',1,'p_paramList_1','yacc.py',133),
  ('localDeclarations -> localDeclarations ScopedVariableDec','localDeclarations',2,'p_localDeclarations_0','yacc.py',136),
  ('localDeclarations -> empty','localDeclarations',1,'p_localDeclarations_1','yacc.py',139),
  ('paramId -> LETTER numOrletter','paramId',2,'p_paramId_0','yacc.py',142),
  ('paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET','paramId',4,'p_paramId_1','yacc.py',145),
  ('statement -> phrase','statement',1,'p_statement_0','yacc.py',148),
  ('statement -> compoundPhrase','statement',1,'p_statement_1','yacc.py',151),
  ('statement -> selectPhrase','statement',1,'p_statement_2','yacc.py',154),
  ('statement -> iterationPhrase','statement',1,'p_statement_3','yacc.py',157),
  ('statement -> returnPhrase','statement',1,'p_statement_4','yacc.py',160),
  ('statement -> continue','statement',1,'p_statement_5','yacc.py',163),
  ('compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE','compoundPhrase',4,'p_compoundPhrase','yacc.py',166),
  ('statementList -> statementList statement','statementList',2,'p_statementList_0','yacc.py',169),
  ('statementList -> empty','statementList',1,'p_statementList_1','yacc.py',172),
  ('phrase -> allExpression SEMICOLON','phrase',2,'p_phrase_0','yacc.py',175),
  ('phrase -> SEMICOLON','phrase',1,'p_phrase_1','yacc.py',178),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody','selectPhrase',5,'p_selectPhrase_0','yacc.py',181),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE','selectPhrase',8,'p_selectPhrase_1','yacc.py',184),
  ('ifBody -> statement','ifBody',1,'p_ifBody_0','yacc.py',187),
  ('ifBody -> statement OTHER_KW statement','ifBody',3,'p_ifBody_1','yacc.py',190),
  ('iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement','iterationPhrase',5,'p_iterationPhrase','yacc.py',193),
  ('returnPhrase -> COMEBACK_KW SEMICOLON','returnPhrase',2,'p_returnPhrase_0','yacc.py',196),
  ('returnPhrase -> GIVEBACK_KW allExpression SEMICOLON','returnPhrase',3,'p_returnPhrase_1','yacc.py',199),
  ('returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON','returnPhrase',3,'p_returnPhrase_2','yacc.py',202),
  ('continue -> CONTINUE_KW SEMICOLON','continue',2,'p_continue','yacc.py',205),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression_0','yacc.py',208),
  ('allExpression -> alterable PLUSPLUS','allExpression',2,'p_allExpression_1','yacc.py',211),
  ('allExpression -> alterable MINUSMINUS','allExpression',2,'p_allExpression_2','yacc.py',214),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression_3','yacc.py',217),
  ('allExpression -> alterable mathOp alterable','allExpression',3,'p_allExpression_4','yacc.py',220),
  ('mathOp -> EQUAL','mathOp',1,'p_mathOp_0','yacc.py',223),
  ('mathOp -> PLUSEQUAL','mathOp',1,'p_mathOp_1','yacc.py',226),
  ('mathOp -> MINUSEQUAL','mathOp',1,'p_mathOp_2','yacc.py',229),
  ('mathOp -> TIMESEQUAL','mathOp',1,'p_mathOp_3','yacc.py',232),
  ('mathOp -> DIVIDEEQUAL','mathOp',1,'p_mathOp_4','yacc.py',235),
  ('eachExpression -> eachExpression LOGICAL_AND eachExpression','eachExpression',3,'p_eachExpression_0','yacc.py',238),
  ('eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression','eachExpression',4,'p_eachExpression_1','yacc.py',241),
  ('eachExpression -> LOGICAL_AND eachExpression','eachExpression',2,'p_eachExpression_2','yacc.py',244),
  ('eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_3','yacc.py',247),
  ('eachExpression -> eachExpression LOGICAL_OR eachExpression','eachExpression',3,'p_eachExpression_4','yacc.py',250),
  ('eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression','eachExpression',4,'p_eachExpression_5','yacc.py',253),
  ('eachExpression -> LOGICAL_OR eachExpression','eachExpression',2,'p_eachExpression_6','yacc.py',256),
  ('eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_7','yacc.py',259),
  ('eachExpression -> eachExpression TILDA eachExpression','eachExpression',3,'p_eachExpression_8','yacc.py',262),
  ('eachExpression -> eachExpression TILDA THEN_KW eachExpression','eachExpression',4,'p_eachExpression_9','yacc.py',265),
  ('eachExpression -> TILDA eachExpression','eachExpression',2,'p_eachExpression_10','yacc.py',268),
  ('eachExpression -> eachExpression TILDA ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_11','yacc.py',271),
  ('eachExpression -> eachExpression AND eachExpression','eachExpression',3,'p_eachExpression_12','yacc.py',274),
  ('eachExpression -> eachExpression AND THEN_KW eachExpression','eachExpression',4,'p_eachExpression_13','yacc.py',277),
  ('eachExpression -> AND eachExpression','eachExpression',2,'p_eachExpression_14','yacc.py',280),
  ('eachExpression -> eachExpression AND ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_15','yacc.py',283),
  ('eachExpression -> eachExpression OR eachExpression','eachExpression',3,'p_eachExpression_16','yacc.py',286),
  ('eachExpression -> eachExpression OR THEN_KW eachExpression','eachExpression',4,'p_eachExpression_17','yacc.py',289),
  ('eachExpression -> OR eachExpression','eachExpression',2,'p_eachExpression_18','yacc.py',292),
  ('eachExpression -> eachExpression OR ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_19','yacc.py',295),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression_20','yacc.py',298),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression_0','yacc.py',301),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression_1','yacc.py',304),
  ('compareType -> equal','compareType',1,'p_compareType_0','yacc.py',307),
  ('compareType -> nonEqual','compareType',1,'p_compareType_1','yacc.py',310),
  ('equal -> LESSEQUAL','equal',1,'p_equal_0','yacc.py',313),
  ('equal -> GREATEREQUAL','equal',1,'p_equal_1','yacc.py',316),
  ('equal -> EQUALEQUAL','equal',1,'p_equal_2','yacc.py',319),
  ('nonEqual -> LESS_THAN','nonEqual',1,'p_nonEqual_0','yacc.py',322),
  ('nonEqual -> GREATER_THAN','nonEqual',1,'p_nonEqual_1','yacc.py',325),
  ('nonEqual -> NOTEQUAL','nonEqual',1,'p_nonEqual_2','yacc.py',328),
  ('mathEXP -> mathEXP PLUS mathEXP','mathEXP',3,'p_mathEXP_0','yacc.py',331),
  ('mathEXP -> mathEXP MINUS mathEXP','mathEXP',3,'p_mathEXP_1','yacc.py',334),
  ('mathEXP -> mathEXP TIMES mathEXP','mathEXP',3,'p_mathEXP_2','yacc.py',337),
  ('mathEXP -> mathEXP DIVIDE mathEXP','mathEXP',3,'p_mathEXP_3','yacc.py',340),
  ('mathEXP -> mathEXP PERCENTAGE mathEXP','mathEXP',3,'p_mathEXP_4','yacc.py',343),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP_5','yacc.py',346),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression_0','yacc.py',364),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression_1','yacc.py',367),
  ('unaryop -> MINUS','unaryop',1,'p_unaryop_0','yacc.py',370),
  ('unaryop -> TIMES','unaryop',1,'p_unaryop_1','yacc.py',373),
  ('unaryop -> QUESTION_MARK','unaryop',1,'p_unaryop_2','yacc.py',376),
  ('factor -> inalterable','factor',1,'p_factor_0','yacc.py',379),
  ('factor -> alterable','factor',1,'p_factor_1','yacc.py',382),
  ('alterable -> LETTER numOrletter','alterable',2,'p_alterable_0','yacc.py',385),
  ('alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET','alterable',4,'p_alterable_1','yacc.py',388),
  ('alterable -> alterable DOT LETTER','alterable',3,'p_alterable_2','yacc.py',391),
  ('inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES','inalterable',3,'p_inalterable_0','yacc.py',394),
  ('inalterable -> constant','inalterable',1,'p_inalterable_1','yacc.py',397),
  ('inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES','inalterable',5,'p_inalterable_2','yacc.py',400),
  ('args -> arguments','args',1,'p_args_0','yacc.py',403),
  ('args -> empty','args',1,'p_args_1','yacc.py',406),
  ('arguments -> arguments COMMA allExpression','arguments',3,'p_arguments_0','yacc.py',409),
  ('arguments -> allExpression','arguments',1,'p_arguments_1','yacc.py',412),
  ('constant -> CONST_KW','constant',1,'p_constant_0','yacc.py',415),
  ('constant -> TRUE_KW','constant',1,'p_constant_1','yacc.py',418),
  ('constant -> FALSE_KW','constant',1,'p_constant_2','yacc.py',421),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',425),
]
