
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCLOSING_PARENTHESESleftORLOGICAL_ORTHEN_KWleftANDLOGICAL_ANDleftEQUALleftLESS_THANGREATER_THANLESSEQUALGREATEREQUALleftPLUSMINUSleftTIMESDIVIDEleftPERCENTAGEleftTILDAPLUSPLUSMINUSMINUSnonassocELSE_KWAND BOOLEAN_KW BOOL_KW CHARACTER_KW CHAR_KW CLOSING_BRACE CLOSING_BRACKET CLOSING_PARENTHESES COMEBACK_KW COMMA COMMENT CONST_KW CONTINUE_KW DIVIDE DIVIDEEQUAL DOT DOUBLE_DOT ELSE_KW EQUAL EQUALEQUAL FALSE_KW FuncName GIVEBACK_KW GREATEREQUAL GREATER_THAN IF_KW INTEGER_KW INT_KW LESSEQUAL LESS_THAN LOGICAL_AND LOGICAL_OR MINUS MINUSEQUAL MINUSMINUS NOTEQUAL NUMBER OPENING_BRACE OPENING_BRACKET OPENING_PARENTHESES OR OTHER_KW PERCENTAGE PLUS PLUSEQUAL PLUSPLUS QUESTION_MARK SEMICOLON STATIC_KW THEN_KW TILDA TILL_KW TIMES TIMESEQUAL TRUE_KW VOID_KW VarNameprogram : listnumOrletter : NUMBERnumOrletter : VarNamelist : list declarationlist : declarationdeclaration : functiondeclaration : varDeclarationvarDeclaration : type variableList SEMICOLONScopedVariableDec : scopedSpecifier variableListvariableList : variableList COMMA varInitializationvariableList : varInitializationvarInitialization : varFormvarInitialization : varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESESvarForm : VarName OPENING_BRACKET eachExpression CLOSING_BRACKETvarForm : VarNamescopedSpecifier : STATIC_KW typescopedSpecifier : typetype : BOOLEAN_KWtype : CHARACTER_KWtype : INTEGER_KWtype : CHAR_KW type : BOOL_KWtype : INT_KWfunction : VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACEfunction : VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACEfunction : type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementfunction : type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementparameter : listOfParametersparameter : emptylistOfParameters : listOfParameters SEMICOLON paramTypeListlistOfParameters : paramTypeListparamTypeList : type paramListparamList : paramList COMMA paramIdparamList : paramIdlocalDeclarations : localDeclarations ScopedVariableDeclocalDeclarations : emptyparamId : VarNameparamId : VarName OPENING_BRACKET CLOSING_BRACKETcore_statement : matched\n        | unmatched\n        matched : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW matched\n        | IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW matched\n        | statement\n        unmatched : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched\n        |   IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE\n        |   IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW unmatched\n        |   IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW unmatched\n        statement : phrasestatement : compoundPhrasestatement : iterationPhrasestatement : returnPhrasestatement : continuecompoundPhrase : OPENING_BRACE localDeclarations statementList CLOSING_BRACEstatementList : statementList statementstatementList : emptyphrase : allExpression SEMICOLONphrase : SEMICOLONifBody : matchedifBody : matched OTHER_KW matchediterationPhrase : TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementreturnPhrase : COMEBACK_KW SEMICOLONreturnPhrase : GIVEBACK_KW allExpression SEMICOLONcontinue : CONTINUE_KW SEMICOLONallExpression : alterable mathOp allExpressionallExpression : alterable PLUSPLUSallExpression : alterable MINUSMINUSallExpression : eachExpressionallExpression : alterable mathOp NUMBERmathOp : EQUALmathOp : PLUSEQUALmathOp : MINUSEQUALmathOp : TIMESEQUALmathOp : DIVIDEEQUALeachExpression : eachExpression LOGICAL_AND eachExpressioneachExpression : eachExpression LOGICAL_AND THEN_KW eachExpressioneachExpression : eachExpression LOGICAL_AND ELSE_KW eachExpressioneachExpression : eachExpression LOGICAL_OR eachExpressioneachExpression : eachExpression LOGICAL_OR THEN_KW eachExpressioneachExpression : eachExpression LOGICAL_OR ELSE_KW eachExpressioneachExpression : unaryEachExpressionunaryEachExpression : TILDA eachExpressioneachExpression : eachExpression AND eachExpressioneachExpression : eachExpression AND THEN_KW eachExpressioneachExpression : eachExpression AND ELSE_KW eachExpressioneachExpression : eachExpression OR eachExpressioneachExpression : eachExpression OR THEN_KW eachExpressioneachExpression : eachExpression OR ELSE_KW eachExpressioneachExpression : relExpressionrelExpression : mathEXP compareType mathEXPrelExpression : mathEXPcompareType : equalcompareType : nonEqualequal : LESSEQUALequal : GREATEREQUALequal : EQUALEQUALnonEqual : LESS_THANnonEqual : GREATER_THANnonEqual : NOTEQUALmathEXP : mathEXP PLUS mathEXPmathEXP : mathEXP MINUS mathEXPmathEXP : mathEXP TIMES mathEXPmathEXP : mathEXP DIVIDE mathEXPmathEXP : mathEXP PERCENTAGE mathEXPmathEXP : unaryExpressionunaryExpression : unaryop unaryExpressionunaryExpression : factorunaryop : MINUSunaryop : TIMESunaryop : QUESTION_MARKfactor : inalterablefactor : alterablealterable :  VarNamealterable : alterable OPENING_BRACKET allExpression CLOSING_BRACKETalterable : alterable DOT VarNameinalterable : OPENING_PARENTHESES allExpression CLOSING_PARENTHESESinalterable : constantinalterable : VarName OPENING_PARENTHESES args CLOSING_PARENTHESESargs : argumentsargs : emptyarguments : arguments COMMA allExpressionarguments : allExpressionconstant : CONST_KWconstant : TRUE_KWconstant : FALSE_KW\n        empty :\n        '
    
_lr_action_items = {'QUESTION_MARK':([16,17,27,30,31,37,39,41,46,50,55,56,64,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,181,185,186,187,188,190,],[-12,-11,39,-10,-15,39,-109,39,39,-107,39,-108,39,39,39,-14,39,39,39,39,-91,-97,-94,39,-93,39,-96,39,39,-95,39,39,-98,-92,39,-51,-50,-52,-125,-49,-57,39,-48,-13,39,39,39,39,39,39,39,39,39,-69,-70,-71,-72,-73,39,39,-61,-56,39,-63,-36,-125,39,-55,39,-35,-62,39,-53,-54,-9,-60,]),'OR':([40,42,43,44,45,47,48,49,51,52,53,54,57,65,67,73,74,76,94,115,118,121,124,127,140,141,142,143,144,145,146,159,160,161,162,163,164,165,166,169,171,174,],[-122,-116,-110,70,-106,-123,-112,-90,-124,-80,-111,-88,-104,70,-81,70,-112,-111,-105,-82,-85,-74,-77,-115,-89,-103,-99,-102,-100,-101,-114,-84,-83,-87,-86,-76,-75,-79,-78,-117,-113,70,]),'INT_KW':([0,6,10,12,13,16,17,21,23,24,26,28,29,30,31,60,69,100,101,104,107,108,109,110,112,113,114,152,153,155,156,157,177,180,181,183,184,186,188,190,],[3,-7,-5,3,-6,-12,-11,-4,-8,3,3,3,3,-10,-15,3,-14,-51,-50,-26,-52,-125,-49,-57,-48,-13,-27,-61,-56,-63,-36,3,-35,3,-62,-24,-25,-53,-9,-60,]),'DOUBLE_DOT':([16,18,31,69,],[25,-15,-15,-14,]),'BOOLEAN_KW':([0,6,10,12,13,16,17,21,23,24,26,28,29,30,31,60,69,100,101,104,107,108,109,110,112,113,114,152,153,155,156,157,177,180,181,183,184,186,188,190,],[9,-7,-5,9,-6,-12,-11,-4,-8,9,9,9,9,-10,-15,9,-14,-51,-50,-26,-52,-125,-49,-57,-48,-13,-27,-61,-56,-63,-36,9,-35,9,-62,-24,-25,-53,-9,-60,]),'TRUE_KW':([16,17,27,30,31,37,39,41,46,50,55,56,64,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,181,185,186,187,188,190,],[-12,-11,47,-10,-15,47,-109,47,47,-107,47,-108,47,47,47,-14,47,47,47,47,-91,-97,-94,47,-93,47,-96,47,47,-95,47,47,-98,-92,47,-51,-50,-52,-125,-49,-57,47,-48,-13,47,47,47,47,47,47,47,47,47,-69,-70,-71,-72,-73,47,47,-61,-56,47,-63,-36,-125,47,-55,47,-35,-62,47,-53,-54,-9,-60,]),'ELSE_KW':([68,70,71,72,],[116,119,122,125,]),'COMEBACK_KW':([16,17,30,31,64,66,69,100,101,107,108,109,110,112,113,148,149,152,153,155,156,157,175,176,177,181,185,186,187,188,190,],[-12,-11,-10,-15,102,102,-14,-51,-50,-52,-125,-49,-57,-48,-13,102,102,-61,-56,-63,-36,-125,-55,102,-35,-62,102,-53,-54,-9,-60,]),'MINUSMINUS':([74,76,146,171,],[-112,131,-114,-113,]),'THEN_KW':([68,70,71,72,],[117,120,123,126,]),'LOGICAL_OR':([40,42,43,44,45,47,48,49,51,52,53,54,57,65,67,73,74,76,94,115,118,121,124,127,140,141,142,143,144,145,146,159,160,161,162,163,164,165,166,169,171,174,],[-122,-116,-110,72,-106,-123,-112,-90,-124,-80,-111,-88,-104,72,-81,72,-112,-111,-105,-82,-85,-74,-77,-115,-89,-103,-99,-102,-100,-101,-114,-84,-83,-87,-86,-76,-75,-79,-78,-117,-113,72,]),'LOGICAL_AND':([40,42,43,44,45,47,48,49,51,52,53,54,57,65,67,73,74,76,94,115,118,121,124,127,140,141,142,143,144,145,146,159,160,161,162,163,164,165,166,169,171,174,],[-122,-116,-110,71,-106,-123,-112,-90,-124,-80,-111,-88,-104,71,-81,71,-112,-111,-105,-82,71,-74,71,-115,-89,-103,-99,-102,-100,-101,-114,-84,71,-87,71,-76,71,-79,71,-117,-113,71,]),'CHAR_KW':([0,6,10,12,13,16,17,21,23,24,26,28,29,30,31,60,69,100,101,104,107,108,109,110,112,113,114,152,153,155,156,157,177,180,181,183,184,186,188,190,],[8,-7,-5,8,-6,-12,-11,-4,-8,8,8,8,8,-10,-15,8,-14,-51,-50,-26,-52,-125,-49,-57,-48,-13,-27,-61,-56,-63,-36,8,-35,8,-62,-24,-25,-53,-9,-60,]),'LESS_THAN':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,84,-124,-111,-104,-112,-111,-105,-115,-103,-99,-102,-100,-101,-114,-117,-113,]),'OPENING_PARENTHESES':([15,16,17,18,19,20,25,27,30,31,37,39,41,46,48,50,55,56,64,66,68,69,70,71,72,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,100,101,105,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,181,185,186,187,188,190,],[24,-12,-11,26,28,29,37,46,-10,-15,46,-109,46,46,77,-107,46,-108,46,46,46,-14,46,46,46,77,46,-91,-97,-94,46,-93,46,-96,46,46,-95,46,46,-98,-92,46,-51,-50,154,-52,-125,-49,-57,46,-48,-13,46,46,46,46,46,46,46,46,46,-69,-70,-71,-72,-73,46,46,-61,-56,46,-63,-36,-125,46,-55,46,-35,-62,46,-53,-54,-9,-60,]),'CLOSING_BRACKET':([40,42,43,44,45,47,48,49,51,52,53,54,57,67,73,74,76,94,98,115,118,121,124,127,130,131,140,141,142,143,144,145,146,147,159,160,161,162,163,164,165,166,167,168,169,171,],[-122,-116,-110,69,-106,-123,-112,-90,-124,-80,-111,-88,-104,-81,-67,-112,-111,-105,150,-82,-85,-74,-77,-115,-65,-66,-89,-103,-99,-102,-100,-101,-114,171,-84,-83,-87,-86,-76,-75,-79,-78,-68,-64,-117,-113,]),'FALSE_KW':([16,17,27,30,31,37,39,41,46,50,55,56,64,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,181,185,186,187,188,190,],[-12,-11,51,-10,-15,51,-109,51,51,-107,51,-108,51,51,51,-14,51,51,51,51,-91,-97,-94,51,-93,51,-96,51,51,-95,51,51,-98,-92,51,-51,-50,-52,-125,-49,-57,51,-48,-13,51,51,51,51,51,51,51,51,51,-69,-70,-71,-72,-73,51,51,-61,-56,51,-63,-36,-125,51,-55,51,-35,-62,51,-53,-54,-9,-60,]),'STATIC_KW':([16,17,30,31,69,108,113,156,157,177,188,],[-12,-11,-10,-15,-14,-125,-13,-36,180,-35,-9,]),'MINUS':([16,17,27,30,31,37,39,40,41,42,43,45,46,47,48,49,50,51,53,55,56,57,64,66,68,69,70,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,127,128,129,132,133,134,135,140,141,142,143,144,145,146,148,149,152,153,154,155,156,157,169,170,171,175,176,177,181,185,186,187,188,190,],[-12,-11,50,-10,-15,50,-109,-122,50,-116,-110,-106,50,-123,-112,88,-107,-124,-111,50,-108,-104,50,50,50,-14,50,50,50,-112,-111,50,-91,-97,-94,50,-93,50,-96,50,50,-95,50,50,-98,-92,50,-105,-51,-50,-52,-125,-49,-57,50,-48,-13,50,50,50,50,50,50,50,50,-115,50,-69,-70,-71,-72,-73,88,-103,-99,-102,-100,-101,-114,50,50,-61,-56,50,-63,-36,-125,-117,50,-113,-55,50,-35,-62,50,-53,-54,-9,-60,]),'PLUSPLUS':([74,76,146,171,],[-112,130,-114,-113,]),'COMMA':([14,16,17,18,30,31,40,42,43,45,47,48,49,51,52,53,54,57,61,62,63,67,69,73,74,76,94,113,115,118,121,124,127,130,131,136,139,140,141,142,143,144,145,146,150,151,159,160,161,162,163,164,165,166,167,168,169,171,182,188,],[22,-12,-11,-15,-10,-15,-122,-116,-110,-106,-123,-112,-90,-124,-80,-111,-88,-104,-34,-37,99,-81,-14,-67,-112,-111,-105,-13,-82,-85,-74,-77,-115,-65,-66,-121,170,-89,-103,-99,-102,-100,-101,-114,-38,-33,-84,-83,-87,-86,-76,-75,-79,-78,-68,-64,-117,-113,-120,22,]),'FuncName':([2,3,4,5,7,8,9,11,],[15,-23,-19,-20,19,-21,-18,-22,]),'CONST_KW':([16,17,27,30,31,37,39,41,46,50,55,56,64,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,181,185,186,187,188,190,],[-12,-11,40,-10,-15,40,-109,40,40,-107,40,-108,40,40,40,-14,40,40,40,40,-91,-97,-94,40,-93,40,-96,40,40,-95,40,40,-98,-92,40,-51,-50,-52,-125,-49,-57,40,-48,-13,40,40,40,40,40,40,40,40,40,-69,-70,-71,-72,-73,40,40,-61,-56,40,-63,-36,-125,40,-55,40,-35,-62,40,-53,-54,-9,-60,]),'TILDA':([16,17,27,30,31,37,41,46,64,66,68,69,70,71,72,77,93,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,181,185,186,187,188,190,],[-12,-11,41,-10,-15,41,41,41,41,41,41,-14,41,41,41,41,41,-51,-50,-52,-125,-49,-57,41,-48,-13,41,41,41,41,41,41,41,41,41,-69,-70,-71,-72,-73,41,41,-61,-56,41,-63,-36,-125,41,-55,41,-35,-62,41,-53,-54,-9,-60,]),'INTEGER_KW':([0,6,10,12,13,16,17,21,23,24,26,28,29,30,31,60,69,100,101,104,107,108,109,110,112,113,114,152,153,155,156,157,177,180,181,183,184,186,188,190,],[5,-7,-5,5,-6,-12,-11,-4,-8,5,5,5,5,-10,-15,5,-14,-51,-50,-26,-52,-125,-49,-57,-48,-13,-27,-61,-56,-63,-36,5,-35,5,-62,-24,-25,-53,-9,-60,]),'PERCENTAGE':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,140,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,83,-124,-111,-104,-112,-111,-105,-115,83,-103,83,83,83,83,-114,-117,-113,]),'TILL_KW':([16,17,30,31,64,66,69,100,101,107,108,109,110,112,113,148,149,152,153,155,156,157,175,176,177,181,185,186,187,188,190,],[-12,-11,-10,-15,105,105,-14,-51,-50,-52,-125,-49,-57,-48,-13,105,105,-61,-56,-63,-36,-125,-55,105,-35,-62,105,-53,-54,-9,-60,]),'NUMBER':([128,129,132,133,134,135,],[167,-69,-70,-71,-72,-73,]),'CONTINUE_KW':([16,17,30,31,64,66,69,100,101,107,108,109,110,112,113,148,149,152,153,155,156,157,175,176,177,181,185,186,187,188,190,],[-12,-11,-10,-15,106,106,-14,-51,-50,-52,-125,-49,-57,-48,-13,106,106,-61,-56,-63,-36,-125,-55,106,-35,-62,106,-53,-54,-9,-60,]),'CLOSING_PARENTHESES':([24,26,28,29,32,33,35,36,38,40,42,43,45,47,48,49,51,52,53,54,57,58,59,61,62,63,65,67,73,74,75,76,77,94,97,115,118,121,124,127,130,131,136,137,138,139,140,141,142,143,144,145,146,150,151,159,160,161,162,163,164,165,166,167,168,169,171,174,182,],[-125,-125,-125,-125,-29,-28,64,-31,66,-122,-116,-110,-106,-123,-112,-90,-124,-80,-111,-88,-104,95,96,-34,-37,-32,113,-81,-67,-112,127,-111,-125,-105,-30,-82,-85,-74,-77,-115,-65,-66,-121,-119,169,-118,-89,-103,-99,-102,-100,-101,-114,-38,-33,-84,-83,-87,-86,-76,-75,-79,-78,-68,-64,-117,-113,185,-120,]),'OPENING_BRACKET':([18,31,48,53,62,74,76,146,171,],[27,27,-112,93,98,-112,93,-114,-113,]),'TIMESEQUAL':([74,76,146,171,],[-112,134,-114,-113,]),'VarName':([2,3,4,5,7,8,9,11,16,17,22,27,30,31,34,37,39,41,46,50,55,56,64,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,128,129,132,133,134,135,148,149,152,153,154,155,156,157,170,175,176,177,178,179,181,185,186,187,188,189,190,],[18,-23,-19,-20,20,-21,-18,-22,-12,-11,31,48,-10,-15,62,48,-109,48,74,-107,48,-108,74,74,48,-14,48,48,48,74,-91,-97,-94,48,-93,48,-96,48,48,-95,48,48,-98,-92,146,74,62,-51,-50,-52,-125,-49,-57,74,-48,-13,48,48,48,48,48,48,48,48,74,-69,-70,-71,-72,-73,74,74,-61,-56,48,-63,-36,-125,74,-55,74,-35,-17,31,-62,74,-53,-54,-9,-16,-60,]),'DOT':([48,53,74,76,146,171,],[-112,92,-112,92,-114,-113,]),'GREATER_THAN':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,79,-124,-111,-104,-112,-111,-105,-115,-103,-99,-102,-100,-101,-114,-117,-113,]),'CHARACTER_KW':([0,6,10,12,13,16,17,21,23,24,26,28,29,30,31,60,69,100,101,104,107,108,109,110,112,113,114,152,153,155,156,157,177,180,181,183,184,186,188,190,],[4,-7,-5,4,-6,-12,-11,-4,-8,4,4,4,4,-10,-15,4,-14,-51,-50,-26,-52,-125,-49,-57,-48,-13,-27,-61,-56,-63,-36,4,-35,4,-62,-24,-25,-53,-9,-60,]),'DIVIDEEQUAL':([74,76,146,171,],[-112,135,-114,-113,]),'CLOSING_BRACE':([16,17,30,31,69,100,101,107,108,109,110,112,113,152,153,155,156,157,172,173,175,176,177,181,186,187,188,190,],[-12,-11,-10,-15,-14,-51,-50,-52,-125,-49,-57,-48,-13,-61,-56,-63,-36,-125,183,184,-55,186,-35,-62,-53,-54,-9,-60,]),'EQUAL':([74,76,146,171,],[-112,129,-114,-113,]),'MINUSEQUAL':([74,76,146,171,],[-112,133,-114,-113,]),'VOID_KW':([0,6,10,12,13,21,23,100,101,104,107,109,110,112,114,152,153,155,181,183,184,186,190,],[7,-7,-5,7,-6,-4,-8,-51,-50,-26,-52,-49,-57,-48,-27,-61,-56,-63,-62,-24,-25,-53,-60,]),'OPENING_BRACE':([16,17,30,31,64,66,69,95,96,100,101,107,108,109,110,112,113,148,149,152,153,155,156,157,175,176,177,181,185,186,187,188,190,],[-12,-11,-10,-15,108,108,-14,148,149,-51,-50,-52,-125,-49,-57,-48,-13,108,108,-61,-56,-63,-36,-125,-55,108,-35,-62,108,-53,-54,-9,-60,]),'GREATEREQUAL':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,80,-124,-111,-104,-112,-111,-105,-115,-103,-99,-102,-100,-101,-114,-117,-113,]),'LESSEQUAL':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,82,-124,-111,-104,-112,-111,-105,-115,-103,-99,-102,-100,-101,-114,-117,-113,]),'PLUSEQUAL':([74,76,146,171,],[-112,132,-114,-113,]),'AND':([40,42,43,44,45,47,48,49,51,52,53,54,57,65,67,73,74,76,94,115,118,121,124,127,140,141,142,143,144,145,146,159,160,161,162,163,164,165,166,169,171,174,],[-122,-116,-110,68,-106,-123,-112,-90,-124,-80,-111,-88,-104,68,-81,68,-112,-111,-105,-82,68,-74,68,-115,-89,-103,-99,-102,-100,-101,-114,-84,68,-87,68,-76,68,-79,68,-117,-113,68,]),'SEMICOLON':([14,16,17,18,30,31,33,36,40,42,43,45,47,48,49,51,52,53,54,57,61,62,63,64,66,67,69,73,74,76,94,97,100,101,102,103,106,107,108,109,110,112,113,115,118,121,124,127,130,131,140,141,142,143,144,145,146,148,149,150,151,152,153,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,175,176,177,181,185,186,187,188,190,],[23,-12,-11,-15,-10,-15,60,-31,-122,-116,-110,-106,-123,-112,-90,-124,-80,-111,-88,-104,-34,-37,-32,110,110,-81,-14,-67,-112,-111,-105,-30,-51,-50,152,153,155,-52,-125,-49,-57,-48,-13,-82,-85,-74,-77,-115,-65,-66,-89,-103,-99,-102,-100,-101,-114,110,110,-38,-33,-61,-56,-63,-36,-125,181,-84,-83,-87,-86,-76,-75,-79,-78,-68,-64,-117,-113,-55,110,-35,-62,110,-53,-54,-9,-60,]),'BOOL_KW':([0,6,10,12,13,16,17,21,23,24,26,28,29,30,31,60,69,100,101,104,107,108,109,110,112,113,114,152,153,155,156,157,177,180,181,183,184,186,188,190,],[11,-7,-5,11,-6,-12,-11,-4,-8,11,11,11,11,-10,-15,11,-14,-51,-50,-26,-52,-125,-49,-57,-48,-13,-27,-61,-56,-63,-36,11,-35,11,-62,-24,-25,-53,-9,-60,]),'GIVEBACK_KW':([16,17,30,31,64,66,69,100,101,107,108,109,110,112,113,148,149,152,153,155,156,157,175,176,177,181,185,186,187,188,190,],[-12,-11,-10,-15,111,111,-14,-51,-50,-52,-125,-49,-57,-48,-13,111,111,-61,-56,-63,-36,-125,-55,111,-35,-62,111,-53,-54,-9,-60,]),'DIVIDE':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,140,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,86,-124,-111,-104,-112,-111,-105,-115,86,-103,86,-102,86,-101,-114,-117,-113,]),'EQUALEQUAL':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,87,-124,-111,-104,-112,-111,-105,-115,-103,-99,-102,-100,-101,-114,-117,-113,]),'TIMES':([16,17,27,30,31,37,39,40,41,42,43,45,46,47,48,49,50,51,53,55,56,57,64,66,68,69,70,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,100,101,107,108,109,110,111,112,113,116,117,119,120,122,123,125,126,127,128,129,132,133,134,135,140,141,142,143,144,145,146,148,149,152,153,154,155,156,157,169,170,171,175,176,177,181,185,186,187,188,190,],[-12,-11,56,-10,-15,56,-109,-122,56,-116,-110,-106,56,-123,-112,89,-107,-124,-111,56,-108,-104,56,56,56,-14,56,56,56,-112,-111,56,-91,-97,-94,56,-93,56,-96,56,56,-95,56,56,-98,-92,56,-105,-51,-50,-52,-125,-49,-57,56,-48,-13,56,56,56,56,56,56,56,56,-115,56,-69,-70,-71,-72,-73,89,-103,89,-102,89,-101,-114,56,56,-61,-56,56,-63,-36,-125,-117,56,-113,-55,56,-35,-62,56,-53,-54,-9,-60,]),'PLUS':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,140,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,85,-124,-111,-104,-112,-111,-105,-115,85,-103,-99,-102,-100,-101,-114,-117,-113,]),'$end':([1,6,10,12,13,21,23,100,101,104,107,109,110,112,114,152,153,155,181,183,184,186,190,],[0,-7,-5,-1,-6,-4,-8,-51,-50,-26,-52,-49,-57,-48,-27,-61,-56,-63,-62,-24,-25,-53,-60,]),'NOTEQUAL':([40,42,43,45,47,48,49,51,53,57,74,76,94,127,141,142,143,144,145,146,169,171,],[-122,-116,-110,-106,-123,-112,90,-124,-111,-104,-112,-111,-105,-115,-103,-99,-102,-100,-101,-114,-117,-113,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'equal':([49,],[78,]),'iterationPhrase':([64,66,148,149,176,185,],[101,101,101,101,101,101,]),'ScopedVariableDec':([157,],[177,]),'returnPhrase':([64,66,148,149,176,185,],[100,100,100,100,100,100,]),'constant':([27,37,41,46,55,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'compareType':([49,],[81,]),'inalterable':([27,37,41,46,55,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'eachExpression':([27,37,41,46,64,66,68,70,71,72,77,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[44,65,67,73,73,73,115,118,121,124,73,73,73,159,160,161,162,163,164,165,166,73,73,73,174,73,73,73,]),'statement':([64,66,148,149,176,185,],[104,114,172,173,187,190,]),'allExpression':([46,64,66,77,93,111,128,148,149,170,176,185,],[75,103,103,136,147,158,168,103,103,182,103,103,]),'factor':([27,37,41,46,55,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'type':([0,12,24,26,28,29,60,157,180,],[2,2,34,34,34,34,34,178,189,]),'statementList':([157,],[176,]),'varInitialization':([2,22,179,],[17,30,17,]),'paramTypeList':([24,26,28,29,60,],[36,36,36,36,97,]),'scopedSpecifier':([157,],[179,]),'mathEXP':([27,37,41,46,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[49,49,49,49,49,49,49,49,49,49,49,140,141,142,143,144,145,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'function':([0,12,],[13,13,]),'declaration':([0,12,],[10,21,]),'localDeclarations':([108,],[157,]),'variableList':([2,179,],[14,188,]),'continue':([64,66,148,149,176,185,],[107,107,107,107,107,107,]),'empty':([24,26,28,29,77,108,157,],[32,32,32,32,137,156,175,]),'varDeclaration':([0,12,],[6,6,]),'varForm':([2,22,179,],[16,16,16,]),'listOfParameters':([24,26,28,29,],[33,33,33,33,]),'unaryEachExpression':([27,37,41,46,64,66,68,70,71,72,77,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'compoundPhrase':([64,66,148,149,176,185,],[109,109,109,109,109,109,]),'arguments':([77,],[139,]),'args':([77,],[138,]),'relExpression':([27,37,41,46,64,66,68,70,71,72,77,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unaryop':([27,37,41,46,55,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'alterable':([27,37,41,46,55,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[53,53,53,76,53,76,76,53,53,53,53,76,53,53,53,53,53,53,76,76,53,53,53,53,53,53,53,53,76,76,76,53,76,76,76,]),'mathOp':([76,],[128,]),'nonEqual':([49,],[91,]),'paramId':([34,99,],[61,151,]),'phrase':([64,66,148,149,176,185,],[112,112,112,112,112,112,]),'list':([0,],[12,]),'parameter':([24,26,28,29,],[35,38,58,59,]),'paramList':([34,],[63,]),'unaryExpression':([27,37,41,46,55,64,66,68,70,71,72,77,81,83,85,86,88,89,93,111,116,117,119,120,122,123,125,126,128,148,149,154,170,176,185,],[57,57,57,57,94,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','yacc.py',28),
  ('numOrletter -> NUMBER','numOrletter',1,'p_numOrletter_0','yacc.py',31),
  ('numOrletter -> VarName','numOrletter',1,'p_numOrletter_1','yacc.py',34),
  ('list -> list declaration','list',2,'p_list_0','yacc.py',37),
  ('list -> declaration','list',1,'p_list_1','yacc.py',41),
  ('declaration -> function','declaration',1,'p_declaration_0','yacc.py',44),
  ('declaration -> varDeclaration','declaration',1,'p_declaration_1','yacc.py',48),
  ('varDeclaration -> type variableList SEMICOLON','varDeclaration',3,'p_varDeclaration','yacc.py',51),
  ('ScopedVariableDec -> scopedSpecifier variableList','ScopedVariableDec',2,'p_ScopedVariableDec','yacc.py',54),
  ('variableList -> variableList COMMA varInitialization','variableList',3,'p_variableList_0','yacc.py',57),
  ('variableList -> varInitialization','variableList',1,'p_variableList_1','yacc.py',60),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization_0','yacc.py',63),
  ('varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES','varInitialization',5,'p_varInitialization_1','yacc.py',66),
  ('varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET','varForm',4,'p_varForm_0','yacc.py',69),
  ('varForm -> VarName','varForm',1,'p_varForm_1','yacc.py',72),
  ('scopedSpecifier -> STATIC_KW type','scopedSpecifier',2,'p_scopedSpecifier_0','yacc.py',75),
  ('scopedSpecifier -> type','scopedSpecifier',1,'p_scopedSpecifier_1','yacc.py',78),
  ('type -> BOOLEAN_KW','type',1,'p_type_0','yacc.py',81),
  ('type -> CHARACTER_KW','type',1,'p_type_1','yacc.py',84),
  ('type -> INTEGER_KW','type',1,'p_type_2','yacc.py',87),
  ('type -> CHAR_KW','type',1,'p_type_3','yacc.py',90),
  ('type -> BOOL_KW','type',1,'p_type_4','yacc.py',93),
  ('type -> INT_KW','type',1,'p_type_5','yacc.py',96),
  ('function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE','function',8,'p_function_0','yacc.py',99),
  ('function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE','function',8,'p_function_1','yacc.py',102),
  ('function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement','function',6,'p_function_2','yacc.py',105),
  ('function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement','function',6,'p_function_3','yacc.py',108),
  ('parameter -> listOfParameters','parameter',1,'p_parameter_0','yacc.py',111),
  ('parameter -> empty','parameter',1,'p_parameter_1','yacc.py',114),
  ('listOfParameters -> listOfParameters SEMICOLON paramTypeList','listOfParameters',3,'p_listOfParameters_0','yacc.py',117),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters_1','yacc.py',121),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','yacc.py',124),
  ('paramList -> paramList COMMA paramId','paramList',3,'p_paramList_0','yacc.py',127),
  ('paramList -> paramId','paramList',1,'p_paramList_1','yacc.py',130),
  ('localDeclarations -> localDeclarations ScopedVariableDec','localDeclarations',2,'p_localDeclarations_0','yacc.py',133),
  ('localDeclarations -> empty','localDeclarations',1,'p_localDeclarations_1','yacc.py',136),
  ('paramId -> VarName','paramId',1,'p_paramId_0','yacc.py',139),
  ('paramId -> VarName OPENING_BRACKET CLOSING_BRACKET','paramId',3,'p_paramId_1','yacc.py',142),
  ('core_statement -> matched','core_statement',1,'p_core_statement_0','yacc.py',145),
  ('core_statement -> unmatched','core_statement',1,'p_core_statement_0','yacc.py',146),
  ('matched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW matched','matched',7,'p_matched','yacc.py',150),
  ('matched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW matched','matched',9,'p_matched','yacc.py',151),
  ('matched -> statement','matched',1,'p_matched','yacc.py',152),
  ('unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched','unmatched',5,'p_unmatched','yacc.py',156),
  ('unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE','unmatched',7,'p_unmatched','yacc.py',157),
  ('unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW unmatched','unmatched',7,'p_unmatched','yacc.py',158),
  ('unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW unmatched','unmatched',9,'p_unmatched','yacc.py',159),
  ('statement -> phrase','statement',1,'p_statement_0','yacc.py',163),
  ('statement -> compoundPhrase','statement',1,'p_statement_1','yacc.py',166),
  ('statement -> iterationPhrase','statement',1,'p_statement_3','yacc.py',169),
  ('statement -> returnPhrase','statement',1,'p_statement_4','yacc.py',172),
  ('statement -> continue','statement',1,'p_statement_5','yacc.py',175),
  ('compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE','compoundPhrase',4,'p_compoundPhrase','yacc.py',178),
  ('statementList -> statementList statement','statementList',2,'p_statementList_0','yacc.py',181),
  ('statementList -> empty','statementList',1,'p_statementList_1','yacc.py',184),
  ('phrase -> allExpression SEMICOLON','phrase',2,'p_phrase_0','yacc.py',187),
  ('phrase -> SEMICOLON','phrase',1,'p_phrase_1','yacc.py',190),
  ('ifBody -> matched','ifBody',1,'p_ifBody_0','yacc.py',193),
  ('ifBody -> matched OTHER_KW matched','ifBody',3,'p_ifBody_1','yacc.py',196),
  ('iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement','iterationPhrase',5,'p_iterationPhrase','yacc.py',199),
  ('returnPhrase -> COMEBACK_KW SEMICOLON','returnPhrase',2,'p_returnPhrase_0','yacc.py',202),
  ('returnPhrase -> GIVEBACK_KW allExpression SEMICOLON','returnPhrase',3,'p_returnPhrase_1','yacc.py',205),
  ('continue -> CONTINUE_KW SEMICOLON','continue',2,'p_continue','yacc.py',208),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression_0','yacc.py',211),
  ('allExpression -> alterable PLUSPLUS','allExpression',2,'p_allExpression_1','yacc.py',214),
  ('allExpression -> alterable MINUSMINUS','allExpression',2,'p_allExpression_2','yacc.py',217),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression_3','yacc.py',220),
  ('allExpression -> alterable mathOp NUMBER','allExpression',3,'p_allExpression_4','yacc.py',223),
  ('mathOp -> EQUAL','mathOp',1,'p_mathOp_0','yacc.py',226),
  ('mathOp -> PLUSEQUAL','mathOp',1,'p_mathOp_1','yacc.py',229),
  ('mathOp -> MINUSEQUAL','mathOp',1,'p_mathOp_2','yacc.py',232),
  ('mathOp -> TIMESEQUAL','mathOp',1,'p_mathOp_3','yacc.py',235),
  ('mathOp -> DIVIDEEQUAL','mathOp',1,'p_mathOp_4','yacc.py',238),
  ('eachExpression -> eachExpression LOGICAL_AND eachExpression','eachExpression',3,'p_eachExpression_0','yacc.py',241),
  ('eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression','eachExpression',4,'p_eachExpression_1','yacc.py',247),
  ('eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_3','yacc.py',253),
  ('eachExpression -> eachExpression LOGICAL_OR eachExpression','eachExpression',3,'p_eachExpression_4','yacc.py',259),
  ('eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression','eachExpression',4,'p_eachExpression_5','yacc.py',265),
  ('eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_7','yacc.py',271),
  ('eachExpression -> unaryEachExpression','eachExpression',1,'p_eachExpression_100','yacc.py',280),
  ('unaryEachExpression -> TILDA eachExpression','unaryEachExpression',2,'p_eachExpression_101','yacc.py',283),
  ('eachExpression -> eachExpression AND eachExpression','eachExpression',3,'p_eachExpression_12','yacc.py',295),
  ('eachExpression -> eachExpression AND THEN_KW eachExpression','eachExpression',4,'p_eachExpression_13','yacc.py',298),
  ('eachExpression -> eachExpression AND ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_15','yacc.py',301),
  ('eachExpression -> eachExpression OR eachExpression','eachExpression',3,'p_eachExpression_16','yacc.py',304),
  ('eachExpression -> eachExpression OR THEN_KW eachExpression','eachExpression',4,'p_eachExpression_17','yacc.py',307),
  ('eachExpression -> eachExpression OR ELSE_KW eachExpression','eachExpression',4,'p_eachExpression_19','yacc.py',310),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression_20','yacc.py',313),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression_0','yacc.py',316),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression_1','yacc.py',319),
  ('compareType -> equal','compareType',1,'p_compareType_0','yacc.py',322),
  ('compareType -> nonEqual','compareType',1,'p_compareType_1','yacc.py',325),
  ('equal -> LESSEQUAL','equal',1,'p_equal_0','yacc.py',328),
  ('equal -> GREATEREQUAL','equal',1,'p_equal_1','yacc.py',331),
  ('equal -> EQUALEQUAL','equal',1,'p_equal_2','yacc.py',334),
  ('nonEqual -> LESS_THAN','nonEqual',1,'p_nonEqual_0','yacc.py',337),
  ('nonEqual -> GREATER_THAN','nonEqual',1,'p_nonEqual_1','yacc.py',340),
  ('nonEqual -> NOTEQUAL','nonEqual',1,'p_nonEqual_2','yacc.py',343),
  ('mathEXP -> mathEXP PLUS mathEXP','mathEXP',3,'p_mathEXP_0','yacc.py',346),
  ('mathEXP -> mathEXP MINUS mathEXP','mathEXP',3,'p_mathEXP_1','yacc.py',352),
  ('mathEXP -> mathEXP TIMES mathEXP','mathEXP',3,'p_mathEXP_2','yacc.py',358),
  ('mathEXP -> mathEXP DIVIDE mathEXP','mathEXP',3,'p_mathEXP_3','yacc.py',364),
  ('mathEXP -> mathEXP PERCENTAGE mathEXP','mathEXP',3,'p_mathEXP_4','yacc.py',370),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP_5','yacc.py',376),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression_0','yacc.py',380),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression_1','yacc.py',384),
  ('unaryop -> MINUS','unaryop',1,'p_unaryop_0','yacc.py',388),
  ('unaryop -> TIMES','unaryop',1,'p_unaryop_1','yacc.py',391),
  ('unaryop -> QUESTION_MARK','unaryop',1,'p_unaryop_2','yacc.py',394),
  ('factor -> inalterable','factor',1,'p_factor_0','yacc.py',397),
  ('factor -> alterable','factor',1,'p_factor_1','yacc.py',400),
  ('alterable -> VarName','alterable',1,'p_alterable_0','yacc.py',404),
  ('alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET','alterable',4,'p_alterable_1','yacc.py',408),
  ('alterable -> alterable DOT VarName','alterable',3,'p_alterable_2','yacc.py',411),
  ('inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES','inalterable',3,'p_inalterable_0','yacc.py',414),
  ('inalterable -> constant','inalterable',1,'p_inalterable_1','yacc.py',417),
  ('inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES','inalterable',4,'p_inalterable_2','yacc.py',420),
  ('args -> arguments','args',1,'p_args_0','yacc.py',423),
  ('args -> empty','args',1,'p_args_1','yacc.py',426),
  ('arguments -> arguments COMMA allExpression','arguments',3,'p_arguments_0','yacc.py',429),
  ('arguments -> allExpression','arguments',1,'p_arguments_1','yacc.py',432),
  ('constant -> CONST_KW','constant',1,'p_constant_0','yacc.py',435),
  ('constant -> TRUE_KW','constant',1,'p_constant_1','yacc.py',438),
  ('constant -> FALSE_KW','constant',1,'p_constant_2','yacc.py',441),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',445),
]
