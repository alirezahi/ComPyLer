Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrletter -> NUMBER
Rule 3     numOrletter -> VarName
Rule 4     list -> list declaration
Rule 5     list -> declaration
Rule 6     declaration -> function
Rule 7     declaration -> varDeclaration
Rule 8     varDeclaration -> type variableList SEMICOLON
Rule 9     ScopedVariableDec -> scopedSpecifier variableList
Rule 10    variableList -> variableList COMMA varInitialization
Rule 11    variableList -> varInitialization
Rule 12    varInitialization -> varForm
Rule 13    varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 14    varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
Rule 15    varForm -> VarName
Rule 16    scopedSpecifier -> STATIC_KW type
Rule 17    scopedSpecifier -> type
Rule 18    type -> BOOLEAN_KW
Rule 19    type -> CHARACTER_KW
Rule 20    type -> INTEGER_KW
Rule 21    type -> CHAR_KW
Rule 22    type -> BOOL_KW
Rule 23    type -> INT_KW
Rule 24    function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 25    function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 26    function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 27    function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> empty
Rule 30    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList COMMA paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> localDeclarations ScopedVariableDec
Rule 36    localDeclarations -> empty
Rule 37    paramId -> VarName
Rule 38    paramId -> VarName OPENING_BRACKET CLOSING_BRACKET
Rule 39    core_statement -> matched
Rule 40    core_statement -> unmatched
Rule 41    matched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW matched
Rule 42    matched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW matched
Rule 43    matched -> statement
Rule 44    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched
Rule 45    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE
Rule 46    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW unmatched
Rule 47    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW unmatched
Rule 48    statement -> phrase
Rule 49    statement -> compoundPhrase
Rule 50    statement -> iterationPhrase
Rule 51    statement -> returnPhrase
Rule 52    statement -> continue
Rule 53    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 54    statementList -> statementList statement
Rule 55    statementList -> empty
Rule 56    phrase -> allExpression SEMICOLON
Rule 57    phrase -> SEMICOLON
Rule 58    ifBody -> matched
Rule 59    ifBody -> matched OTHER_KW matched
Rule 60    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 61    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 62    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 63    continue -> CONTINUE_KW SEMICOLON
Rule 64    allExpression -> alterable mathOp allExpression
Rule 65    allExpression -> alterable PLUSPLUS
Rule 66    allExpression -> alterable MINUSMINUS
Rule 67    allExpression -> eachExpression
Rule 68    allExpression -> alterable mathOp NUMBER
Rule 69    mathOp -> EQUAL
Rule 70    mathOp -> PLUSEQUAL
Rule 71    mathOp -> MINUSEQUAL
Rule 72    mathOp -> TIMESEQUAL
Rule 73    mathOp -> DIVIDEEQUAL
Rule 74    eachExpression -> eachExpression LOGICAL_AND eachExpression
Rule 75    eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression
Rule 76    eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression
Rule 77    eachExpression -> eachExpression LOGICAL_OR eachExpression
Rule 78    eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression
Rule 79    eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression
Rule 80    eachExpression -> unaryEachExpression
Rule 81    unaryEachExpression -> TILDA eachExpression
Rule 82    eachExpression -> eachExpression AND eachExpression
Rule 83    eachExpression -> eachExpression AND THEN_KW eachExpression
Rule 84    eachExpression -> eachExpression AND ELSE_KW eachExpression
Rule 85    eachExpression -> eachExpression OR eachExpression
Rule 86    eachExpression -> eachExpression OR THEN_KW eachExpression
Rule 87    eachExpression -> eachExpression OR ELSE_KW eachExpression
Rule 88    eachExpression -> relExpression
Rule 89    relExpression -> mathEXP compareType mathEXP
Rule 90    relExpression -> mathEXP
Rule 91    compareType -> equal
Rule 92    compareType -> nonEqual
Rule 93    equal -> LESSEQUAL
Rule 94    equal -> GREATEREQUAL
Rule 95    equal -> EQUALEQUAL
Rule 96    nonEqual -> LESS_THAN
Rule 97    nonEqual -> GREATER_THAN
Rule 98    nonEqual -> NOTEQUAL
Rule 99    mathEXP -> mathEXP PLUS mathEXP
Rule 100   mathEXP -> mathEXP MINUS mathEXP
Rule 101   mathEXP -> mathEXP TIMES mathEXP
Rule 102   mathEXP -> mathEXP DIVIDE mathEXP
Rule 103   mathEXP -> mathEXP PERCENTAGE mathEXP
Rule 104   mathEXP -> unaryExpression
Rule 105   unaryExpression -> unaryop unaryExpression
Rule 106   unaryExpression -> factor
Rule 107   unaryop -> MINUS
Rule 108   unaryop -> TIMES
Rule 109   unaryop -> QUESTION_MARK
Rule 110   factor -> inalterable
Rule 111   factor -> alterable
Rule 112   alterable -> VarName
Rule 113   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 114   alterable -> alterable DOT VarName
Rule 115   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 116   inalterable -> constant
Rule 117   inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 118   args -> arguments
Rule 119   args -> empty
Rule 120   arguments -> arguments COMMA allExpression
Rule 121   arguments -> allExpression
Rule 122   constant -> CONST_KW
Rule 123   constant -> TRUE_KW
Rule 124   constant -> FALSE_KW
Rule 125   empty -> <empty>

Terminals, with rules where they appear

AND                  : 82 83 84
BOOLEAN_KW           : 18
BOOL_KW              : 22
CHARACTER_KW         : 19
CHAR_KW              : 21
CLOSING_BRACE        : 24 25 42 45 47 53
CLOSING_BRACKET      : 14 38 113
CLOSING_PARENTHESES  : 13 24 25 26 27 41 42 44 45 46 47 60 115 117
COMEBACK_KW          : 61
COMMA                : 10 33 120
COMMENT              : 
CONST_KW             : 122
CONTINUE_KW          : 63
DIVIDE               : 102
DIVIDEEQUAL          : 73
DOT                  : 114
DOUBLE_DOT           : 13
ELSE_KW              : 76 79 84 87
EQUAL                : 69
EQUALEQUAL           : 95
FALSE_KW             : 124
FuncName             : 24 26
GIVEBACK_KW          : 62
GREATEREQUAL         : 94
GREATER_THAN         : 97
IF_KW                : 41 42 44 45 46 47
INTEGER_KW           : 20
INT_KW               : 23
LESSEQUAL            : 93
LESS_THAN            : 96
LOGICAL_AND          : 74 75 76
LOGICAL_OR           : 77 78 79
MINUS                : 100 107
MINUSEQUAL           : 71
MINUSMINUS           : 66
NOTEQUAL             : 98
NUMBER               : 2 68
OPENING_BRACE        : 24 25 42 45 47 53
OPENING_BRACKET      : 14 38 113
OPENING_PARENTHESES  : 13 24 25 26 27 41 42 44 45 46 47 60 115 117
OR                   : 85 86 87
OTHER_KW             : 41 42 46 47 59
PERCENTAGE           : 103
PLUS                 : 99
PLUSEQUAL            : 70
PLUSPLUS             : 65
QUESTION_MARK        : 109
SEMICOLON            : 8 30 56 57 61 62 63
STATIC_KW            : 16
THEN_KW              : 75 78 83 86
TILDA                : 81
TILL_KW              : 60
TIMES                : 101 108
TIMESEQUAL           : 72
TRUE_KW              : 123
VOID_KW              : 24 25
VarName              : 3 14 15 25 27 37 38 112 114 117
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 35
allExpression        : 56 62 64 113 115 120 121
alterable            : 64 65 66 68 111 113 114
args                 : 117
arguments            : 118 120
compareType          : 89
compoundPhrase       : 49
constant             : 116
continue             : 52
core_statement       : 
declaration          : 4 5
eachExpression       : 13 14 41 42 44 45 46 47 60 67 74 74 75 75 76 76 77 77 78 78 79 79 81 82 82 83 83 84 84 85 85 86 86 87 87
empty                : 29 36 55 119
equal                : 91
factor               : 106
function             : 6
ifBody               : 
inalterable          : 110
iterationPhrase      : 50
list                 : 1 4
listOfParameters     : 28 30
localDeclarations    : 35 53
matched              : 39 41 41 42 42 44 45 46 47 58 59 59
mathEXP              : 89 89 90 99 99 100 100 101 101 102 102 103 103
mathOp               : 64 68
nonEqual             : 92
numOrletter          : 
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 24 25 26 27
phrase               : 48
program              : 0
relExpression        : 88
returnPhrase         : 51
scopedSpecifier      : 9
statement            : 24 25 26 27 43 54 60
statementList        : 53 54
type                 : 8 16 17 26 27 32
unaryEachExpression  : 80
unaryExpression      : 104 105
unaryop              : 105
unmatched            : 40 46 47
varDeclaration       : 7
varForm              : 12 13
varInitialization    : 10 11
variableList         : 8 9 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (4) list -> . list declaration
    (5) list -> . declaration
    (6) declaration -> . function
    (7) declaration -> . varDeclaration
    (24) function -> . VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (25) function -> . VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (26) function -> . type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (27) function -> . type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> . type variableList SEMICOLON
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    VOID_KW         shift and go to state 7
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    program                        shift and go to state 1
    varDeclaration                 shift and go to state 6
    type                           shift and go to state 2
    list                           shift and go to state 12
    declaration                    shift and go to state 10
    function                       shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (26) function -> type . FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (27) function -> type . VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> type . variableList SEMICOLON
    (10) variableList -> . variableList COMMA varInitialization
    (11) variableList -> . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . VarName

    FuncName        shift and go to state 15
    VarName         shift and go to state 18

    variableList                   shift and go to state 14
    varInitialization              shift and go to state 17
    varForm                        shift and go to state 16

state 3

    (23) type -> INT_KW .

    VarName         reduce using rule 23 (type -> INT_KW .)
    FuncName        reduce using rule 23 (type -> INT_KW .)


state 4

    (19) type -> CHARACTER_KW .

    VarName         reduce using rule 19 (type -> CHARACTER_KW .)
    FuncName        reduce using rule 19 (type -> CHARACTER_KW .)


state 5

    (20) type -> INTEGER_KW .

    VarName         reduce using rule 20 (type -> INTEGER_KW .)
    FuncName        reduce using rule 20 (type -> INTEGER_KW .)


state 6

    (7) declaration -> varDeclaration .

    VOID_KW         reduce using rule 7 (declaration -> varDeclaration .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> varDeclaration .)
    CHARACTER_KW    reduce using rule 7 (declaration -> varDeclaration .)
    INTEGER_KW      reduce using rule 7 (declaration -> varDeclaration .)
    CHAR_KW         reduce using rule 7 (declaration -> varDeclaration .)
    BOOL_KW         reduce using rule 7 (declaration -> varDeclaration .)
    INT_KW          reduce using rule 7 (declaration -> varDeclaration .)
    $end            reduce using rule 7 (declaration -> varDeclaration .)


state 7

    (24) function -> VOID_KW . FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (25) function -> VOID_KW . VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    FuncName        shift and go to state 19
    VarName         shift and go to state 20


state 8

    (21) type -> CHAR_KW .

    VarName         reduce using rule 21 (type -> CHAR_KW .)
    FuncName        reduce using rule 21 (type -> CHAR_KW .)


state 9

    (18) type -> BOOLEAN_KW .

    VarName         reduce using rule 18 (type -> BOOLEAN_KW .)
    FuncName        reduce using rule 18 (type -> BOOLEAN_KW .)


state 10

    (5) list -> declaration .

    VOID_KW         reduce using rule 5 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> declaration .)
    INTEGER_KW      reduce using rule 5 (list -> declaration .)
    CHAR_KW         reduce using rule 5 (list -> declaration .)
    BOOL_KW         reduce using rule 5 (list -> declaration .)
    INT_KW          reduce using rule 5 (list -> declaration .)
    $end            reduce using rule 5 (list -> declaration .)


state 11

    (22) type -> BOOL_KW .

    VarName         reduce using rule 22 (type -> BOOL_KW .)
    FuncName        reduce using rule 22 (type -> BOOL_KW .)


state 12

    (1) program -> list .
    (4) list -> list . declaration
    (6) declaration -> . function
    (7) declaration -> . varDeclaration
    (24) function -> . VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (25) function -> . VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (26) function -> . type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (27) function -> . type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> . type variableList SEMICOLON
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 7
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 2
    varDeclaration                 shift and go to state 6
    declaration                    shift and go to state 21
    function                       shift and go to state 13

state 13

    (6) declaration -> function .

    VOID_KW         reduce using rule 6 (declaration -> function .)
    BOOLEAN_KW      reduce using rule 6 (declaration -> function .)
    CHARACTER_KW    reduce using rule 6 (declaration -> function .)
    INTEGER_KW      reduce using rule 6 (declaration -> function .)
    CHAR_KW         reduce using rule 6 (declaration -> function .)
    BOOL_KW         reduce using rule 6 (declaration -> function .)
    INT_KW          reduce using rule 6 (declaration -> function .)
    $end            reduce using rule 6 (declaration -> function .)


state 14

    (8) varDeclaration -> type variableList . SEMICOLON
    (10) variableList -> variableList . COMMA varInitialization

    SEMICOLON       shift and go to state 23
    COMMA           shift and go to state 22


state 15

    (26) function -> type FuncName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 24


state 16

    (12) varInitialization -> varForm .
    (13) varInitialization -> varForm . DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    SEMICOLON       reduce using rule 12 (varInitialization -> varForm .)
    COMMA           reduce using rule 12 (varInitialization -> varForm .)
    STATIC_KW       reduce using rule 12 (varInitialization -> varForm .)
    BOOLEAN_KW      reduce using rule 12 (varInitialization -> varForm .)
    CHARACTER_KW    reduce using rule 12 (varInitialization -> varForm .)
    INTEGER_KW      reduce using rule 12 (varInitialization -> varForm .)
    CHAR_KW         reduce using rule 12 (varInitialization -> varForm .)
    BOOL_KW         reduce using rule 12 (varInitialization -> varForm .)
    INT_KW          reduce using rule 12 (varInitialization -> varForm .)
    CLOSING_BRACE   reduce using rule 12 (varInitialization -> varForm .)
    OPENING_BRACE   reduce using rule 12 (varInitialization -> varForm .)
    TILL_KW         reduce using rule 12 (varInitialization -> varForm .)
    COMEBACK_KW     reduce using rule 12 (varInitialization -> varForm .)
    GIVEBACK_KW     reduce using rule 12 (varInitialization -> varForm .)
    CONTINUE_KW     reduce using rule 12 (varInitialization -> varForm .)
    VarName         reduce using rule 12 (varInitialization -> varForm .)
    TILDA           reduce using rule 12 (varInitialization -> varForm .)
    MINUS           reduce using rule 12 (varInitialization -> varForm .)
    TIMES           reduce using rule 12 (varInitialization -> varForm .)
    QUESTION_MARK   reduce using rule 12 (varInitialization -> varForm .)
    OPENING_PARENTHESES reduce using rule 12 (varInitialization -> varForm .)
    CONST_KW        reduce using rule 12 (varInitialization -> varForm .)
    TRUE_KW         reduce using rule 12 (varInitialization -> varForm .)
    FALSE_KW        reduce using rule 12 (varInitialization -> varForm .)
    DOUBLE_DOT      shift and go to state 25


state 17

    (11) variableList -> varInitialization .

    SEMICOLON       reduce using rule 11 (variableList -> varInitialization .)
    COMMA           reduce using rule 11 (variableList -> varInitialization .)
    STATIC_KW       reduce using rule 11 (variableList -> varInitialization .)
    BOOLEAN_KW      reduce using rule 11 (variableList -> varInitialization .)
    CHARACTER_KW    reduce using rule 11 (variableList -> varInitialization .)
    INTEGER_KW      reduce using rule 11 (variableList -> varInitialization .)
    CHAR_KW         reduce using rule 11 (variableList -> varInitialization .)
    BOOL_KW         reduce using rule 11 (variableList -> varInitialization .)
    INT_KW          reduce using rule 11 (variableList -> varInitialization .)
    CLOSING_BRACE   reduce using rule 11 (variableList -> varInitialization .)
    OPENING_BRACE   reduce using rule 11 (variableList -> varInitialization .)
    TILL_KW         reduce using rule 11 (variableList -> varInitialization .)
    COMEBACK_KW     reduce using rule 11 (variableList -> varInitialization .)
    GIVEBACK_KW     reduce using rule 11 (variableList -> varInitialization .)
    CONTINUE_KW     reduce using rule 11 (variableList -> varInitialization .)
    VarName         reduce using rule 11 (variableList -> varInitialization .)
    TILDA           reduce using rule 11 (variableList -> varInitialization .)
    MINUS           reduce using rule 11 (variableList -> varInitialization .)
    TIMES           reduce using rule 11 (variableList -> varInitialization .)
    QUESTION_MARK   reduce using rule 11 (variableList -> varInitialization .)
    OPENING_PARENTHESES reduce using rule 11 (variableList -> varInitialization .)
    CONST_KW        reduce using rule 11 (variableList -> varInitialization .)
    TRUE_KW         reduce using rule 11 (variableList -> varInitialization .)
    FALSE_KW        reduce using rule 11 (variableList -> varInitialization .)


state 18

    (27) function -> type VarName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (14) varForm -> VarName . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> VarName .

    OPENING_PARENTHESES shift and go to state 26
    OPENING_BRACKET shift and go to state 27
    DOUBLE_DOT      reduce using rule 15 (varForm -> VarName .)
    SEMICOLON       reduce using rule 15 (varForm -> VarName .)
    COMMA           reduce using rule 15 (varForm -> VarName .)


state 19

    (24) function -> VOID_KW FuncName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 28


state 20

    (25) function -> VOID_KW VarName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 29


state 21

    (4) list -> list declaration .

    VOID_KW         reduce using rule 4 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 4 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 4 (list -> list declaration .)
    INTEGER_KW      reduce using rule 4 (list -> list declaration .)
    CHAR_KW         reduce using rule 4 (list -> list declaration .)
    BOOL_KW         reduce using rule 4 (list -> list declaration .)
    INT_KW          reduce using rule 4 (list -> list declaration .)
    $end            reduce using rule 4 (list -> list declaration .)


state 22

    (10) variableList -> variableList COMMA . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . VarName

    VarName         shift and go to state 31

    varInitialization              shift and go to state 30
    varForm                        shift and go to state 16

state 23

    (8) varDeclaration -> type variableList SEMICOLON .

    VOID_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    CHAR_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    BOOL_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    INT_KW          reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    $end            reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)


state 24

    (26) function -> type FuncName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (125) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 34
    empty                          shift and go to state 32
    listOfParameters               shift and go to state 33
    parameter                      shift and go to state 35
    paramTypeList                  shift and go to state 36

state 25

    (13) varInitialization -> varForm DOUBLE_DOT . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 37


state 26

    (27) function -> type VarName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (125) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 34
    empty                          shift and go to state 32
    listOfParameters               shift and go to state 33
    parameter                      shift and go to state 38
    paramTypeList                  shift and go to state 36

state 27

    (14) varForm -> VarName OPENING_BRACKET . eachExpression CLOSING_BRACKET
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 44
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 28

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (125) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 34
    empty                          shift and go to state 32
    listOfParameters               shift and go to state 33
    parameter                      shift and go to state 58
    paramTypeList                  shift and go to state 36

state 29

    (25) function -> VOID_KW VarName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (125) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 34
    empty                          shift and go to state 32
    listOfParameters               shift and go to state 33
    parameter                      shift and go to state 59
    paramTypeList                  shift and go to state 36

state 30

    (10) variableList -> variableList COMMA varInitialization .

    SEMICOLON       reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    COMMA           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    STATIC_KW       reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    BOOLEAN_KW      reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CHARACTER_KW    reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    INTEGER_KW      reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CHAR_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    BOOL_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    INT_KW          reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CLOSING_BRACE   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    OPENING_BRACE   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TILL_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    COMEBACK_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    GIVEBACK_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CONTINUE_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    VarName         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TILDA           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    MINUS           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TIMES           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    QUESTION_MARK   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    OPENING_PARENTHESES reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CONST_KW        reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TRUE_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    FALSE_KW        reduce using rule 10 (variableList -> variableList COMMA varInitialization .)


state 31

    (14) varForm -> VarName . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> VarName .

    OPENING_BRACKET shift and go to state 27
    DOUBLE_DOT      reduce using rule 15 (varForm -> VarName .)
    SEMICOLON       reduce using rule 15 (varForm -> VarName .)
    COMMA           reduce using rule 15 (varForm -> VarName .)
    STATIC_KW       reduce using rule 15 (varForm -> VarName .)
    BOOLEAN_KW      reduce using rule 15 (varForm -> VarName .)
    CHARACTER_KW    reduce using rule 15 (varForm -> VarName .)
    INTEGER_KW      reduce using rule 15 (varForm -> VarName .)
    CHAR_KW         reduce using rule 15 (varForm -> VarName .)
    BOOL_KW         reduce using rule 15 (varForm -> VarName .)
    INT_KW          reduce using rule 15 (varForm -> VarName .)
    CLOSING_BRACE   reduce using rule 15 (varForm -> VarName .)
    OPENING_BRACE   reduce using rule 15 (varForm -> VarName .)
    TILL_KW         reduce using rule 15 (varForm -> VarName .)
    COMEBACK_KW     reduce using rule 15 (varForm -> VarName .)
    GIVEBACK_KW     reduce using rule 15 (varForm -> VarName .)
    CONTINUE_KW     reduce using rule 15 (varForm -> VarName .)
    VarName         reduce using rule 15 (varForm -> VarName .)
    TILDA           reduce using rule 15 (varForm -> VarName .)
    MINUS           reduce using rule 15 (varForm -> VarName .)
    TIMES           reduce using rule 15 (varForm -> VarName .)
    QUESTION_MARK   reduce using rule 15 (varForm -> VarName .)
    OPENING_PARENTHESES reduce using rule 15 (varForm -> VarName .)
    CONST_KW        reduce using rule 15 (varForm -> VarName .)
    TRUE_KW         reduce using rule 15 (varForm -> VarName .)
    FALSE_KW        reduce using rule 15 (varForm -> VarName .)


state 32

    (29) parameter -> empty .

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> empty .)


state 33

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 60


state 34

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList COMMA paramId
    (34) paramList -> . paramId
    (37) paramId -> . VarName
    (38) paramId -> . VarName OPENING_BRACKET CLOSING_BRACKET

    VarName         shift and go to state 62

    paramList                      shift and go to state 63
    paramId                        shift and go to state 61

state 35

    (26) function -> type FuncName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 64


state 36

    (31) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 31 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 31 (listOfParameters -> paramTypeList .)


state 37

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 65
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 38

    (27) function -> type VarName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 66


state 39

    (109) unaryop -> QUESTION_MARK .

    MINUS           reduce using rule 109 (unaryop -> QUESTION_MARK .)
    TIMES           reduce using rule 109 (unaryop -> QUESTION_MARK .)
    QUESTION_MARK   reduce using rule 109 (unaryop -> QUESTION_MARK .)
    OPENING_PARENTHESES reduce using rule 109 (unaryop -> QUESTION_MARK .)
    VarName         reduce using rule 109 (unaryop -> QUESTION_MARK .)
    CONST_KW        reduce using rule 109 (unaryop -> QUESTION_MARK .)
    TRUE_KW         reduce using rule 109 (unaryop -> QUESTION_MARK .)
    FALSE_KW        reduce using rule 109 (unaryop -> QUESTION_MARK .)


state 40

    (122) constant -> CONST_KW .

    PLUS            reduce using rule 122 (constant -> CONST_KW .)
    MINUS           reduce using rule 122 (constant -> CONST_KW .)
    TIMES           reduce using rule 122 (constant -> CONST_KW .)
    DIVIDE          reduce using rule 122 (constant -> CONST_KW .)
    PERCENTAGE      reduce using rule 122 (constant -> CONST_KW .)
    LESSEQUAL       reduce using rule 122 (constant -> CONST_KW .)
    GREATEREQUAL    reduce using rule 122 (constant -> CONST_KW .)
    EQUALEQUAL      reduce using rule 122 (constant -> CONST_KW .)
    LESS_THAN       reduce using rule 122 (constant -> CONST_KW .)
    GREATER_THAN    reduce using rule 122 (constant -> CONST_KW .)
    NOTEQUAL        reduce using rule 122 (constant -> CONST_KW .)
    LOGICAL_AND     reduce using rule 122 (constant -> CONST_KW .)
    LOGICAL_OR      reduce using rule 122 (constant -> CONST_KW .)
    AND             reduce using rule 122 (constant -> CONST_KW .)
    OR              reduce using rule 122 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 122 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 122 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 122 (constant -> CONST_KW .)
    COMMA           reduce using rule 122 (constant -> CONST_KW .)


state 41

    (81) unaryEachExpression -> TILDA . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 67
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 42

    (116) inalterable -> constant .

    PLUS            reduce using rule 116 (inalterable -> constant .)
    MINUS           reduce using rule 116 (inalterable -> constant .)
    TIMES           reduce using rule 116 (inalterable -> constant .)
    DIVIDE          reduce using rule 116 (inalterable -> constant .)
    PERCENTAGE      reduce using rule 116 (inalterable -> constant .)
    LESSEQUAL       reduce using rule 116 (inalterable -> constant .)
    GREATEREQUAL    reduce using rule 116 (inalterable -> constant .)
    EQUALEQUAL      reduce using rule 116 (inalterable -> constant .)
    LESS_THAN       reduce using rule 116 (inalterable -> constant .)
    GREATER_THAN    reduce using rule 116 (inalterable -> constant .)
    NOTEQUAL        reduce using rule 116 (inalterable -> constant .)
    LOGICAL_AND     reduce using rule 116 (inalterable -> constant .)
    LOGICAL_OR      reduce using rule 116 (inalterable -> constant .)
    AND             reduce using rule 116 (inalterable -> constant .)
    OR              reduce using rule 116 (inalterable -> constant .)
    SEMICOLON       reduce using rule 116 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 116 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 116 (inalterable -> constant .)
    COMMA           reduce using rule 116 (inalterable -> constant .)


state 43

    (110) factor -> inalterable .

    PLUS            reduce using rule 110 (factor -> inalterable .)
    MINUS           reduce using rule 110 (factor -> inalterable .)
    TIMES           reduce using rule 110 (factor -> inalterable .)
    DIVIDE          reduce using rule 110 (factor -> inalterable .)
    PERCENTAGE      reduce using rule 110 (factor -> inalterable .)
    LESSEQUAL       reduce using rule 110 (factor -> inalterable .)
    GREATEREQUAL    reduce using rule 110 (factor -> inalterable .)
    EQUALEQUAL      reduce using rule 110 (factor -> inalterable .)
    LESS_THAN       reduce using rule 110 (factor -> inalterable .)
    GREATER_THAN    reduce using rule 110 (factor -> inalterable .)
    NOTEQUAL        reduce using rule 110 (factor -> inalterable .)
    LOGICAL_AND     reduce using rule 110 (factor -> inalterable .)
    LOGICAL_OR      reduce using rule 110 (factor -> inalterable .)
    AND             reduce using rule 110 (factor -> inalterable .)
    OR              reduce using rule 110 (factor -> inalterable .)
    SEMICOLON       reduce using rule 110 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 110 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 110 (factor -> inalterable .)
    COMMA           reduce using rule 110 (factor -> inalterable .)


state 44

    (14) varForm -> VarName OPENING_BRACKET eachExpression . CLOSING_BRACKET
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_BRACKET shift and go to state 69
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72
    AND             shift and go to state 68
    OR              shift and go to state 70


state 45

    (106) unaryExpression -> factor .

    PLUS            reduce using rule 106 (unaryExpression -> factor .)
    MINUS           reduce using rule 106 (unaryExpression -> factor .)
    TIMES           reduce using rule 106 (unaryExpression -> factor .)
    DIVIDE          reduce using rule 106 (unaryExpression -> factor .)
    PERCENTAGE      reduce using rule 106 (unaryExpression -> factor .)
    LESSEQUAL       reduce using rule 106 (unaryExpression -> factor .)
    GREATEREQUAL    reduce using rule 106 (unaryExpression -> factor .)
    EQUALEQUAL      reduce using rule 106 (unaryExpression -> factor .)
    LESS_THAN       reduce using rule 106 (unaryExpression -> factor .)
    GREATER_THAN    reduce using rule 106 (unaryExpression -> factor .)
    NOTEQUAL        reduce using rule 106 (unaryExpression -> factor .)
    LOGICAL_AND     reduce using rule 106 (unaryExpression -> factor .)
    LOGICAL_OR      reduce using rule 106 (unaryExpression -> factor .)
    AND             reduce using rule 106 (unaryExpression -> factor .)
    OR              reduce using rule 106 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 106 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 106 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 106 (unaryExpression -> factor .)
    COMMA           reduce using rule 106 (unaryExpression -> factor .)


state 46

    (115) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    allExpression                  shift and go to state 75
    constant                       shift and go to state 42
    unaryEachExpression            shift and go to state 52
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 47

    (123) constant -> TRUE_KW .

    PLUS            reduce using rule 123 (constant -> TRUE_KW .)
    MINUS           reduce using rule 123 (constant -> TRUE_KW .)
    TIMES           reduce using rule 123 (constant -> TRUE_KW .)
    DIVIDE          reduce using rule 123 (constant -> TRUE_KW .)
    PERCENTAGE      reduce using rule 123 (constant -> TRUE_KW .)
    LESSEQUAL       reduce using rule 123 (constant -> TRUE_KW .)
    GREATEREQUAL    reduce using rule 123 (constant -> TRUE_KW .)
    EQUALEQUAL      reduce using rule 123 (constant -> TRUE_KW .)
    LESS_THAN       reduce using rule 123 (constant -> TRUE_KW .)
    GREATER_THAN    reduce using rule 123 (constant -> TRUE_KW .)
    NOTEQUAL        reduce using rule 123 (constant -> TRUE_KW .)
    LOGICAL_AND     reduce using rule 123 (constant -> TRUE_KW .)
    LOGICAL_OR      reduce using rule 123 (constant -> TRUE_KW .)
    AND             reduce using rule 123 (constant -> TRUE_KW .)
    OR              reduce using rule 123 (constant -> TRUE_KW .)
    CLOSING_PARENTHESES reduce using rule 123 (constant -> TRUE_KW .)
    SEMICOLON       reduce using rule 123 (constant -> TRUE_KW .)
    CLOSING_BRACKET reduce using rule 123 (constant -> TRUE_KW .)
    COMMA           reduce using rule 123 (constant -> TRUE_KW .)


state 48

    (117) inalterable -> VarName . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> VarName .

    OPENING_PARENTHESES shift and go to state 77
    OPENING_BRACKET reduce using rule 112 (alterable -> VarName .)
    DOT             reduce using rule 112 (alterable -> VarName .)
    PLUS            reduce using rule 112 (alterable -> VarName .)
    MINUS           reduce using rule 112 (alterable -> VarName .)
    TIMES           reduce using rule 112 (alterable -> VarName .)
    DIVIDE          reduce using rule 112 (alterable -> VarName .)
    PERCENTAGE      reduce using rule 112 (alterable -> VarName .)
    LESSEQUAL       reduce using rule 112 (alterable -> VarName .)
    GREATEREQUAL    reduce using rule 112 (alterable -> VarName .)
    EQUALEQUAL      reduce using rule 112 (alterable -> VarName .)
    LESS_THAN       reduce using rule 112 (alterable -> VarName .)
    GREATER_THAN    reduce using rule 112 (alterable -> VarName .)
    NOTEQUAL        reduce using rule 112 (alterable -> VarName .)
    CLOSING_BRACKET reduce using rule 112 (alterable -> VarName .)
    LOGICAL_AND     reduce using rule 112 (alterable -> VarName .)
    LOGICAL_OR      reduce using rule 112 (alterable -> VarName .)
    AND             reduce using rule 112 (alterable -> VarName .)
    OR              reduce using rule 112 (alterable -> VarName .)
    CLOSING_PARENTHESES reduce using rule 112 (alterable -> VarName .)
    SEMICOLON       reduce using rule 112 (alterable -> VarName .)
    COMMA           reduce using rule 112 (alterable -> VarName .)


state 49

    (89) relExpression -> mathEXP . compareType mathEXP
    (90) relExpression -> mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP
    (91) compareType -> . equal
    (92) compareType -> . nonEqual
    (93) equal -> . LESSEQUAL
    (94) equal -> . GREATEREQUAL
    (95) equal -> . EQUALEQUAL
    (96) nonEqual -> . LESS_THAN
    (97) nonEqual -> . GREATER_THAN
    (98) nonEqual -> . NOTEQUAL

    LOGICAL_AND     reduce using rule 90 (relExpression -> mathEXP .)
    LOGICAL_OR      reduce using rule 90 (relExpression -> mathEXP .)
    AND             reduce using rule 90 (relExpression -> mathEXP .)
    OR              reduce using rule 90 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 90 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 90 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 90 (relExpression -> mathEXP .)
    COMMA           reduce using rule 90 (relExpression -> mathEXP .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 86
    PERCENTAGE      shift and go to state 83
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 80
    EQUALEQUAL      shift and go to state 87
    LESS_THAN       shift and go to state 84
    GREATER_THAN    shift and go to state 79
    NOTEQUAL        shift and go to state 90

    compareType                    shift and go to state 81
    equal                          shift and go to state 78
    nonEqual                       shift and go to state 91

state 50

    (107) unaryop -> MINUS .

    MINUS           reduce using rule 107 (unaryop -> MINUS .)
    TIMES           reduce using rule 107 (unaryop -> MINUS .)
    QUESTION_MARK   reduce using rule 107 (unaryop -> MINUS .)
    OPENING_PARENTHESES reduce using rule 107 (unaryop -> MINUS .)
    VarName         reduce using rule 107 (unaryop -> MINUS .)
    CONST_KW        reduce using rule 107 (unaryop -> MINUS .)
    TRUE_KW         reduce using rule 107 (unaryop -> MINUS .)
    FALSE_KW        reduce using rule 107 (unaryop -> MINUS .)


state 51

    (124) constant -> FALSE_KW .

    PLUS            reduce using rule 124 (constant -> FALSE_KW .)
    MINUS           reduce using rule 124 (constant -> FALSE_KW .)
    TIMES           reduce using rule 124 (constant -> FALSE_KW .)
    DIVIDE          reduce using rule 124 (constant -> FALSE_KW .)
    PERCENTAGE      reduce using rule 124 (constant -> FALSE_KW .)
    LESSEQUAL       reduce using rule 124 (constant -> FALSE_KW .)
    GREATEREQUAL    reduce using rule 124 (constant -> FALSE_KW .)
    EQUALEQUAL      reduce using rule 124 (constant -> FALSE_KW .)
    LESS_THAN       reduce using rule 124 (constant -> FALSE_KW .)
    GREATER_THAN    reduce using rule 124 (constant -> FALSE_KW .)
    NOTEQUAL        reduce using rule 124 (constant -> FALSE_KW .)
    LOGICAL_AND     reduce using rule 124 (constant -> FALSE_KW .)
    LOGICAL_OR      reduce using rule 124 (constant -> FALSE_KW .)
    AND             reduce using rule 124 (constant -> FALSE_KW .)
    OR              reduce using rule 124 (constant -> FALSE_KW .)
    CLOSING_PARENTHESES reduce using rule 124 (constant -> FALSE_KW .)
    SEMICOLON       reduce using rule 124 (constant -> FALSE_KW .)
    CLOSING_BRACKET reduce using rule 124 (constant -> FALSE_KW .)
    COMMA           reduce using rule 124 (constant -> FALSE_KW .)


state 52

    (80) eachExpression -> unaryEachExpression .

    LOGICAL_AND     reduce using rule 80 (eachExpression -> unaryEachExpression .)
    LOGICAL_OR      reduce using rule 80 (eachExpression -> unaryEachExpression .)
    AND             reduce using rule 80 (eachExpression -> unaryEachExpression .)
    OR              reduce using rule 80 (eachExpression -> unaryEachExpression .)
    CLOSING_BRACKET reduce using rule 80 (eachExpression -> unaryEachExpression .)
    CLOSING_PARENTHESES reduce using rule 80 (eachExpression -> unaryEachExpression .)
    SEMICOLON       reduce using rule 80 (eachExpression -> unaryEachExpression .)
    COMMA           reduce using rule 80 (eachExpression -> unaryEachExpression .)


state 53

    (111) factor -> alterable .
    (113) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> alterable . DOT VarName

    PLUS            reduce using rule 111 (factor -> alterable .)
    MINUS           reduce using rule 111 (factor -> alterable .)
    TIMES           reduce using rule 111 (factor -> alterable .)
    DIVIDE          reduce using rule 111 (factor -> alterable .)
    PERCENTAGE      reduce using rule 111 (factor -> alterable .)
    LESSEQUAL       reduce using rule 111 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 111 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 111 (factor -> alterable .)
    LESS_THAN       reduce using rule 111 (factor -> alterable .)
    GREATER_THAN    reduce using rule 111 (factor -> alterable .)
    NOTEQUAL        reduce using rule 111 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 111 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 111 (factor -> alterable .)
    AND             reduce using rule 111 (factor -> alterable .)
    OR              reduce using rule 111 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 111 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 111 (factor -> alterable .)
    SEMICOLON       reduce using rule 111 (factor -> alterable .)
    COMMA           reduce using rule 111 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 93
    DOT             shift and go to state 92


state 54

    (88) eachExpression -> relExpression .

    LOGICAL_AND     reduce using rule 88 (eachExpression -> relExpression .)
    LOGICAL_OR      reduce using rule 88 (eachExpression -> relExpression .)
    AND             reduce using rule 88 (eachExpression -> relExpression .)
    OR              reduce using rule 88 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 88 (eachExpression -> relExpression .)
    CLOSING_PARENTHESES reduce using rule 88 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 88 (eachExpression -> relExpression .)
    COMMA           reduce using rule 88 (eachExpression -> relExpression .)


state 55

    (105) unaryExpression -> unaryop . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    unaryExpression                shift and go to state 94
    factor                         shift and go to state 45

state 56

    (108) unaryop -> TIMES .

    MINUS           reduce using rule 108 (unaryop -> TIMES .)
    TIMES           reduce using rule 108 (unaryop -> TIMES .)
    QUESTION_MARK   reduce using rule 108 (unaryop -> TIMES .)
    OPENING_PARENTHESES reduce using rule 108 (unaryop -> TIMES .)
    VarName         reduce using rule 108 (unaryop -> TIMES .)
    CONST_KW        reduce using rule 108 (unaryop -> TIMES .)
    TRUE_KW         reduce using rule 108 (unaryop -> TIMES .)
    FALSE_KW        reduce using rule 108 (unaryop -> TIMES .)


state 57

    (104) mathEXP -> unaryExpression .

    PLUS            reduce using rule 104 (mathEXP -> unaryExpression .)
    MINUS           reduce using rule 104 (mathEXP -> unaryExpression .)
    TIMES           reduce using rule 104 (mathEXP -> unaryExpression .)
    DIVIDE          reduce using rule 104 (mathEXP -> unaryExpression .)
    PERCENTAGE      reduce using rule 104 (mathEXP -> unaryExpression .)
    LESSEQUAL       reduce using rule 104 (mathEXP -> unaryExpression .)
    GREATEREQUAL    reduce using rule 104 (mathEXP -> unaryExpression .)
    EQUALEQUAL      reduce using rule 104 (mathEXP -> unaryExpression .)
    LESS_THAN       reduce using rule 104 (mathEXP -> unaryExpression .)
    GREATER_THAN    reduce using rule 104 (mathEXP -> unaryExpression .)
    NOTEQUAL        reduce using rule 104 (mathEXP -> unaryExpression .)
    LOGICAL_AND     reduce using rule 104 (mathEXP -> unaryExpression .)
    LOGICAL_OR      reduce using rule 104 (mathEXP -> unaryExpression .)
    AND             reduce using rule 104 (mathEXP -> unaryExpression .)
    OR              reduce using rule 104 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 104 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 104 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 104 (mathEXP -> unaryExpression .)
    COMMA           reduce using rule 104 (mathEXP -> unaryExpression .)


state 58

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 95


state 59

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 96


state 60

    (30) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 34
    paramTypeList                  shift and go to state 97

state 61

    (34) paramList -> paramId .

    COMMA           reduce using rule 34 (paramList -> paramId .)
    SEMICOLON       reduce using rule 34 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 34 (paramList -> paramId .)


state 62

    (37) paramId -> VarName .
    (38) paramId -> VarName . OPENING_BRACKET CLOSING_BRACKET

    COMMA           reduce using rule 37 (paramId -> VarName .)
    SEMICOLON       reduce using rule 37 (paramId -> VarName .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> VarName .)
    OPENING_BRACKET shift and go to state 98


state 63

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . COMMA paramId

    SEMICOLON       reduce using rule 32 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 32 (paramTypeList -> type paramList .)
    COMMA           shift and go to state 99


state 64

    (26) function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 110
    OPENING_BRACE   shift and go to state 108
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 102
    GIVEBACK_KW     shift and go to state 111
    CONTINUE_KW     shift and go to state 106
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    iterationPhrase                shift and go to state 101
    returnPhrase                   shift and go to state 100
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    statement                      shift and go to state 104
    factor                         shift and go to state 45
    mathEXP                        shift and go to state 49
    continue                       shift and go to state 107
    allExpression                  shift and go to state 103
    unaryEachExpression            shift and go to state 52
    compoundPhrase                 shift and go to state 109
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    phrase                         shift and go to state 112
    unaryExpression                shift and go to state 57

state 65

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 113
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72
    AND             shift and go to state 68
    OR              shift and go to state 70


state 66

    (27) function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 110
    OPENING_BRACE   shift and go to state 108
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 102
    GIVEBACK_KW     shift and go to state 111
    CONTINUE_KW     shift and go to state 106
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    iterationPhrase                shift and go to state 101
    returnPhrase                   shift and go to state 100
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    statement                      shift and go to state 114
    factor                         shift and go to state 45
    mathEXP                        shift and go to state 49
    continue                       shift and go to state 107
    allExpression                  shift and go to state 103
    unaryEachExpression            shift and go to state 52
    compoundPhrase                 shift and go to state 109
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    phrase                         shift and go to state 112
    unaryExpression                shift and go to state 57

state 67

    (81) unaryEachExpression -> TILDA eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    AND             reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    OR              reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    SEMICOLON       reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)
    COMMA           reduce using rule 81 (unaryEachExpression -> TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 68

    (82) eachExpression -> eachExpression AND . eachExpression
    (83) eachExpression -> eachExpression AND . THEN_KW eachExpression
    (84) eachExpression -> eachExpression AND . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 117
    ELSE_KW         shift and go to state 116
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 115
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 69

    (14) varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .

    DOUBLE_DOT      reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    STATIC_KW       reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOLEAN_KW      reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHARACTER_KW    reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INTEGER_KW      reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHAR_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOL_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INT_KW          reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CLOSING_BRACE   reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_BRACE   reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILL_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMEBACK_KW     reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    GIVEBACK_KW     reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONTINUE_KW     reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    VarName         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    QUESTION_MARK   reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_PARENTHESES reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONST_KW        reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TRUE_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    FALSE_KW        reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)


state 70

    (85) eachExpression -> eachExpression OR . eachExpression
    (86) eachExpression -> eachExpression OR . THEN_KW eachExpression
    (87) eachExpression -> eachExpression OR . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 120
    ELSE_KW         shift and go to state 119
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 118
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 71

    (74) eachExpression -> eachExpression LOGICAL_AND . eachExpression
    (75) eachExpression -> eachExpression LOGICAL_AND . THEN_KW eachExpression
    (76) eachExpression -> eachExpression LOGICAL_AND . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 123
    ELSE_KW         shift and go to state 122
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 121
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 72

    (77) eachExpression -> eachExpression LOGICAL_OR . eachExpression
    (78) eachExpression -> eachExpression LOGICAL_OR . THEN_KW eachExpression
    (79) eachExpression -> eachExpression LOGICAL_OR . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 126
    ELSE_KW         shift and go to state 125
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 124
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 73

    (67) allExpression -> eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES reduce using rule 67 (allExpression -> eachExpression .)
    COMMA           reduce using rule 67 (allExpression -> eachExpression .)
    SEMICOLON       reduce using rule 67 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 67 (allExpression -> eachExpression .)
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72
    AND             shift and go to state 68
    OR              shift and go to state 70


state 74

    (112) alterable -> VarName .
    (117) inalterable -> VarName . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PLUSPLUS        reduce using rule 112 (alterable -> VarName .)
    MINUSMINUS      reduce using rule 112 (alterable -> VarName .)
    OPENING_BRACKET reduce using rule 112 (alterable -> VarName .)
    DOT             reduce using rule 112 (alterable -> VarName .)
    EQUAL           reduce using rule 112 (alterable -> VarName .)
    PLUSEQUAL       reduce using rule 112 (alterable -> VarName .)
    MINUSEQUAL      reduce using rule 112 (alterable -> VarName .)
    TIMESEQUAL      reduce using rule 112 (alterable -> VarName .)
    DIVIDEEQUAL     reduce using rule 112 (alterable -> VarName .)
    PLUS            reduce using rule 112 (alterable -> VarName .)
    MINUS           reduce using rule 112 (alterable -> VarName .)
    TIMES           reduce using rule 112 (alterable -> VarName .)
    DIVIDE          reduce using rule 112 (alterable -> VarName .)
    PERCENTAGE      reduce using rule 112 (alterable -> VarName .)
    LESSEQUAL       reduce using rule 112 (alterable -> VarName .)
    GREATEREQUAL    reduce using rule 112 (alterable -> VarName .)
    EQUALEQUAL      reduce using rule 112 (alterable -> VarName .)
    LESS_THAN       reduce using rule 112 (alterable -> VarName .)
    GREATER_THAN    reduce using rule 112 (alterable -> VarName .)
    NOTEQUAL        reduce using rule 112 (alterable -> VarName .)
    LOGICAL_AND     reduce using rule 112 (alterable -> VarName .)
    LOGICAL_OR      reduce using rule 112 (alterable -> VarName .)
    AND             reduce using rule 112 (alterable -> VarName .)
    OR              reduce using rule 112 (alterable -> VarName .)
    CLOSING_BRACKET reduce using rule 112 (alterable -> VarName .)
    SEMICOLON       reduce using rule 112 (alterable -> VarName .)
    CLOSING_PARENTHESES reduce using rule 112 (alterable -> VarName .)
    COMMA           reduce using rule 112 (alterable -> VarName .)
    OPENING_PARENTHESES shift and go to state 77


state 75

    (115) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 127


state 76

    (64) allExpression -> alterable . mathOp allExpression
    (65) allExpression -> alterable . PLUSPLUS
    (66) allExpression -> alterable . MINUSMINUS
    (68) allExpression -> alterable . mathOp NUMBER
    (113) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> alterable . DOT VarName
    (111) factor -> alterable .
    (69) mathOp -> . EQUAL
    (70) mathOp -> . PLUSEQUAL
    (71) mathOp -> . MINUSEQUAL
    (72) mathOp -> . TIMESEQUAL
    (73) mathOp -> . DIVIDEEQUAL

    PLUSPLUS        shift and go to state 130
    MINUSMINUS      shift and go to state 131
    OPENING_BRACKET shift and go to state 93
    DOT             shift and go to state 92
    PLUS            reduce using rule 111 (factor -> alterable .)
    MINUS           reduce using rule 111 (factor -> alterable .)
    TIMES           reduce using rule 111 (factor -> alterable .)
    DIVIDE          reduce using rule 111 (factor -> alterable .)
    PERCENTAGE      reduce using rule 111 (factor -> alterable .)
    LESSEQUAL       reduce using rule 111 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 111 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 111 (factor -> alterable .)
    LESS_THAN       reduce using rule 111 (factor -> alterable .)
    GREATER_THAN    reduce using rule 111 (factor -> alterable .)
    NOTEQUAL        reduce using rule 111 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 111 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 111 (factor -> alterable .)
    AND             reduce using rule 111 (factor -> alterable .)
    OR              reduce using rule 111 (factor -> alterable .)
    SEMICOLON       reduce using rule 111 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 111 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 111 (factor -> alterable .)
    COMMA           reduce using rule 111 (factor -> alterable .)
    EQUAL           shift and go to state 129
    PLUSEQUAL       shift and go to state 132
    MINUSEQUAL      shift and go to state 133
    TIMESEQUAL      shift and go to state 134
    DIVIDEEQUAL     shift and go to state 135

    mathOp                         shift and go to state 128

state 77

    (117) inalterable -> VarName OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (118) args -> . arguments
    (119) args -> . empty
    (120) arguments -> . arguments COMMA allExpression
    (121) arguments -> . allExpression
    (125) empty -> .
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    empty                          shift and go to state 137
    args                           shift and go to state 138
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    allExpression                  shift and go to state 136
    factor                         shift and go to state 45
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 76
    mathEXP                        shift and go to state 49
    arguments                      shift and go to state 139
    unaryExpression                shift and go to state 57

state 78

    (91) compareType -> equal .

    MINUS           reduce using rule 91 (compareType -> equal .)
    TIMES           reduce using rule 91 (compareType -> equal .)
    QUESTION_MARK   reduce using rule 91 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 91 (compareType -> equal .)
    VarName         reduce using rule 91 (compareType -> equal .)
    CONST_KW        reduce using rule 91 (compareType -> equal .)
    TRUE_KW         reduce using rule 91 (compareType -> equal .)
    FALSE_KW        reduce using rule 91 (compareType -> equal .)


state 79

    (97) nonEqual -> GREATER_THAN .

    MINUS           reduce using rule 97 (nonEqual -> GREATER_THAN .)
    TIMES           reduce using rule 97 (nonEqual -> GREATER_THAN .)
    QUESTION_MARK   reduce using rule 97 (nonEqual -> GREATER_THAN .)
    OPENING_PARENTHESES reduce using rule 97 (nonEqual -> GREATER_THAN .)
    VarName         reduce using rule 97 (nonEqual -> GREATER_THAN .)
    CONST_KW        reduce using rule 97 (nonEqual -> GREATER_THAN .)
    TRUE_KW         reduce using rule 97 (nonEqual -> GREATER_THAN .)
    FALSE_KW        reduce using rule 97 (nonEqual -> GREATER_THAN .)


state 80

    (94) equal -> GREATEREQUAL .

    MINUS           reduce using rule 94 (equal -> GREATEREQUAL .)
    TIMES           reduce using rule 94 (equal -> GREATEREQUAL .)
    QUESTION_MARK   reduce using rule 94 (equal -> GREATEREQUAL .)
    OPENING_PARENTHESES reduce using rule 94 (equal -> GREATEREQUAL .)
    VarName         reduce using rule 94 (equal -> GREATEREQUAL .)
    CONST_KW        reduce using rule 94 (equal -> GREATEREQUAL .)
    TRUE_KW         reduce using rule 94 (equal -> GREATEREQUAL .)
    FALSE_KW        reduce using rule 94 (equal -> GREATEREQUAL .)


state 81

    (89) relExpression -> mathEXP compareType . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    unaryExpression                shift and go to state 57
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    mathEXP                        shift and go to state 140
    factor                         shift and go to state 45

state 82

    (93) equal -> LESSEQUAL .

    MINUS           reduce using rule 93 (equal -> LESSEQUAL .)
    TIMES           reduce using rule 93 (equal -> LESSEQUAL .)
    QUESTION_MARK   reduce using rule 93 (equal -> LESSEQUAL .)
    OPENING_PARENTHESES reduce using rule 93 (equal -> LESSEQUAL .)
    VarName         reduce using rule 93 (equal -> LESSEQUAL .)
    CONST_KW        reduce using rule 93 (equal -> LESSEQUAL .)
    TRUE_KW         reduce using rule 93 (equal -> LESSEQUAL .)
    FALSE_KW        reduce using rule 93 (equal -> LESSEQUAL .)


state 83

    (103) mathEXP -> mathEXP PERCENTAGE . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    unaryExpression                shift and go to state 57
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    mathEXP                        shift and go to state 141
    factor                         shift and go to state 45

state 84

    (96) nonEqual -> LESS_THAN .

    MINUS           reduce using rule 96 (nonEqual -> LESS_THAN .)
    TIMES           reduce using rule 96 (nonEqual -> LESS_THAN .)
    QUESTION_MARK   reduce using rule 96 (nonEqual -> LESS_THAN .)
    OPENING_PARENTHESES reduce using rule 96 (nonEqual -> LESS_THAN .)
    VarName         reduce using rule 96 (nonEqual -> LESS_THAN .)
    CONST_KW        reduce using rule 96 (nonEqual -> LESS_THAN .)
    TRUE_KW         reduce using rule 96 (nonEqual -> LESS_THAN .)
    FALSE_KW        reduce using rule 96 (nonEqual -> LESS_THAN .)


state 85

    (99) mathEXP -> mathEXP PLUS . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    unaryExpression                shift and go to state 57
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    mathEXP                        shift and go to state 142
    factor                         shift and go to state 45

state 86

    (102) mathEXP -> mathEXP DIVIDE . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    unaryExpression                shift and go to state 57
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    mathEXP                        shift and go to state 143
    factor                         shift and go to state 45

state 87

    (95) equal -> EQUALEQUAL .

    MINUS           reduce using rule 95 (equal -> EQUALEQUAL .)
    TIMES           reduce using rule 95 (equal -> EQUALEQUAL .)
    QUESTION_MARK   reduce using rule 95 (equal -> EQUALEQUAL .)
    OPENING_PARENTHESES reduce using rule 95 (equal -> EQUALEQUAL .)
    VarName         reduce using rule 95 (equal -> EQUALEQUAL .)
    CONST_KW        reduce using rule 95 (equal -> EQUALEQUAL .)
    TRUE_KW         reduce using rule 95 (equal -> EQUALEQUAL .)
    FALSE_KW        reduce using rule 95 (equal -> EQUALEQUAL .)


state 88

    (100) mathEXP -> mathEXP MINUS . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    unaryExpression                shift and go to state 57
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    mathEXP                        shift and go to state 144
    factor                         shift and go to state 45

state 89

    (101) mathEXP -> mathEXP TIMES . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    unaryop                        shift and go to state 55
    alterable                      shift and go to state 53
    unaryExpression                shift and go to state 57
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    mathEXP                        shift and go to state 145
    factor                         shift and go to state 45

state 90

    (98) nonEqual -> NOTEQUAL .

    MINUS           reduce using rule 98 (nonEqual -> NOTEQUAL .)
    TIMES           reduce using rule 98 (nonEqual -> NOTEQUAL .)
    QUESTION_MARK   reduce using rule 98 (nonEqual -> NOTEQUAL .)
    OPENING_PARENTHESES reduce using rule 98 (nonEqual -> NOTEQUAL .)
    VarName         reduce using rule 98 (nonEqual -> NOTEQUAL .)
    CONST_KW        reduce using rule 98 (nonEqual -> NOTEQUAL .)
    TRUE_KW         reduce using rule 98 (nonEqual -> NOTEQUAL .)
    FALSE_KW        reduce using rule 98 (nonEqual -> NOTEQUAL .)


state 91

    (92) compareType -> nonEqual .

    MINUS           reduce using rule 92 (compareType -> nonEqual .)
    TIMES           reduce using rule 92 (compareType -> nonEqual .)
    QUESTION_MARK   reduce using rule 92 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 92 (compareType -> nonEqual .)
    VarName         reduce using rule 92 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 92 (compareType -> nonEqual .)
    TRUE_KW         reduce using rule 92 (compareType -> nonEqual .)
    FALSE_KW        reduce using rule 92 (compareType -> nonEqual .)


state 92

    (114) alterable -> alterable DOT . VarName

    VarName         shift and go to state 146


state 93

    (113) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    allExpression                  shift and go to state 147
    constant                       shift and go to state 42
    unaryEachExpression            shift and go to state 52
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 94

    (105) unaryExpression -> unaryop unaryExpression .

    PLUS            reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    MINUS           reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    TIMES           reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    DIVIDE          reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    PERCENTAGE      reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LESSEQUAL       reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    GREATEREQUAL    reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    EQUALEQUAL      reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LESS_THAN       reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    GREATER_THAN    reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    NOTEQUAL        reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_AND     reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_OR      reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    AND             reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    OR              reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    COMMA           reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)


state 95

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 148


state 96

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 149


state 97

    (30) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 98

    (38) paramId -> VarName OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 150


state 99

    (33) paramList -> paramList COMMA . paramId
    (37) paramId -> . VarName
    (38) paramId -> . VarName OPENING_BRACKET CLOSING_BRACKET

    VarName         shift and go to state 62

    paramId                        shift and go to state 151

state 100

    (51) statement -> returnPhrase .

    CLOSING_BRACE   reduce using rule 51 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 51 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 51 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 51 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 51 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 51 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 51 (statement -> returnPhrase .)
    VarName         reduce using rule 51 (statement -> returnPhrase .)
    TILDA           reduce using rule 51 (statement -> returnPhrase .)
    MINUS           reduce using rule 51 (statement -> returnPhrase .)
    TIMES           reduce using rule 51 (statement -> returnPhrase .)
    QUESTION_MARK   reduce using rule 51 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 51 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 51 (statement -> returnPhrase .)
    TRUE_KW         reduce using rule 51 (statement -> returnPhrase .)
    FALSE_KW        reduce using rule 51 (statement -> returnPhrase .)
    VOID_KW         reduce using rule 51 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 51 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 51 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 51 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 51 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 51 (statement -> returnPhrase .)
    INT_KW          reduce using rule 51 (statement -> returnPhrase .)
    $end            reduce using rule 51 (statement -> returnPhrase .)


state 101

    (50) statement -> iterationPhrase .

    CLOSING_BRACE   reduce using rule 50 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 50 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 50 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 50 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 50 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 50 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 50 (statement -> iterationPhrase .)
    VarName         reduce using rule 50 (statement -> iterationPhrase .)
    TILDA           reduce using rule 50 (statement -> iterationPhrase .)
    MINUS           reduce using rule 50 (statement -> iterationPhrase .)
    TIMES           reduce using rule 50 (statement -> iterationPhrase .)
    QUESTION_MARK   reduce using rule 50 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 50 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 50 (statement -> iterationPhrase .)
    TRUE_KW         reduce using rule 50 (statement -> iterationPhrase .)
    FALSE_KW        reduce using rule 50 (statement -> iterationPhrase .)
    VOID_KW         reduce using rule 50 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 50 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 50 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 50 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 50 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 50 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 50 (statement -> iterationPhrase .)
    $end            reduce using rule 50 (statement -> iterationPhrase .)


state 102

    (61) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 152


state 103

    (56) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 153


state 104

    (26) function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 105

    (60) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 154


state 106

    (63) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 155


state 107

    (52) statement -> continue .

    CLOSING_BRACE   reduce using rule 52 (statement -> continue .)
    SEMICOLON       reduce using rule 52 (statement -> continue .)
    OPENING_BRACE   reduce using rule 52 (statement -> continue .)
    TILL_KW         reduce using rule 52 (statement -> continue .)
    COMEBACK_KW     reduce using rule 52 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 52 (statement -> continue .)
    CONTINUE_KW     reduce using rule 52 (statement -> continue .)
    VarName         reduce using rule 52 (statement -> continue .)
    TILDA           reduce using rule 52 (statement -> continue .)
    MINUS           reduce using rule 52 (statement -> continue .)
    TIMES           reduce using rule 52 (statement -> continue .)
    QUESTION_MARK   reduce using rule 52 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 52 (statement -> continue .)
    CONST_KW        reduce using rule 52 (statement -> continue .)
    TRUE_KW         reduce using rule 52 (statement -> continue .)
    FALSE_KW        reduce using rule 52 (statement -> continue .)
    VOID_KW         reduce using rule 52 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 52 (statement -> continue .)
    CHARACTER_KW    reduce using rule 52 (statement -> continue .)
    INTEGER_KW      reduce using rule 52 (statement -> continue .)
    CHAR_KW         reduce using rule 52 (statement -> continue .)
    BOOL_KW         reduce using rule 52 (statement -> continue .)
    INT_KW          reduce using rule 52 (statement -> continue .)
    $end            reduce using rule 52 (statement -> continue .)


state 108

    (53) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> . empty
    (125) empty -> .

    STATIC_KW       reduce using rule 125 (empty -> .)
    BOOLEAN_KW      reduce using rule 125 (empty -> .)
    CHARACTER_KW    reduce using rule 125 (empty -> .)
    INTEGER_KW      reduce using rule 125 (empty -> .)
    CHAR_KW         reduce using rule 125 (empty -> .)
    BOOL_KW         reduce using rule 125 (empty -> .)
    INT_KW          reduce using rule 125 (empty -> .)
    CLOSING_BRACE   reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    OPENING_BRACE   reduce using rule 125 (empty -> .)
    TILL_KW         reduce using rule 125 (empty -> .)
    COMEBACK_KW     reduce using rule 125 (empty -> .)
    GIVEBACK_KW     reduce using rule 125 (empty -> .)
    CONTINUE_KW     reduce using rule 125 (empty -> .)
    VarName         reduce using rule 125 (empty -> .)
    TILDA           reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    TIMES           reduce using rule 125 (empty -> .)
    QUESTION_MARK   reduce using rule 125 (empty -> .)
    OPENING_PARENTHESES reduce using rule 125 (empty -> .)
    CONST_KW        reduce using rule 125 (empty -> .)
    TRUE_KW         reduce using rule 125 (empty -> .)
    FALSE_KW        reduce using rule 125 (empty -> .)

    empty                          shift and go to state 156
    localDeclarations              shift and go to state 157

state 109

    (49) statement -> compoundPhrase .

    CLOSING_BRACE   reduce using rule 49 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 49 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 49 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 49 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 49 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 49 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 49 (statement -> compoundPhrase .)
    VarName         reduce using rule 49 (statement -> compoundPhrase .)
    TILDA           reduce using rule 49 (statement -> compoundPhrase .)
    MINUS           reduce using rule 49 (statement -> compoundPhrase .)
    TIMES           reduce using rule 49 (statement -> compoundPhrase .)
    QUESTION_MARK   reduce using rule 49 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 49 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 49 (statement -> compoundPhrase .)
    TRUE_KW         reduce using rule 49 (statement -> compoundPhrase .)
    FALSE_KW        reduce using rule 49 (statement -> compoundPhrase .)
    VOID_KW         reduce using rule 49 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 49 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 49 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 49 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 49 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 49 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 49 (statement -> compoundPhrase .)
    $end            reduce using rule 49 (statement -> compoundPhrase .)


state 110

    (57) phrase -> SEMICOLON .

    VOID_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 57 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 57 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 57 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 57 (phrase -> SEMICOLON .)
    $end            reduce using rule 57 (phrase -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 57 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 57 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 57 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 57 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (phrase -> SEMICOLON .)
    VarName         reduce using rule 57 (phrase -> SEMICOLON .)
    TILDA           reduce using rule 57 (phrase -> SEMICOLON .)
    MINUS           reduce using rule 57 (phrase -> SEMICOLON .)
    TIMES           reduce using rule 57 (phrase -> SEMICOLON .)
    QUESTION_MARK   reduce using rule 57 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 57 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 57 (phrase -> SEMICOLON .)
    TRUE_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    FALSE_KW        reduce using rule 57 (phrase -> SEMICOLON .)


state 111

    (62) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    allExpression                  shift and go to state 158
    constant                       shift and go to state 42
    unaryEachExpression            shift and go to state 52
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 112

    (48) statement -> phrase .

    CLOSING_BRACE   reduce using rule 48 (statement -> phrase .)
    SEMICOLON       reduce using rule 48 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 48 (statement -> phrase .)
    TILL_KW         reduce using rule 48 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 48 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 48 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 48 (statement -> phrase .)
    VarName         reduce using rule 48 (statement -> phrase .)
    TILDA           reduce using rule 48 (statement -> phrase .)
    MINUS           reduce using rule 48 (statement -> phrase .)
    TIMES           reduce using rule 48 (statement -> phrase .)
    QUESTION_MARK   reduce using rule 48 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 48 (statement -> phrase .)
    CONST_KW        reduce using rule 48 (statement -> phrase .)
    TRUE_KW         reduce using rule 48 (statement -> phrase .)
    FALSE_KW        reduce using rule 48 (statement -> phrase .)
    VOID_KW         reduce using rule 48 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 48 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 48 (statement -> phrase .)
    INTEGER_KW      reduce using rule 48 (statement -> phrase .)
    CHAR_KW         reduce using rule 48 (statement -> phrase .)
    BOOL_KW         reduce using rule 48 (statement -> phrase .)
    INT_KW          reduce using rule 48 (statement -> phrase .)
    $end            reduce using rule 48 (statement -> phrase .)


state 113

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    STATIC_KW       reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOLEAN_KW      reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHARACTER_KW    reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INTEGER_KW      reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHAR_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOL_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INT_KW          reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CLOSING_BRACE   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_BRACE   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILL_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMEBACK_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    GIVEBACK_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONTINUE_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    VarName         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    QUESTION_MARK   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_PARENTHESES reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONST_KW        reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TRUE_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    FALSE_KW        reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 114

    (27) function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 115

    (82) eachExpression -> eachExpression AND eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    LOGICAL_OR      reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    AND             reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    OR              reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_BRACKET reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    SEMICOLON       reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)
    COMMA           reduce using rule 82 (eachExpression -> eachExpression AND eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 116

    (84) eachExpression -> eachExpression AND ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 159
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 117

    (83) eachExpression -> eachExpression AND THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 160
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 118

    (85) eachExpression -> eachExpression OR eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .)
    OR              reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_BRACKET reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .)
    SEMICOLON       reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .)
    COMMA           reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .)
    LOGICAL_AND     shift and go to state 71
    AND             shift and go to state 68

  ! LOGICAL_AND     [ reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .) ]
  ! AND             [ reduce using rule 85 (eachExpression -> eachExpression OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! OR              [ shift and go to state 70 ]


state 119

    (87) eachExpression -> eachExpression OR ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 161
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 120

    (86) eachExpression -> eachExpression OR THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 162
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 121

    (74) eachExpression -> eachExpression LOGICAL_AND eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    LOGICAL_OR      reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    AND             reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    OR              reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_BRACKET reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    SEMICOLON       reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    COMMA           reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 122

    (76) eachExpression -> eachExpression LOGICAL_AND ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 163
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 123

    (75) eachExpression -> eachExpression LOGICAL_AND THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 164
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 124

    (77) eachExpression -> eachExpression LOGICAL_OR eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    OR              reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_BRACKET reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    SEMICOLON       reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    COMMA           reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    LOGICAL_AND     shift and go to state 71
    AND             shift and go to state 68

  ! LOGICAL_AND     [ reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! AND             [ reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! OR              [ shift and go to state 70 ]


state 125

    (79) eachExpression -> eachExpression LOGICAL_OR ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 165
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 126

    (78) eachExpression -> eachExpression LOGICAL_OR THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 166
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 127

    (115) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PLUS            reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND             reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR              reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 128

    (64) allExpression -> alterable mathOp . allExpression
    (68) allExpression -> alterable mathOp . NUMBER
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    NUMBER          shift and go to state 167
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    allExpression                  shift and go to state 168
    constant                       shift and go to state 42
    unaryEachExpression            shift and go to state 52
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 129

    (69) mathOp -> EQUAL .

    NUMBER          reduce using rule 69 (mathOp -> EQUAL .)
    VarName         reduce using rule 69 (mathOp -> EQUAL .)
    TILDA           reduce using rule 69 (mathOp -> EQUAL .)
    MINUS           reduce using rule 69 (mathOp -> EQUAL .)
    TIMES           reduce using rule 69 (mathOp -> EQUAL .)
    QUESTION_MARK   reduce using rule 69 (mathOp -> EQUAL .)
    OPENING_PARENTHESES reduce using rule 69 (mathOp -> EQUAL .)
    CONST_KW        reduce using rule 69 (mathOp -> EQUAL .)
    TRUE_KW         reduce using rule 69 (mathOp -> EQUAL .)
    FALSE_KW        reduce using rule 69 (mathOp -> EQUAL .)


state 130

    (65) allExpression -> alterable PLUSPLUS .

    CLOSING_PARENTHESES reduce using rule 65 (allExpression -> alterable PLUSPLUS .)
    COMMA           reduce using rule 65 (allExpression -> alterable PLUSPLUS .)
    SEMICOLON       reduce using rule 65 (allExpression -> alterable PLUSPLUS .)
    CLOSING_BRACKET reduce using rule 65 (allExpression -> alterable PLUSPLUS .)


state 131

    (66) allExpression -> alterable MINUSMINUS .

    CLOSING_PARENTHESES reduce using rule 66 (allExpression -> alterable MINUSMINUS .)
    COMMA           reduce using rule 66 (allExpression -> alterable MINUSMINUS .)
    SEMICOLON       reduce using rule 66 (allExpression -> alterable MINUSMINUS .)
    CLOSING_BRACKET reduce using rule 66 (allExpression -> alterable MINUSMINUS .)


state 132

    (70) mathOp -> PLUSEQUAL .

    NUMBER          reduce using rule 70 (mathOp -> PLUSEQUAL .)
    VarName         reduce using rule 70 (mathOp -> PLUSEQUAL .)
    TILDA           reduce using rule 70 (mathOp -> PLUSEQUAL .)
    MINUS           reduce using rule 70 (mathOp -> PLUSEQUAL .)
    TIMES           reduce using rule 70 (mathOp -> PLUSEQUAL .)
    QUESTION_MARK   reduce using rule 70 (mathOp -> PLUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 70 (mathOp -> PLUSEQUAL .)
    CONST_KW        reduce using rule 70 (mathOp -> PLUSEQUAL .)
    TRUE_KW         reduce using rule 70 (mathOp -> PLUSEQUAL .)
    FALSE_KW        reduce using rule 70 (mathOp -> PLUSEQUAL .)


state 133

    (71) mathOp -> MINUSEQUAL .

    NUMBER          reduce using rule 71 (mathOp -> MINUSEQUAL .)
    VarName         reduce using rule 71 (mathOp -> MINUSEQUAL .)
    TILDA           reduce using rule 71 (mathOp -> MINUSEQUAL .)
    MINUS           reduce using rule 71 (mathOp -> MINUSEQUAL .)
    TIMES           reduce using rule 71 (mathOp -> MINUSEQUAL .)
    QUESTION_MARK   reduce using rule 71 (mathOp -> MINUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 71 (mathOp -> MINUSEQUAL .)
    CONST_KW        reduce using rule 71 (mathOp -> MINUSEQUAL .)
    TRUE_KW         reduce using rule 71 (mathOp -> MINUSEQUAL .)
    FALSE_KW        reduce using rule 71 (mathOp -> MINUSEQUAL .)


state 134

    (72) mathOp -> TIMESEQUAL .

    NUMBER          reduce using rule 72 (mathOp -> TIMESEQUAL .)
    VarName         reduce using rule 72 (mathOp -> TIMESEQUAL .)
    TILDA           reduce using rule 72 (mathOp -> TIMESEQUAL .)
    MINUS           reduce using rule 72 (mathOp -> TIMESEQUAL .)
    TIMES           reduce using rule 72 (mathOp -> TIMESEQUAL .)
    QUESTION_MARK   reduce using rule 72 (mathOp -> TIMESEQUAL .)
    OPENING_PARENTHESES reduce using rule 72 (mathOp -> TIMESEQUAL .)
    CONST_KW        reduce using rule 72 (mathOp -> TIMESEQUAL .)
    TRUE_KW         reduce using rule 72 (mathOp -> TIMESEQUAL .)
    FALSE_KW        reduce using rule 72 (mathOp -> TIMESEQUAL .)


state 135

    (73) mathOp -> DIVIDEEQUAL .

    NUMBER          reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    VarName         reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    TILDA           reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    MINUS           reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    TIMES           reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    QUESTION_MARK   reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    OPENING_PARENTHESES reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    CONST_KW        reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    TRUE_KW         reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    FALSE_KW        reduce using rule 73 (mathOp -> DIVIDEEQUAL .)


state 136

    (121) arguments -> allExpression .

    COMMA           reduce using rule 121 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 121 (arguments -> allExpression .)


state 137

    (119) args -> empty .

    CLOSING_PARENTHESES reduce using rule 119 (args -> empty .)


state 138

    (117) inalterable -> VarName OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 169


state 139

    (118) args -> arguments .
    (120) arguments -> arguments . COMMA allExpression

    CLOSING_PARENTHESES reduce using rule 118 (args -> arguments .)
    COMMA           shift and go to state 170


state 140

    (89) relExpression -> mathEXP compareType mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    LOGICAL_AND     reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    LOGICAL_OR      reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    AND             reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    OR              reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    COMMA           reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 86
    PERCENTAGE      shift and go to state 83


state 141

    (103) mathEXP -> mathEXP PERCENTAGE mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    MINUS           reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TIMES           reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    DIVIDE          reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    PERCENTAGE      reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESSEQUAL       reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATEREQUAL    reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    EQUALEQUAL      reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESS_THAN       reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATER_THAN    reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    NOTEQUAL        reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_AND     reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_OR      reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    AND             reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    OR              reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_BRACKET reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    SEMICOLON       reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    COMMA           reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)

  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! PERCENTAGE      [ shift and go to state 83 ]


state 142

    (99) mathEXP -> mathEXP PLUS mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    MINUS           reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LESSEQUAL       reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATEREQUAL    reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    EQUALEQUAL      reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LESS_THAN       reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATER_THAN    reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    NOTEQUAL        reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_AND     reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_OR      reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    AND             reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    OR              reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_BRACKET reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    SEMICOLON       reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    COMMA           reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 86
    PERCENTAGE      shift and go to state 83

  ! TIMES           [ reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 88 ]


state 143

    (102) mathEXP -> mathEXP DIVIDE mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    MINUS           reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TIMES           reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    DIVIDE          reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESSEQUAL       reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATEREQUAL    reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    EQUALEQUAL      reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESS_THAN       reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATER_THAN    reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    NOTEQUAL        reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_AND     reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_OR      reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    AND             reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    OR              reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_BRACKET reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    SEMICOLON       reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    COMMA           reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    PERCENTAGE      shift and go to state 83

  ! PERCENTAGE      [ reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 86 ]


state 144

    (100) mathEXP -> mathEXP MINUS mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    MINUS           reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LESSEQUAL       reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATEREQUAL    reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    EQUALEQUAL      reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LESS_THAN       reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATER_THAN    reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    NOTEQUAL        reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_AND     reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_OR      reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    AND             reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    OR              reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_BRACKET reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    SEMICOLON       reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    COMMA           reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 86
    PERCENTAGE      shift and go to state 83

  ! TIMES           [ reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 88 ]


state 145

    (101) mathEXP -> mathEXP TIMES mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    MINUS           reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    TIMES           reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    DIVIDE          reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LESSEQUAL       reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATEREQUAL    reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    EQUALEQUAL      reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LESS_THAN       reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATER_THAN    reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    NOTEQUAL        reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_AND     reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_OR      reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    AND             reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    OR              reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_BRACKET reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_PARENTHESES reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    SEMICOLON       reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    COMMA           reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    PERCENTAGE      shift and go to state 83

  ! PERCENTAGE      [ reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 86 ]


state 146

    (114) alterable -> alterable DOT VarName .

    OPENING_BRACKET reduce using rule 114 (alterable -> alterable DOT VarName .)
    DOT             reduce using rule 114 (alterable -> alterable DOT VarName .)
    PLUS            reduce using rule 114 (alterable -> alterable DOT VarName .)
    MINUS           reduce using rule 114 (alterable -> alterable DOT VarName .)
    TIMES           reduce using rule 114 (alterable -> alterable DOT VarName .)
    DIVIDE          reduce using rule 114 (alterable -> alterable DOT VarName .)
    PERCENTAGE      reduce using rule 114 (alterable -> alterable DOT VarName .)
    LESSEQUAL       reduce using rule 114 (alterable -> alterable DOT VarName .)
    GREATEREQUAL    reduce using rule 114 (alterable -> alterable DOT VarName .)
    EQUALEQUAL      reduce using rule 114 (alterable -> alterable DOT VarName .)
    LESS_THAN       reduce using rule 114 (alterable -> alterable DOT VarName .)
    GREATER_THAN    reduce using rule 114 (alterable -> alterable DOT VarName .)
    NOTEQUAL        reduce using rule 114 (alterable -> alterable DOT VarName .)
    CLOSING_BRACKET reduce using rule 114 (alterable -> alterable DOT VarName .)
    LOGICAL_AND     reduce using rule 114 (alterable -> alterable DOT VarName .)
    LOGICAL_OR      reduce using rule 114 (alterable -> alterable DOT VarName .)
    AND             reduce using rule 114 (alterable -> alterable DOT VarName .)
    OR              reduce using rule 114 (alterable -> alterable DOT VarName .)
    CLOSING_PARENTHESES reduce using rule 114 (alterable -> alterable DOT VarName .)
    SEMICOLON       reduce using rule 114 (alterable -> alterable DOT VarName .)
    COMMA           reduce using rule 114 (alterable -> alterable DOT VarName .)
    PLUSPLUS        reduce using rule 114 (alterable -> alterable DOT VarName .)
    MINUSMINUS      reduce using rule 114 (alterable -> alterable DOT VarName .)
    EQUAL           reduce using rule 114 (alterable -> alterable DOT VarName .)
    PLUSEQUAL       reduce using rule 114 (alterable -> alterable DOT VarName .)
    MINUSEQUAL      reduce using rule 114 (alterable -> alterable DOT VarName .)
    TIMESEQUAL      reduce using rule 114 (alterable -> alterable DOT VarName .)
    DIVIDEEQUAL     reduce using rule 114 (alterable -> alterable DOT VarName .)


state 147

    (113) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 171


state 148

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 110
    OPENING_BRACE   shift and go to state 108
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 102
    GIVEBACK_KW     shift and go to state 111
    CONTINUE_KW     shift and go to state 106
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    iterationPhrase                shift and go to state 101
    returnPhrase                   shift and go to state 100
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    statement                      shift and go to state 172
    factor                         shift and go to state 45
    mathEXP                        shift and go to state 49
    continue                       shift and go to state 107
    allExpression                  shift and go to state 103
    unaryEachExpression            shift and go to state 52
    compoundPhrase                 shift and go to state 109
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    phrase                         shift and go to state 112
    unaryExpression                shift and go to state 57

state 149

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 110
    OPENING_BRACE   shift and go to state 108
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 102
    GIVEBACK_KW     shift and go to state 111
    CONTINUE_KW     shift and go to state 106
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    iterationPhrase                shift and go to state 101
    returnPhrase                   shift and go to state 100
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    statement                      shift and go to state 173
    factor                         shift and go to state 45
    mathEXP                        shift and go to state 49
    continue                       shift and go to state 107
    allExpression                  shift and go to state 103
    unaryEachExpression            shift and go to state 52
    compoundPhrase                 shift and go to state 109
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    phrase                         shift and go to state 112
    unaryExpression                shift and go to state 57

state 150

    (38) paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .

    COMMA           reduce using rule 38 (paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 38 (paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 38 (paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .)


state 151

    (33) paramList -> paramList COMMA paramId .

    COMMA           reduce using rule 33 (paramList -> paramList COMMA paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramList COMMA paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramList COMMA paramId .)


state 152

    (61) returnPhrase -> COMEBACK_KW SEMICOLON .

    CLOSING_BRACE   reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VOID_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VarName         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILDA           reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MINUS           reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIMES           reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE_KW        reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 153

    (56) phrase -> allExpression SEMICOLON .

    VOID_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    VarName         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TILDA           reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    MINUS           reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TIMES           reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 56 (phrase -> allExpression SEMICOLON .)


state 154

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    VarName         shift and go to state 48
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 174
    factor                         shift and go to state 45
    unaryop                        shift and go to state 55
    unaryEachExpression            shift and go to state 52
    alterable                      shift and go to state 53
    relExpression                  shift and go to state 54
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 155

    (63) continue -> CONTINUE_KW SEMICOLON .

    VOID_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    VarName         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TILDA           reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    MINUS           reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TIMES           reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE_KW        reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)


state 156

    (36) localDeclarations -> empty .

    STATIC_KW       reduce using rule 36 (localDeclarations -> empty .)
    BOOLEAN_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHARACTER_KW    reduce using rule 36 (localDeclarations -> empty .)
    INTEGER_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHAR_KW         reduce using rule 36 (localDeclarations -> empty .)
    BOOL_KW         reduce using rule 36 (localDeclarations -> empty .)
    INT_KW          reduce using rule 36 (localDeclarations -> empty .)
    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> empty .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    TILL_KW         reduce using rule 36 (localDeclarations -> empty .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> empty .)
    VarName         reduce using rule 36 (localDeclarations -> empty .)
    TILDA           reduce using rule 36 (localDeclarations -> empty .)
    MINUS           reduce using rule 36 (localDeclarations -> empty .)
    TIMES           reduce using rule 36 (localDeclarations -> empty .)
    QUESTION_MARK   reduce using rule 36 (localDeclarations -> empty .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> empty .)
    CONST_KW        reduce using rule 36 (localDeclarations -> empty .)
    TRUE_KW         reduce using rule 36 (localDeclarations -> empty .)
    FALSE_KW        reduce using rule 36 (localDeclarations -> empty .)


state 157

    (53) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (35) localDeclarations -> localDeclarations . ScopedVariableDec
    (54) statementList -> . statementList statement
    (55) statementList -> . empty
    (9) ScopedVariableDec -> . scopedSpecifier variableList
    (125) empty -> .
    (16) scopedSpecifier -> . STATIC_KW type
    (17) scopedSpecifier -> . type
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    OPENING_BRACE   reduce using rule 125 (empty -> .)
    TILL_KW         reduce using rule 125 (empty -> .)
    COMEBACK_KW     reduce using rule 125 (empty -> .)
    GIVEBACK_KW     reduce using rule 125 (empty -> .)
    CONTINUE_KW     reduce using rule 125 (empty -> .)
    VarName         reduce using rule 125 (empty -> .)
    TILDA           reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    TIMES           reduce using rule 125 (empty -> .)
    QUESTION_MARK   reduce using rule 125 (empty -> .)
    OPENING_PARENTHESES reduce using rule 125 (empty -> .)
    CONST_KW        reduce using rule 125 (empty -> .)
    TRUE_KW         reduce using rule 125 (empty -> .)
    FALSE_KW        reduce using rule 125 (empty -> .)
    STATIC_KW       shift and go to state 180
    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 178
    empty                          shift and go to state 175
    statementList                  shift and go to state 176
    ScopedVariableDec              shift and go to state 177
    scopedSpecifier                shift and go to state 179

state 158

    (62) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 181


state 159

    (84) eachExpression -> eachExpression AND ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    AND             reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    OR              reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    COMMA           reduce using rule 84 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 160

    (83) eachExpression -> eachExpression AND THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    OR              reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    COMMA           reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 71
    AND             shift and go to state 68

  ! LOGICAL_AND     [ reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 83 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! OR              [ shift and go to state 70 ]


state 161

    (87) eachExpression -> eachExpression OR ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    AND             reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    OR              reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    COMMA           reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 162

    (86) eachExpression -> eachExpression OR THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    OR              reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    COMMA           reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 71
    AND             shift and go to state 68

  ! LOGICAL_AND     [ reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 86 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! OR              [ shift and go to state 70 ]


state 163

    (76) eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    AND             reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    OR              reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    COMMA           reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 164

    (75) eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    OR              reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    COMMA           reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 71
    AND             shift and go to state 68

  ! LOGICAL_AND     [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! OR              [ shift and go to state 70 ]


state 165

    (79) eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    AND             reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    OR              reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    COMMA           reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 71 ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 70 ]


state 166

    (78) eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    OR              reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    COMMA           reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 71
    AND             shift and go to state 68

  ! LOGICAL_AND     [ reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 72 ]
  ! OR              [ shift and go to state 70 ]


state 167

    (68) allExpression -> alterable mathOp NUMBER .

    CLOSING_PARENTHESES reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)
    COMMA           reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)
    SEMICOLON       reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)
    CLOSING_BRACKET reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)


state 168

    (64) allExpression -> alterable mathOp allExpression .

    CLOSING_PARENTHESES reduce using rule 64 (allExpression -> alterable mathOp allExpression .)
    COMMA           reduce using rule 64 (allExpression -> alterable mathOp allExpression .)
    SEMICOLON       reduce using rule 64 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 64 (allExpression -> alterable mathOp allExpression .)


state 169

    (117) inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PLUS            reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MINUS           reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIMES           reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND             reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR              reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMMA           reduce using rule 117 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 170

    (120) arguments -> arguments COMMA . allExpression
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    allExpression                  shift and go to state 182
    constant                       shift and go to state 42
    unaryEachExpression            shift and go to state 52
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    factor                         shift and go to state 45
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    mathEXP                        shift and go to state 49
    unaryExpression                shift and go to state 57

state 171

    (113) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    OPENING_BRACKET reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DOT             reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUS            reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDE          reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PERCENTAGE      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESSEQUAL       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATEREQUAL    reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUALEQUAL      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESS_THAN       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATER_THAN    reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NOTEQUAL        reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_AND     reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_OR      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND             reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR              reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSPLUS        reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSMINUS      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUAL           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSEQUAL       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSEQUAL      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMESEQUAL      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDEEQUAL     reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 172

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 183


state 173

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 184


state 174

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (82) eachExpression -> eachExpression . AND eachExpression
    (83) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (84) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (85) eachExpression -> eachExpression . OR eachExpression
    (86) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 185
    LOGICAL_AND     shift and go to state 71
    LOGICAL_OR      shift and go to state 72
    AND             shift and go to state 68
    OR              shift and go to state 70


state 175

    (55) statementList -> empty .

    CLOSING_BRACE   reduce using rule 55 (statementList -> empty .)
    SEMICOLON       reduce using rule 55 (statementList -> empty .)
    OPENING_BRACE   reduce using rule 55 (statementList -> empty .)
    TILL_KW         reduce using rule 55 (statementList -> empty .)
    COMEBACK_KW     reduce using rule 55 (statementList -> empty .)
    GIVEBACK_KW     reduce using rule 55 (statementList -> empty .)
    CONTINUE_KW     reduce using rule 55 (statementList -> empty .)
    VarName         reduce using rule 55 (statementList -> empty .)
    TILDA           reduce using rule 55 (statementList -> empty .)
    MINUS           reduce using rule 55 (statementList -> empty .)
    TIMES           reduce using rule 55 (statementList -> empty .)
    QUESTION_MARK   reduce using rule 55 (statementList -> empty .)
    OPENING_PARENTHESES reduce using rule 55 (statementList -> empty .)
    CONST_KW        reduce using rule 55 (statementList -> empty .)
    TRUE_KW         reduce using rule 55 (statementList -> empty .)
    FALSE_KW        reduce using rule 55 (statementList -> empty .)


state 176

    (53) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (54) statementList -> statementList . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    CLOSING_BRACE   shift and go to state 186
    SEMICOLON       shift and go to state 110
    OPENING_BRACE   shift and go to state 108
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 102
    GIVEBACK_KW     shift and go to state 111
    CONTINUE_KW     shift and go to state 106
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    iterationPhrase                shift and go to state 101
    returnPhrase                   shift and go to state 100
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    statement                      shift and go to state 187
    factor                         shift and go to state 45
    mathEXP                        shift and go to state 49
    continue                       shift and go to state 107
    allExpression                  shift and go to state 103
    unaryEachExpression            shift and go to state 52
    compoundPhrase                 shift and go to state 109
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    phrase                         shift and go to state 112
    unaryExpression                shift and go to state 57

state 177

    (35) localDeclarations -> localDeclarations ScopedVariableDec .

    STATIC_KW       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INT_KW          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    VarName         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILDA           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    MINUS           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TIMES           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QUESTION_MARK   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONST_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TRUE_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    FALSE_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 178

    (17) scopedSpecifier -> type .

    VarName         reduce using rule 17 (scopedSpecifier -> type .)


state 179

    (9) ScopedVariableDec -> scopedSpecifier . variableList
    (10) variableList -> . variableList COMMA varInitialization
    (11) variableList -> . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . VarName

    VarName         shift and go to state 31

    variableList                   shift and go to state 188
    varInitialization              shift and go to state 17
    varForm                        shift and go to state 16

state 180

    (16) scopedSpecifier -> STATIC_KW . type
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 9
    CHARACTER_KW    shift and go to state 4
    INTEGER_KW      shift and go to state 5
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 11
    INT_KW          shift and go to state 3

    type                           shift and go to state 189

state 181

    (62) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VOID_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VarName         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILDA           reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MINUS           reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIMES           reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 182

    (120) arguments -> arguments COMMA allExpression .

    COMMA           reduce using rule 120 (arguments -> arguments COMMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 120 (arguments -> arguments COMMA allExpression .)


state 183

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 184

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 185

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (112) alterable -> . VarName
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . unaryEachExpression
    (82) eachExpression -> . eachExpression AND eachExpression
    (83) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (84) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (85) eachExpression -> . eachExpression OR eachExpression
    (86) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (81) unaryEachExpression -> . TILDA eachExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 110
    OPENING_BRACE   shift and go to state 108
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 102
    GIVEBACK_KW     shift and go to state 111
    CONTINUE_KW     shift and go to state 106
    VarName         shift and go to state 74
    TILDA           shift and go to state 41
    MINUS           shift and go to state 50
    TIMES           shift and go to state 56
    QUESTION_MARK   shift and go to state 39
    OPENING_PARENTHESES shift and go to state 46
    CONST_KW        shift and go to state 40
    TRUE_KW         shift and go to state 47
    FALSE_KW        shift and go to state 51

    iterationPhrase                shift and go to state 101
    returnPhrase                   shift and go to state 100
    constant                       shift and go to state 42
    inalterable                    shift and go to state 43
    eachExpression                 shift and go to state 73
    statement                      shift and go to state 190
    factor                         shift and go to state 45
    mathEXP                        shift and go to state 49
    continue                       shift and go to state 107
    allExpression                  shift and go to state 103
    unaryEachExpression            shift and go to state 52
    compoundPhrase                 shift and go to state 109
    relExpression                  shift and go to state 54
    unaryop                        shift and go to state 55
    alterable                      shift and go to state 76
    phrase                         shift and go to state 112
    unaryExpression                shift and go to state 57

state 186

    (53) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    CLOSING_BRACE   reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VarName         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILDA           reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MINUS           reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIMES           reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QUESTION_MARK   reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE_KW        reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 187

    (54) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 54 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 54 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 54 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 54 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 54 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 54 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 54 (statementList -> statementList statement .)
    VarName         reduce using rule 54 (statementList -> statementList statement .)
    TILDA           reduce using rule 54 (statementList -> statementList statement .)
    MINUS           reduce using rule 54 (statementList -> statementList statement .)
    TIMES           reduce using rule 54 (statementList -> statementList statement .)
    QUESTION_MARK   reduce using rule 54 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 54 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 54 (statementList -> statementList statement .)
    TRUE_KW         reduce using rule 54 (statementList -> statementList statement .)
    FALSE_KW        reduce using rule 54 (statementList -> statementList statement .)


state 188

    (9) ScopedVariableDec -> scopedSpecifier variableList .
    (10) variableList -> variableList . COMMA varInitialization

    STATIC_KW       reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOLEAN_KW      reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHARACTER_KW    reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    INTEGER_KW      reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHAR_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOL_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    INT_KW          reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CLOSING_BRACE   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    SEMICOLON       reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_BRACE   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILL_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMEBACK_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    GIVEBACK_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONTINUE_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    VarName         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILDA           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    MINUS           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TIMES           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    QUESTION_MARK   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_PARENTHESES reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONST_KW        reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TRUE_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    FALSE_KW        reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMMA           shift and go to state 22


state 189

    (16) scopedSpecifier -> STATIC_KW type .

    VarName         reduce using rule 16 (scopedSpecifier -> STATIC_KW type .)


state 190

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    VarName         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILDA           reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MINUS           reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIMES           reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QUESTION_MARK   reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE_KW        reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)

