Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrletter -> NUMBER
Rule 3     numOrletter -> LETTER
Rule 4     list -> list declaration
Rule 5     list -> declaration
Rule 6     declaration -> function
Rule 7     declaration -> varDeclaration
Rule 8     varDeclaration -> type variableList SEMICOLON
Rule 9     ScopedVariableDec -> scopedSpecifier variableList
Rule 10    variableList -> variableList COMMA varInitialization
Rule 11    variableList -> varInitialization
Rule 12    varInitialization -> varForm
Rule 13    varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 14    varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
Rule 15    varForm -> LETTER
Rule 16    scopedSpecifier -> STATIC_KW type
Rule 17    scopedSpecifier -> type
Rule 18    type -> BOOLEAN_KW
Rule 19    type -> CHARACTER_KW
Rule 20    type -> INTEGER_KW
Rule 21    type -> CHAR_KW
Rule 22    type -> BOOL_KW
Rule 23    type -> INT_KW
Rule 24    function -> VOID_KW
Rule 25    function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 26    function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 27    parameter -> listOfParameters
Rule 28    parameter -> empty
Rule 29    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 30    listOfParameters -> paramTypeList
Rule 31    paramTypeList -> type paramList
Rule 32    paramList -> paramList COMMA paramId
Rule 33    paramList -> paramId
Rule 34    localDeclarations -> localDeclarations ScopedVariableDec
Rule 35    localDeclarations -> empty
Rule 36    paramId -> LETTER numOrletter
Rule 37    paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET
Rule 38    statement -> phrase
Rule 39    statement -> compoundPhrase
Rule 40    statement -> selectPhrase
Rule 41    statement -> iterationPhrase
Rule 42    statement -> returnPhrase
Rule 43    statement -> continue
Rule 44    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 45    statementList -> statementList statement
Rule 46    statementList -> empty
Rule 47    phrase -> allExpression SEMICOLON
Rule 48    phrase -> SEMICOLON
Rule 49    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
Rule 50    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
Rule 51    ifBody -> statement
Rule 52    ifBody -> statement OTHER_KW statement
Rule 53    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 54    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 55    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 56    returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON
Rule 57    continue -> CONTINUE_KW SEMICOLON
Rule 58    allExpression -> alterable mathOp allExpression
Rule 59    allExpression -> alterable PLUSPLUS
Rule 60    allExpression -> alterable MINUSMINUS
Rule 61    allExpression -> eachExpression
Rule 62    allExpression -> alterable mathOp alterable
Rule 63    mathOp -> EQUAL
Rule 64    mathOp -> PLUSEQUAL
Rule 65    mathOp -> MINUSEQUAL
Rule 66    mathOp -> TIMESEQUAL
Rule 67    mathOp -> DIVIDEEQUAL
Rule 68    eachExpression -> eachExpression LOGICAL_AND eachExpression
Rule 69    eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression
Rule 70    eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression
Rule 71    eachExpression -> eachExpression LOGICAL_OR eachExpression
Rule 72    eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression
Rule 73    eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression
Rule 74    eachExpression -> eachExpression TILDA eachExpression
Rule 75    eachExpression -> eachExpression TILDA THEN_KW eachExpression
Rule 76    eachExpression -> TILDA eachExpression
Rule 77    eachExpression -> eachExpression TILDA ELSE_KW eachExpression
Rule 78    eachExpression -> eachExpression AND eachExpression
Rule 79    eachExpression -> eachExpression AND THEN_KW eachExpression
Rule 80    eachExpression -> eachExpression AND ELSE_KW eachExpression
Rule 81    eachExpression -> eachExpression OR eachExpression
Rule 82    eachExpression -> eachExpression OR THEN_KW eachExpression
Rule 83    eachExpression -> eachExpression OR ELSE_KW eachExpression
Rule 84    eachExpression -> relExpression
Rule 85    relExpression -> mathEXP compareType mathEXP
Rule 86    relExpression -> mathEXP
Rule 87    compareType -> equal
Rule 88    compareType -> nonEqual
Rule 89    equal -> LESSEQUAL
Rule 90    equal -> GREATEREQUAL
Rule 91    equal -> EQUALEQUAL
Rule 92    nonEqual -> LESS_THAN
Rule 93    nonEqual -> GREATER_THAN
Rule 94    nonEqual -> NOTEQUAL
Rule 95    mathEXP -> mathEXP PLUS mathEXP
Rule 96    mathEXP -> mathEXP MINUS mathEXP
Rule 97    mathEXP -> mathEXP TIMES mathEXP
Rule 98    mathEXP -> mathEXP DIVIDE mathEXP
Rule 99    mathEXP -> mathEXP PERCENTAGE mathEXP
Rule 100   mathEXP -> unaryExpression
Rule 101   unaryExpression -> unaryop unaryExpression
Rule 102   unaryExpression -> factor
Rule 103   unaryop -> MINUS
Rule 104   unaryop -> TIMES
Rule 105   unaryop -> QUESTION_MARK
Rule 106   factor -> inalterable
Rule 107   factor -> alterable
Rule 108   alterable -> LETTER numOrletter
Rule 109   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 110   alterable -> alterable DOT LETTER
Rule 111   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 112   inalterable -> constant
Rule 113   inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 114   args -> arguments
Rule 115   args -> empty
Rule 116   arguments -> arguments COMMA allExpression
Rule 117   arguments -> allExpression
Rule 118   constant -> CONST_KW
Rule 119   constant -> TRUE_KW
Rule 120   constant -> FALSE_KW
Rule 121   empty -> <empty>

Terminals, with rules where they appear

AND                  : 78 79 80
BOOLEAN_KW           : 18
BOOL_KW              : 22
CHARACTER_KW         : 19
CHAR_KW              : 21
CLOSING_BRACE        : 25 44 50
CLOSING_BRACKET      : 14 37 109
CLOSING_PARENTHESES  : 13 25 26 49 50 53 111 113
COMEBACK_KW          : 54
COMMA                : 10 32 116
COMMENT              : 
CONST_KW             : 118
CONTINUE_KW          : 57
DIVIDE               : 98
DIVIDEEQUAL          : 67
DOT                  : 110
DOUBLE_DOT           : 13
ELSE_KW              : 70 73 77 80 83
EQUAL                : 63
EQUALEQUAL           : 91
FALSE_KW             : 120
GIVEBACK_KW          : 55 56
GREATEREQUAL         : 90
GREATER_THAN         : 93
IF_KW                : 49 50
INTEGER_KW           : 20
INT_KW               : 23
LESSEQUAL            : 89
LESS_THAN            : 92
LETTER               : 3 14 15 26 36 37 108 110 113
LOGICAL_AND          : 68 69 70
LOGICAL_OR           : 71 72 73
MINUS                : 96 103
MINUSEQUAL           : 65
MINUSMINUS           : 60
NOTEQUAL             : 94
NUMBER               : 2
OPENING_BRACE        : 25 44 50
OPENING_BRACKET      : 14 37 109
OPENING_PARENTHESES  : 13 25 26 49 50 53 111 113
OR                   : 81 82 83
OTHER_KW             : 52
PERCENTAGE           : 99
PLUS                 : 95
PLUSEQUAL            : 64
PLUSPLUS             : 59
QUESTION_MARK        : 105
SEMICOLON            : 8 29 47 48 54 55 56 57
STATIC_KW            : 16
THEN_KW              : 69 72 75 79 82
TILDA                : 74 75 76 77
TILL_KW              : 53
TIMES                : 97 104
TIMESEQUAL           : 66
TRUE_KW              : 119
VOID_KW              : 24
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 34
allExpression        : 47 55 58 109 111 116 117
alterable            : 58 59 60 62 62 107 109 110
args                 : 113
arguments            : 114 116
compareType          : 85
compoundPhrase       : 39
constant             : 112
continue             : 43
declaration          : 4 5
eachExpression       : 13 14 49 50 53 61 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83
empty                : 28 35 46 115
equal                : 87
factor               : 102
function             : 6
ifBody               : 49 50 50
inalterable          : 106
iterationPhrase      : 41
list                 : 1 4
listOfParameters     : 27 29
localDeclarations    : 34 44
mathEXP              : 85 85 86 95 95 96 96 97 97 98 98 99 99
mathOp               : 58 62
nonEqual             : 88
numOrletter          : 14 25 26 36 37 56 108 113
paramId              : 32 33
paramList            : 31 32
paramTypeList        : 29 30
parameter            : 25 26
phrase               : 38
program              : 0
relExpression        : 84
returnPhrase         : 42
scopedSpecifier      : 9
selectPhrase         : 40
statement            : 25 26 45 51 52 52 53
statementList        : 44 45
type                 : 8 16 17 26 31
unaryExpression      : 100 101
unaryop              : 101
varDeclaration       : 7
varForm              : 12 13
varInitialization    : 10 11
variableList         : 8 9 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (4) list -> . list declaration
    (5) list -> . declaration
    (6) declaration -> . function
    (7) declaration -> . varDeclaration
    (24) function -> . VOID_KW
    (25) function -> . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (26) function -> . type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> . type variableList SEMICOLON
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    VOID_KW         shift and go to state 10
    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11
    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    list                           shift and go to state 15
    numOrletter                    shift and go to state 8
    type                           shift and go to state 9
    declaration                    shift and go to state 4
    varDeclaration                 shift and go to state 14
    program                        shift and go to state 6
    function                       shift and go to state 16

state 1

    (23) type -> INT_KW .

    LETTER          reduce using rule 23 (type -> INT_KW .)


state 2

    (18) type -> BOOLEAN_KW .

    LETTER          reduce using rule 18 (type -> BOOLEAN_KW .)


state 3

    (20) type -> INTEGER_KW .

    LETTER          reduce using rule 20 (type -> INTEGER_KW .)


state 4

    (5) list -> declaration .

    VOID_KW         reduce using rule 5 (list -> declaration .)
    NUMBER          reduce using rule 5 (list -> declaration .)
    LETTER          reduce using rule 5 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> declaration .)
    INTEGER_KW      reduce using rule 5 (list -> declaration .)
    CHAR_KW         reduce using rule 5 (list -> declaration .)
    BOOL_KW         reduce using rule 5 (list -> declaration .)
    INT_KW          reduce using rule 5 (list -> declaration .)
    $end            reduce using rule 5 (list -> declaration .)


state 5

    (22) type -> BOOL_KW .

    LETTER          reduce using rule 22 (type -> BOOL_KW .)


state 6

    (0) S' -> program .



state 7

    (2) numOrletter -> NUMBER .

    OPENING_BRACKET reduce using rule 2 (numOrletter -> NUMBER .)
    COMMA           reduce using rule 2 (numOrletter -> NUMBER .)
    SEMICOLON       reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_PARENTHESES reduce using rule 2 (numOrletter -> NUMBER .)
    OPENING_PARENTHESES reduce using rule 2 (numOrletter -> NUMBER .)
    PLUSPLUS        reduce using rule 2 (numOrletter -> NUMBER .)
    MINUSMINUS      reduce using rule 2 (numOrletter -> NUMBER .)
    DOT             reduce using rule 2 (numOrletter -> NUMBER .)
    EQUAL           reduce using rule 2 (numOrletter -> NUMBER .)
    PLUSEQUAL       reduce using rule 2 (numOrletter -> NUMBER .)
    MINUSEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    TIMESEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    DIVIDEEQUAL     reduce using rule 2 (numOrletter -> NUMBER .)
    PLUS            reduce using rule 2 (numOrletter -> NUMBER .)
    MINUS           reduce using rule 2 (numOrletter -> NUMBER .)
    TIMES           reduce using rule 2 (numOrletter -> NUMBER .)
    DIVIDE          reduce using rule 2 (numOrletter -> NUMBER .)
    PERCENTAGE      reduce using rule 2 (numOrletter -> NUMBER .)
    LESSEQUAL       reduce using rule 2 (numOrletter -> NUMBER .)
    GREATEREQUAL    reduce using rule 2 (numOrletter -> NUMBER .)
    EQUALEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    LESS_THAN       reduce using rule 2 (numOrletter -> NUMBER .)
    GREATER_THAN    reduce using rule 2 (numOrletter -> NUMBER .)
    NOTEQUAL        reduce using rule 2 (numOrletter -> NUMBER .)
    LOGICAL_AND     reduce using rule 2 (numOrletter -> NUMBER .)
    LOGICAL_OR      reduce using rule 2 (numOrletter -> NUMBER .)
    TILDA           reduce using rule 2 (numOrletter -> NUMBER .)
    AND             reduce using rule 2 (numOrletter -> NUMBER .)
    OR              reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_BRACKET reduce using rule 2 (numOrletter -> NUMBER .)


state 8

    (25) function -> numOrletter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 17


state 9

    (26) function -> type . LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> type . variableList SEMICOLON
    (10) variableList -> . variableList COMMA varInitialization
    (11) variableList -> . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . LETTER

    LETTER          shift and go to state 19

    varForm                        shift and go to state 18
    varInitialization              shift and go to state 20
    variableList                   shift and go to state 21

state 10

    (24) function -> VOID_KW .

    VOID_KW         reduce using rule 24 (function -> VOID_KW .)
    NUMBER          reduce using rule 24 (function -> VOID_KW .)
    LETTER          reduce using rule 24 (function -> VOID_KW .)
    BOOLEAN_KW      reduce using rule 24 (function -> VOID_KW .)
    CHARACTER_KW    reduce using rule 24 (function -> VOID_KW .)
    INTEGER_KW      reduce using rule 24 (function -> VOID_KW .)
    CHAR_KW         reduce using rule 24 (function -> VOID_KW .)
    BOOL_KW         reduce using rule 24 (function -> VOID_KW .)
    INT_KW          reduce using rule 24 (function -> VOID_KW .)
    $end            reduce using rule 24 (function -> VOID_KW .)


state 11

    (3) numOrletter -> LETTER .

    OPENING_BRACKET reduce using rule 3 (numOrletter -> LETTER .)
    COMMA           reduce using rule 3 (numOrletter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 3 (numOrletter -> LETTER .)
    OPENING_PARENTHESES reduce using rule 3 (numOrletter -> LETTER .)
    PLUSPLUS        reduce using rule 3 (numOrletter -> LETTER .)
    MINUSMINUS      reduce using rule 3 (numOrletter -> LETTER .)
    DOT             reduce using rule 3 (numOrletter -> LETTER .)
    EQUAL           reduce using rule 3 (numOrletter -> LETTER .)
    PLUSEQUAL       reduce using rule 3 (numOrletter -> LETTER .)
    MINUSEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    TIMESEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    DIVIDEEQUAL     reduce using rule 3 (numOrletter -> LETTER .)
    PLUS            reduce using rule 3 (numOrletter -> LETTER .)
    MINUS           reduce using rule 3 (numOrletter -> LETTER .)
    TIMES           reduce using rule 3 (numOrletter -> LETTER .)
    DIVIDE          reduce using rule 3 (numOrletter -> LETTER .)
    PERCENTAGE      reduce using rule 3 (numOrletter -> LETTER .)
    LESSEQUAL       reduce using rule 3 (numOrletter -> LETTER .)
    GREATEREQUAL    reduce using rule 3 (numOrletter -> LETTER .)
    EQUALEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    LESS_THAN       reduce using rule 3 (numOrletter -> LETTER .)
    GREATER_THAN    reduce using rule 3 (numOrletter -> LETTER .)
    NOTEQUAL        reduce using rule 3 (numOrletter -> LETTER .)
    LOGICAL_AND     reduce using rule 3 (numOrletter -> LETTER .)
    LOGICAL_OR      reduce using rule 3 (numOrletter -> LETTER .)
    TILDA           reduce using rule 3 (numOrletter -> LETTER .)
    AND             reduce using rule 3 (numOrletter -> LETTER .)
    OR              reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_BRACKET reduce using rule 3 (numOrletter -> LETTER .)


state 12

    (21) type -> CHAR_KW .

    LETTER          reduce using rule 21 (type -> CHAR_KW .)


state 13

    (19) type -> CHARACTER_KW .

    LETTER          reduce using rule 19 (type -> CHARACTER_KW .)


state 14

    (7) declaration -> varDeclaration .

    VOID_KW         reduce using rule 7 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 7 (declaration -> varDeclaration .)
    LETTER          reduce using rule 7 (declaration -> varDeclaration .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> varDeclaration .)
    CHARACTER_KW    reduce using rule 7 (declaration -> varDeclaration .)
    INTEGER_KW      reduce using rule 7 (declaration -> varDeclaration .)
    CHAR_KW         reduce using rule 7 (declaration -> varDeclaration .)
    BOOL_KW         reduce using rule 7 (declaration -> varDeclaration .)
    INT_KW          reduce using rule 7 (declaration -> varDeclaration .)
    $end            reduce using rule 7 (declaration -> varDeclaration .)


state 15

    (1) program -> list .
    (4) list -> list . declaration
    (6) declaration -> . function
    (7) declaration -> . varDeclaration
    (24) function -> . VOID_KW
    (25) function -> . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (26) function -> . type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> . type variableList SEMICOLON
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 10
    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11
    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    numOrletter                    shift and go to state 8
    type                           shift and go to state 9
    declaration                    shift and go to state 22
    varDeclaration                 shift and go to state 14
    function                       shift and go to state 16

state 16

    (6) declaration -> function .

    VOID_KW         reduce using rule 6 (declaration -> function .)
    NUMBER          reduce using rule 6 (declaration -> function .)
    LETTER          reduce using rule 6 (declaration -> function .)
    BOOLEAN_KW      reduce using rule 6 (declaration -> function .)
    CHARACTER_KW    reduce using rule 6 (declaration -> function .)
    INTEGER_KW      reduce using rule 6 (declaration -> function .)
    CHAR_KW         reduce using rule 6 (declaration -> function .)
    BOOL_KW         reduce using rule 6 (declaration -> function .)
    INT_KW          reduce using rule 6 (declaration -> function .)
    $end            reduce using rule 6 (declaration -> function .)


state 17

    (25) function -> numOrletter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (27) parameter -> . listOfParameters
    (28) parameter -> . empty
    (29) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (30) listOfParameters -> . paramTypeList
    (121) empty -> .
    (31) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 121 (empty -> .)
    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    paramTypeList                  shift and go to state 23
    type                           shift and go to state 26
    parameter                      shift and go to state 24
    empty                          shift and go to state 25
    listOfParameters               shift and go to state 27

state 18

    (12) varInitialization -> varForm .
    (13) varInitialization -> varForm . DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    COMMA           reduce using rule 12 (varInitialization -> varForm .)
    STATIC_KW       reduce using rule 12 (varInitialization -> varForm .)
    BOOLEAN_KW      reduce using rule 12 (varInitialization -> varForm .)
    CHARACTER_KW    reduce using rule 12 (varInitialization -> varForm .)
    INTEGER_KW      reduce using rule 12 (varInitialization -> varForm .)
    CHAR_KW         reduce using rule 12 (varInitialization -> varForm .)
    BOOL_KW         reduce using rule 12 (varInitialization -> varForm .)
    INT_KW          reduce using rule 12 (varInitialization -> varForm .)
    CLOSING_BRACE   reduce using rule 12 (varInitialization -> varForm .)
    SEMICOLON       reduce using rule 12 (varInitialization -> varForm .)
    OPENING_BRACE   reduce using rule 12 (varInitialization -> varForm .)
    IF_KW           reduce using rule 12 (varInitialization -> varForm .)
    TILL_KW         reduce using rule 12 (varInitialization -> varForm .)
    COMEBACK_KW     reduce using rule 12 (varInitialization -> varForm .)
    GIVEBACK_KW     reduce using rule 12 (varInitialization -> varForm .)
    CONTINUE_KW     reduce using rule 12 (varInitialization -> varForm .)
    LETTER          reduce using rule 12 (varInitialization -> varForm .)
    TILDA           reduce using rule 12 (varInitialization -> varForm .)
    MINUS           reduce using rule 12 (varInitialization -> varForm .)
    TIMES           reduce using rule 12 (varInitialization -> varForm .)
    QUESTION_MARK   reduce using rule 12 (varInitialization -> varForm .)
    OPENING_PARENTHESES reduce using rule 12 (varInitialization -> varForm .)
    CONST_KW        reduce using rule 12 (varInitialization -> varForm .)
    TRUE_KW         reduce using rule 12 (varInitialization -> varForm .)
    FALSE_KW        reduce using rule 12 (varInitialization -> varForm .)
    DOUBLE_DOT      shift and go to state 28


state 19

    (26) function -> type LETTER . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (14) varForm -> LETTER . numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> LETTER .
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER

    DOUBLE_DOT      reduce using rule 15 (varForm -> LETTER .)
    SEMICOLON       reduce using rule 15 (varForm -> LETTER .)
    COMMA           reduce using rule 15 (varForm -> LETTER .)
    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11

    numOrletter                    shift and go to state 29

state 20

    (11) variableList -> varInitialization .

    SEMICOLON       reduce using rule 11 (variableList -> varInitialization .)
    COMMA           reduce using rule 11 (variableList -> varInitialization .)
    STATIC_KW       reduce using rule 11 (variableList -> varInitialization .)
    BOOLEAN_KW      reduce using rule 11 (variableList -> varInitialization .)
    CHARACTER_KW    reduce using rule 11 (variableList -> varInitialization .)
    INTEGER_KW      reduce using rule 11 (variableList -> varInitialization .)
    CHAR_KW         reduce using rule 11 (variableList -> varInitialization .)
    BOOL_KW         reduce using rule 11 (variableList -> varInitialization .)
    INT_KW          reduce using rule 11 (variableList -> varInitialization .)
    CLOSING_BRACE   reduce using rule 11 (variableList -> varInitialization .)
    OPENING_BRACE   reduce using rule 11 (variableList -> varInitialization .)
    IF_KW           reduce using rule 11 (variableList -> varInitialization .)
    TILL_KW         reduce using rule 11 (variableList -> varInitialization .)
    COMEBACK_KW     reduce using rule 11 (variableList -> varInitialization .)
    GIVEBACK_KW     reduce using rule 11 (variableList -> varInitialization .)
    CONTINUE_KW     reduce using rule 11 (variableList -> varInitialization .)
    LETTER          reduce using rule 11 (variableList -> varInitialization .)
    TILDA           reduce using rule 11 (variableList -> varInitialization .)
    MINUS           reduce using rule 11 (variableList -> varInitialization .)
    TIMES           reduce using rule 11 (variableList -> varInitialization .)
    QUESTION_MARK   reduce using rule 11 (variableList -> varInitialization .)
    OPENING_PARENTHESES reduce using rule 11 (variableList -> varInitialization .)
    CONST_KW        reduce using rule 11 (variableList -> varInitialization .)
    TRUE_KW         reduce using rule 11 (variableList -> varInitialization .)
    FALSE_KW        reduce using rule 11 (variableList -> varInitialization .)


state 21

    (8) varDeclaration -> type variableList . SEMICOLON
    (10) variableList -> variableList . COMMA varInitialization

    SEMICOLON       shift and go to state 30
    COMMA           shift and go to state 31


state 22

    (4) list -> list declaration .

    VOID_KW         reduce using rule 4 (list -> list declaration .)
    NUMBER          reduce using rule 4 (list -> list declaration .)
    LETTER          reduce using rule 4 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 4 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 4 (list -> list declaration .)
    INTEGER_KW      reduce using rule 4 (list -> list declaration .)
    CHAR_KW         reduce using rule 4 (list -> list declaration .)
    BOOL_KW         reduce using rule 4 (list -> list declaration .)
    INT_KW          reduce using rule 4 (list -> list declaration .)
    $end            reduce using rule 4 (list -> list declaration .)


state 23

    (30) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> paramTypeList .)


state 24

    (25) function -> numOrletter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 32


state 25

    (28) parameter -> empty .

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> empty .)


state 26

    (31) paramTypeList -> type . paramList
    (32) paramList -> . paramList COMMA paramId
    (33) paramList -> . paramId
    (36) paramId -> . LETTER numOrletter
    (37) paramId -> . LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 34

    paramId                        shift and go to state 33
    paramList                      shift and go to state 35

state 27

    (27) parameter -> listOfParameters .
    (29) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 27 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 36


state 28

    (13) varInitialization -> varForm DOUBLE_DOT . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 37


state 29

    (26) function -> type LETTER numOrletter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (14) varForm -> LETTER numOrletter . OPENING_BRACKET eachExpression CLOSING_BRACKET

    OPENING_PARENTHESES shift and go to state 38
    OPENING_BRACKET shift and go to state 39


state 30

    (8) varDeclaration -> type variableList SEMICOLON .

    VOID_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    NUMBER          reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    LETTER          reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    CHAR_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    BOOL_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    INT_KW          reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    $end            reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)


state 31

    (10) variableList -> variableList COMMA . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . LETTER

    LETTER          shift and go to state 40

    varForm                        shift and go to state 18
    varInitialization              shift and go to state 41

state 32

    (25) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 42


state 33

    (33) paramList -> paramId .

    COMMA           reduce using rule 33 (paramList -> paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramId .)


state 34

    (36) paramId -> LETTER . numOrletter
    (37) paramId -> LETTER . numOrletter OPENING_BRACKET CLOSING_BRACKET
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER

    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11

    numOrletter                    shift and go to state 43

state 35

    (31) paramTypeList -> type paramList .
    (32) paramList -> paramList . COMMA paramId

    SEMICOLON       reduce using rule 31 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 31 (paramTypeList -> type paramList .)
    COMMA           shift and go to state 44


state 36

    (29) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (31) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    paramTypeList                  shift and go to state 45
    type                           shift and go to state 26

state 37

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 49
    unaryExpression                shift and go to state 57
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 38

    (26) function -> type LETTER numOrletter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (27) parameter -> . listOfParameters
    (28) parameter -> . empty
    (29) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (30) listOfParameters -> . paramTypeList
    (121) empty -> .
    (31) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 121 (empty -> .)
    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    paramTypeList                  shift and go to state 23
    type                           shift and go to state 26
    parameter                      shift and go to state 64
    empty                          shift and go to state 25
    listOfParameters               shift and go to state 27

state 39

    (14) varForm -> LETTER numOrletter OPENING_BRACKET . eachExpression CLOSING_BRACKET
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 65
    unaryExpression                shift and go to state 57
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 40

    (14) varForm -> LETTER . numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> LETTER .
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER

  ! shift/reduce conflict for LETTER resolved as shift
    DOUBLE_DOT      reduce using rule 15 (varForm -> LETTER .)
    COMMA           reduce using rule 15 (varForm -> LETTER .)
    STATIC_KW       reduce using rule 15 (varForm -> LETTER .)
    BOOLEAN_KW      reduce using rule 15 (varForm -> LETTER .)
    CHARACTER_KW    reduce using rule 15 (varForm -> LETTER .)
    INTEGER_KW      reduce using rule 15 (varForm -> LETTER .)
    CHAR_KW         reduce using rule 15 (varForm -> LETTER .)
    BOOL_KW         reduce using rule 15 (varForm -> LETTER .)
    INT_KW          reduce using rule 15 (varForm -> LETTER .)
    CLOSING_BRACE   reduce using rule 15 (varForm -> LETTER .)
    SEMICOLON       reduce using rule 15 (varForm -> LETTER .)
    OPENING_BRACE   reduce using rule 15 (varForm -> LETTER .)
    IF_KW           reduce using rule 15 (varForm -> LETTER .)
    TILL_KW         reduce using rule 15 (varForm -> LETTER .)
    COMEBACK_KW     reduce using rule 15 (varForm -> LETTER .)
    GIVEBACK_KW     reduce using rule 15 (varForm -> LETTER .)
    CONTINUE_KW     reduce using rule 15 (varForm -> LETTER .)
    TILDA           reduce using rule 15 (varForm -> LETTER .)
    MINUS           reduce using rule 15 (varForm -> LETTER .)
    TIMES           reduce using rule 15 (varForm -> LETTER .)
    QUESTION_MARK   reduce using rule 15 (varForm -> LETTER .)
    OPENING_PARENTHESES reduce using rule 15 (varForm -> LETTER .)
    CONST_KW        reduce using rule 15 (varForm -> LETTER .)
    TRUE_KW         reduce using rule 15 (varForm -> LETTER .)
    FALSE_KW        reduce using rule 15 (varForm -> LETTER .)
    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11

  ! LETTER          [ reduce using rule 15 (varForm -> LETTER .) ]

    numOrletter                    shift and go to state 66

state 41

    (10) variableList -> variableList COMMA varInitialization .

    SEMICOLON       reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    COMMA           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    STATIC_KW       reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    BOOLEAN_KW      reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CHARACTER_KW    reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    INTEGER_KW      reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CHAR_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    BOOL_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    INT_KW          reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CLOSING_BRACE   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    OPENING_BRACE   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    IF_KW           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TILL_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    COMEBACK_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    GIVEBACK_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CONTINUE_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    LETTER          reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TILDA           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    MINUS           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TIMES           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    QUESTION_MARK   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    OPENING_PARENTHESES reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CONST_KW        reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TRUE_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    FALSE_KW        reduce using rule 10 (variableList -> variableList COMMA varInitialization .)


state 42

    (25) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 76

state 43

    (36) paramId -> LETTER numOrletter .
    (37) paramId -> LETTER numOrletter . OPENING_BRACKET CLOSING_BRACKET

    COMMA           reduce using rule 36 (paramId -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 36 (paramId -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 36 (paramId -> LETTER numOrletter .)
    OPENING_BRACKET shift and go to state 85


state 44

    (32) paramList -> paramList COMMA . paramId
    (36) paramId -> . LETTER numOrletter
    (37) paramId -> . LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 34

    paramId                        shift and go to state 86

state 45

    (29) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 29 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 29 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 46

    (85) relExpression -> mathEXP . compareType mathEXP
    (86) relExpression -> mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP
    (87) compareType -> . equal
    (88) compareType -> . nonEqual
    (89) equal -> . LESSEQUAL
    (90) equal -> . GREATEREQUAL
    (91) equal -> . EQUALEQUAL
    (92) nonEqual -> . LESS_THAN
    (93) nonEqual -> . GREATER_THAN
    (94) nonEqual -> . NOTEQUAL

    LOGICAL_AND     reduce using rule 86 (relExpression -> mathEXP .)
    LOGICAL_OR      reduce using rule 86 (relExpression -> mathEXP .)
    TILDA           reduce using rule 86 (relExpression -> mathEXP .)
    AND             reduce using rule 86 (relExpression -> mathEXP .)
    OR              reduce using rule 86 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 86 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 86 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 86 (relExpression -> mathEXP .)
    COMMA           reduce using rule 86 (relExpression -> mathEXP .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 87
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 96
    PERCENTAGE      shift and go to state 98
    LESSEQUAL       shift and go to state 93
    GREATEREQUAL    shift and go to state 91
    EQUALEQUAL      shift and go to state 88
    LESS_THAN       shift and go to state 92
    GREATER_THAN    shift and go to state 90
    NOTEQUAL        shift and go to state 94

    compareType                    shift and go to state 89
    nonEqual                       shift and go to state 95
    equal                          shift and go to state 100

state 47

    (103) unaryop -> MINUS .

    MINUS           reduce using rule 103 (unaryop -> MINUS .)
    TIMES           reduce using rule 103 (unaryop -> MINUS .)
    QUESTION_MARK   reduce using rule 103 (unaryop -> MINUS .)
    OPENING_PARENTHESES reduce using rule 103 (unaryop -> MINUS .)
    LETTER          reduce using rule 103 (unaryop -> MINUS .)
    CONST_KW        reduce using rule 103 (unaryop -> MINUS .)
    TRUE_KW         reduce using rule 103 (unaryop -> MINUS .)
    FALSE_KW        reduce using rule 103 (unaryop -> MINUS .)


state 48

    (111) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    unaryExpression                shift and go to state 57
    allExpression                  shift and go to state 101
    alterable                      shift and go to state 74
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 49

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 105
    LOGICAL_AND     shift and go to state 103
    LOGICAL_OR      shift and go to state 107
    TILDA           shift and go to state 104
    AND             shift and go to state 102
    OR              shift and go to state 106


state 50

    (119) constant -> TRUE_KW .

    PLUS            reduce using rule 119 (constant -> TRUE_KW .)
    MINUS           reduce using rule 119 (constant -> TRUE_KW .)
    TIMES           reduce using rule 119 (constant -> TRUE_KW .)
    DIVIDE          reduce using rule 119 (constant -> TRUE_KW .)
    PERCENTAGE      reduce using rule 119 (constant -> TRUE_KW .)
    LESSEQUAL       reduce using rule 119 (constant -> TRUE_KW .)
    GREATEREQUAL    reduce using rule 119 (constant -> TRUE_KW .)
    EQUALEQUAL      reduce using rule 119 (constant -> TRUE_KW .)
    LESS_THAN       reduce using rule 119 (constant -> TRUE_KW .)
    GREATER_THAN    reduce using rule 119 (constant -> TRUE_KW .)
    NOTEQUAL        reduce using rule 119 (constant -> TRUE_KW .)
    CLOSING_PARENTHESES reduce using rule 119 (constant -> TRUE_KW .)
    LOGICAL_AND     reduce using rule 119 (constant -> TRUE_KW .)
    LOGICAL_OR      reduce using rule 119 (constant -> TRUE_KW .)
    TILDA           reduce using rule 119 (constant -> TRUE_KW .)
    AND             reduce using rule 119 (constant -> TRUE_KW .)
    OR              reduce using rule 119 (constant -> TRUE_KW .)
    CLOSING_BRACKET reduce using rule 119 (constant -> TRUE_KW .)
    SEMICOLON       reduce using rule 119 (constant -> TRUE_KW .)
    COMMA           reduce using rule 119 (constant -> TRUE_KW .)


state 51

    (76) eachExpression -> TILDA . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 108
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 52

    (104) unaryop -> TIMES .

    MINUS           reduce using rule 104 (unaryop -> TIMES .)
    TIMES           reduce using rule 104 (unaryop -> TIMES .)
    QUESTION_MARK   reduce using rule 104 (unaryop -> TIMES .)
    OPENING_PARENTHESES reduce using rule 104 (unaryop -> TIMES .)
    LETTER          reduce using rule 104 (unaryop -> TIMES .)
    CONST_KW        reduce using rule 104 (unaryop -> TIMES .)
    TRUE_KW         reduce using rule 104 (unaryop -> TIMES .)
    FALSE_KW        reduce using rule 104 (unaryop -> TIMES .)


state 53

    (101) unaryExpression -> unaryop . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 109
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 54

    (113) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER

    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11

    numOrletter                    shift and go to state 110

state 55

    (120) constant -> FALSE_KW .

    PLUS            reduce using rule 120 (constant -> FALSE_KW .)
    MINUS           reduce using rule 120 (constant -> FALSE_KW .)
    TIMES           reduce using rule 120 (constant -> FALSE_KW .)
    DIVIDE          reduce using rule 120 (constant -> FALSE_KW .)
    PERCENTAGE      reduce using rule 120 (constant -> FALSE_KW .)
    LESSEQUAL       reduce using rule 120 (constant -> FALSE_KW .)
    GREATEREQUAL    reduce using rule 120 (constant -> FALSE_KW .)
    EQUALEQUAL      reduce using rule 120 (constant -> FALSE_KW .)
    LESS_THAN       reduce using rule 120 (constant -> FALSE_KW .)
    GREATER_THAN    reduce using rule 120 (constant -> FALSE_KW .)
    NOTEQUAL        reduce using rule 120 (constant -> FALSE_KW .)
    CLOSING_PARENTHESES reduce using rule 120 (constant -> FALSE_KW .)
    LOGICAL_AND     reduce using rule 120 (constant -> FALSE_KW .)
    LOGICAL_OR      reduce using rule 120 (constant -> FALSE_KW .)
    TILDA           reduce using rule 120 (constant -> FALSE_KW .)
    AND             reduce using rule 120 (constant -> FALSE_KW .)
    OR              reduce using rule 120 (constant -> FALSE_KW .)
    CLOSING_BRACKET reduce using rule 120 (constant -> FALSE_KW .)
    SEMICOLON       reduce using rule 120 (constant -> FALSE_KW .)
    COMMA           reduce using rule 120 (constant -> FALSE_KW .)


state 56

    (105) unaryop -> QUESTION_MARK .

    MINUS           reduce using rule 105 (unaryop -> QUESTION_MARK .)
    TIMES           reduce using rule 105 (unaryop -> QUESTION_MARK .)
    QUESTION_MARK   reduce using rule 105 (unaryop -> QUESTION_MARK .)
    OPENING_PARENTHESES reduce using rule 105 (unaryop -> QUESTION_MARK .)
    LETTER          reduce using rule 105 (unaryop -> QUESTION_MARK .)
    CONST_KW        reduce using rule 105 (unaryop -> QUESTION_MARK .)
    TRUE_KW         reduce using rule 105 (unaryop -> QUESTION_MARK .)
    FALSE_KW        reduce using rule 105 (unaryop -> QUESTION_MARK .)


state 57

    (100) mathEXP -> unaryExpression .

    PLUS            reduce using rule 100 (mathEXP -> unaryExpression .)
    MINUS           reduce using rule 100 (mathEXP -> unaryExpression .)
    TIMES           reduce using rule 100 (mathEXP -> unaryExpression .)
    DIVIDE          reduce using rule 100 (mathEXP -> unaryExpression .)
    PERCENTAGE      reduce using rule 100 (mathEXP -> unaryExpression .)
    LESSEQUAL       reduce using rule 100 (mathEXP -> unaryExpression .)
    GREATEREQUAL    reduce using rule 100 (mathEXP -> unaryExpression .)
    EQUALEQUAL      reduce using rule 100 (mathEXP -> unaryExpression .)
    LESS_THAN       reduce using rule 100 (mathEXP -> unaryExpression .)
    GREATER_THAN    reduce using rule 100 (mathEXP -> unaryExpression .)
    NOTEQUAL        reduce using rule 100 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 100 (mathEXP -> unaryExpression .)
    LOGICAL_AND     reduce using rule 100 (mathEXP -> unaryExpression .)
    LOGICAL_OR      reduce using rule 100 (mathEXP -> unaryExpression .)
    TILDA           reduce using rule 100 (mathEXP -> unaryExpression .)
    AND             reduce using rule 100 (mathEXP -> unaryExpression .)
    OR              reduce using rule 100 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 100 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 100 (mathEXP -> unaryExpression .)
    COMMA           reduce using rule 100 (mathEXP -> unaryExpression .)


state 58

    (118) constant -> CONST_KW .

    PLUS            reduce using rule 118 (constant -> CONST_KW .)
    MINUS           reduce using rule 118 (constant -> CONST_KW .)
    TIMES           reduce using rule 118 (constant -> CONST_KW .)
    DIVIDE          reduce using rule 118 (constant -> CONST_KW .)
    PERCENTAGE      reduce using rule 118 (constant -> CONST_KW .)
    LESSEQUAL       reduce using rule 118 (constant -> CONST_KW .)
    GREATEREQUAL    reduce using rule 118 (constant -> CONST_KW .)
    EQUALEQUAL      reduce using rule 118 (constant -> CONST_KW .)
    LESS_THAN       reduce using rule 118 (constant -> CONST_KW .)
    GREATER_THAN    reduce using rule 118 (constant -> CONST_KW .)
    NOTEQUAL        reduce using rule 118 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 118 (constant -> CONST_KW .)
    LOGICAL_AND     reduce using rule 118 (constant -> CONST_KW .)
    LOGICAL_OR      reduce using rule 118 (constant -> CONST_KW .)
    TILDA           reduce using rule 118 (constant -> CONST_KW .)
    AND             reduce using rule 118 (constant -> CONST_KW .)
    OR              reduce using rule 118 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 118 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 118 (constant -> CONST_KW .)
    COMMA           reduce using rule 118 (constant -> CONST_KW .)


state 59

    (106) factor -> inalterable .

    PLUS            reduce using rule 106 (factor -> inalterable .)
    MINUS           reduce using rule 106 (factor -> inalterable .)
    TIMES           reduce using rule 106 (factor -> inalterable .)
    DIVIDE          reduce using rule 106 (factor -> inalterable .)
    PERCENTAGE      reduce using rule 106 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 106 (factor -> inalterable .)
    LOGICAL_AND     reduce using rule 106 (factor -> inalterable .)
    LOGICAL_OR      reduce using rule 106 (factor -> inalterable .)
    TILDA           reduce using rule 106 (factor -> inalterable .)
    AND             reduce using rule 106 (factor -> inalterable .)
    OR              reduce using rule 106 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 106 (factor -> inalterable .)
    SEMICOLON       reduce using rule 106 (factor -> inalterable .)
    COMMA           reduce using rule 106 (factor -> inalterable .)
    LESSEQUAL       reduce using rule 106 (factor -> inalterable .)
    GREATEREQUAL    reduce using rule 106 (factor -> inalterable .)
    EQUALEQUAL      reduce using rule 106 (factor -> inalterable .)
    LESS_THAN       reduce using rule 106 (factor -> inalterable .)
    GREATER_THAN    reduce using rule 106 (factor -> inalterable .)
    NOTEQUAL        reduce using rule 106 (factor -> inalterable .)


state 60

    (107) factor -> alterable .
    (109) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> alterable . DOT LETTER

    PLUS            reduce using rule 107 (factor -> alterable .)
    MINUS           reduce using rule 107 (factor -> alterable .)
    TIMES           reduce using rule 107 (factor -> alterable .)
    DIVIDE          reduce using rule 107 (factor -> alterable .)
    PERCENTAGE      reduce using rule 107 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 107 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 107 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 107 (factor -> alterable .)
    TILDA           reduce using rule 107 (factor -> alterable .)
    AND             reduce using rule 107 (factor -> alterable .)
    OR              reduce using rule 107 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 107 (factor -> alterable .)
    SEMICOLON       reduce using rule 107 (factor -> alterable .)
    COMMA           reduce using rule 107 (factor -> alterable .)
    LESSEQUAL       reduce using rule 107 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 107 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 107 (factor -> alterable .)
    LESS_THAN       reduce using rule 107 (factor -> alterable .)
    GREATER_THAN    reduce using rule 107 (factor -> alterable .)
    NOTEQUAL        reduce using rule 107 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 112
    DOT             shift and go to state 111


state 61

    (112) inalterable -> constant .

    PLUS            reduce using rule 112 (inalterable -> constant .)
    MINUS           reduce using rule 112 (inalterable -> constant .)
    TIMES           reduce using rule 112 (inalterable -> constant .)
    DIVIDE          reduce using rule 112 (inalterable -> constant .)
    PERCENTAGE      reduce using rule 112 (inalterable -> constant .)
    LESSEQUAL       reduce using rule 112 (inalterable -> constant .)
    GREATEREQUAL    reduce using rule 112 (inalterable -> constant .)
    EQUALEQUAL      reduce using rule 112 (inalterable -> constant .)
    LESS_THAN       reduce using rule 112 (inalterable -> constant .)
    GREATER_THAN    reduce using rule 112 (inalterable -> constant .)
    NOTEQUAL        reduce using rule 112 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 112 (inalterable -> constant .)
    LOGICAL_AND     reduce using rule 112 (inalterable -> constant .)
    LOGICAL_OR      reduce using rule 112 (inalterable -> constant .)
    TILDA           reduce using rule 112 (inalterable -> constant .)
    AND             reduce using rule 112 (inalterable -> constant .)
    OR              reduce using rule 112 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 112 (inalterable -> constant .)
    SEMICOLON       reduce using rule 112 (inalterable -> constant .)
    COMMA           reduce using rule 112 (inalterable -> constant .)


state 62

    (84) eachExpression -> relExpression .

    LOGICAL_AND     reduce using rule 84 (eachExpression -> relExpression .)
    LOGICAL_OR      reduce using rule 84 (eachExpression -> relExpression .)
    TILDA           reduce using rule 84 (eachExpression -> relExpression .)
    AND             reduce using rule 84 (eachExpression -> relExpression .)
    OR              reduce using rule 84 (eachExpression -> relExpression .)
    COMMA           reduce using rule 84 (eachExpression -> relExpression .)
    CLOSING_PARENTHESES reduce using rule 84 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 84 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 84 (eachExpression -> relExpression .)


state 63

    (102) unaryExpression -> factor .

    PLUS            reduce using rule 102 (unaryExpression -> factor .)
    MINUS           reduce using rule 102 (unaryExpression -> factor .)
    TIMES           reduce using rule 102 (unaryExpression -> factor .)
    DIVIDE          reduce using rule 102 (unaryExpression -> factor .)
    PERCENTAGE      reduce using rule 102 (unaryExpression -> factor .)
    LESSEQUAL       reduce using rule 102 (unaryExpression -> factor .)
    GREATEREQUAL    reduce using rule 102 (unaryExpression -> factor .)
    EQUALEQUAL      reduce using rule 102 (unaryExpression -> factor .)
    LESS_THAN       reduce using rule 102 (unaryExpression -> factor .)
    GREATER_THAN    reduce using rule 102 (unaryExpression -> factor .)
    NOTEQUAL        reduce using rule 102 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 102 (unaryExpression -> factor .)
    LOGICAL_AND     reduce using rule 102 (unaryExpression -> factor .)
    LOGICAL_OR      reduce using rule 102 (unaryExpression -> factor .)
    TILDA           reduce using rule 102 (unaryExpression -> factor .)
    AND             reduce using rule 102 (unaryExpression -> factor .)
    OR              reduce using rule 102 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 102 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 102 (unaryExpression -> factor .)
    COMMA           reduce using rule 102 (unaryExpression -> factor .)


state 64

    (26) function -> type LETTER numOrletter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 113


state 65

    (14) varForm -> LETTER numOrletter OPENING_BRACKET eachExpression . CLOSING_BRACKET
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_BRACKET shift and go to state 114
    LOGICAL_AND     shift and go to state 103
    LOGICAL_OR      shift and go to state 107
    TILDA           shift and go to state 104
    AND             shift and go to state 102
    OR              shift and go to state 106


state 66

    (14) varForm -> LETTER numOrletter . OPENING_BRACKET eachExpression CLOSING_BRACKET

    OPENING_BRACKET shift and go to state 39


state 67

    (39) statement -> compoundPhrase .

    VOID_KW         reduce using rule 39 (statement -> compoundPhrase .)
    NUMBER          reduce using rule 39 (statement -> compoundPhrase .)
    LETTER          reduce using rule 39 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 39 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 39 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 39 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 39 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 39 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 39 (statement -> compoundPhrase .)
    $end            reduce using rule 39 (statement -> compoundPhrase .)
    CLOSING_BRACE   reduce using rule 39 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 39 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 39 (statement -> compoundPhrase .)
    IF_KW           reduce using rule 39 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 39 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 39 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 39 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 39 (statement -> compoundPhrase .)
    TILDA           reduce using rule 39 (statement -> compoundPhrase .)
    MINUS           reduce using rule 39 (statement -> compoundPhrase .)
    TIMES           reduce using rule 39 (statement -> compoundPhrase .)
    QUESTION_MARK   reduce using rule 39 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 39 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 39 (statement -> compoundPhrase .)
    TRUE_KW         reduce using rule 39 (statement -> compoundPhrase .)
    FALSE_KW        reduce using rule 39 (statement -> compoundPhrase .)
    OTHER_KW        reduce using rule 39 (statement -> compoundPhrase .)


state 68

    (53) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 115


state 69

    (47) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 116


state 70

    (44) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (34) localDeclarations -> . localDeclarations ScopedVariableDec
    (35) localDeclarations -> . empty
    (121) empty -> .

    STATIC_KW       reduce using rule 121 (empty -> .)
    BOOLEAN_KW      reduce using rule 121 (empty -> .)
    CHARACTER_KW    reduce using rule 121 (empty -> .)
    INTEGER_KW      reduce using rule 121 (empty -> .)
    CHAR_KW         reduce using rule 121 (empty -> .)
    BOOL_KW         reduce using rule 121 (empty -> .)
    INT_KW          reduce using rule 121 (empty -> .)
    CLOSING_BRACE   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    OPENING_BRACE   reduce using rule 121 (empty -> .)
    IF_KW           reduce using rule 121 (empty -> .)
    TILL_KW         reduce using rule 121 (empty -> .)
    COMEBACK_KW     reduce using rule 121 (empty -> .)
    GIVEBACK_KW     reduce using rule 121 (empty -> .)
    CONTINUE_KW     reduce using rule 121 (empty -> .)
    LETTER          reduce using rule 121 (empty -> .)
    TILDA           reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    TIMES           reduce using rule 121 (empty -> .)
    QUESTION_MARK   reduce using rule 121 (empty -> .)
    OPENING_PARENTHESES reduce using rule 121 (empty -> .)
    CONST_KW        reduce using rule 121 (empty -> .)
    TRUE_KW         reduce using rule 121 (empty -> .)
    FALSE_KW        reduce using rule 121 (empty -> .)

    empty                          shift and go to state 118
    localDeclarations              shift and go to state 117

state 71

    (108) alterable -> LETTER . numOrletter
    (113) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER

    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11

    numOrletter                    shift and go to state 119

state 72

    (41) statement -> iterationPhrase .

    VOID_KW         reduce using rule 41 (statement -> iterationPhrase .)
    NUMBER          reduce using rule 41 (statement -> iterationPhrase .)
    LETTER          reduce using rule 41 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 41 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 41 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 41 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 41 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 41 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 41 (statement -> iterationPhrase .)
    $end            reduce using rule 41 (statement -> iterationPhrase .)
    CLOSING_BRACE   reduce using rule 41 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 41 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 41 (statement -> iterationPhrase .)
    IF_KW           reduce using rule 41 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 41 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 41 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 41 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 41 (statement -> iterationPhrase .)
    TILDA           reduce using rule 41 (statement -> iterationPhrase .)
    MINUS           reduce using rule 41 (statement -> iterationPhrase .)
    TIMES           reduce using rule 41 (statement -> iterationPhrase .)
    QUESTION_MARK   reduce using rule 41 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 41 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 41 (statement -> iterationPhrase .)
    TRUE_KW         reduce using rule 41 (statement -> iterationPhrase .)
    FALSE_KW        reduce using rule 41 (statement -> iterationPhrase .)
    OTHER_KW        reduce using rule 41 (statement -> iterationPhrase .)


state 73

    (54) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 120


state 74

    (58) allExpression -> alterable . mathOp allExpression
    (59) allExpression -> alterable . PLUSPLUS
    (60) allExpression -> alterable . MINUSMINUS
    (62) allExpression -> alterable . mathOp alterable
    (109) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> alterable . DOT LETTER
    (107) factor -> alterable .
    (63) mathOp -> . EQUAL
    (64) mathOp -> . PLUSEQUAL
    (65) mathOp -> . MINUSEQUAL
    (66) mathOp -> . TIMESEQUAL
    (67) mathOp -> . DIVIDEEQUAL

    PLUSPLUS        shift and go to state 121
    MINUSMINUS      shift and go to state 128
    OPENING_BRACKET shift and go to state 112
    DOT             shift and go to state 111
    PLUS            reduce using rule 107 (factor -> alterable .)
    MINUS           reduce using rule 107 (factor -> alterable .)
    TIMES           reduce using rule 107 (factor -> alterable .)
    DIVIDE          reduce using rule 107 (factor -> alterable .)
    PERCENTAGE      reduce using rule 107 (factor -> alterable .)
    LESSEQUAL       reduce using rule 107 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 107 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 107 (factor -> alterable .)
    LESS_THAN       reduce using rule 107 (factor -> alterable .)
    GREATER_THAN    reduce using rule 107 (factor -> alterable .)
    NOTEQUAL        reduce using rule 107 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 107 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 107 (factor -> alterable .)
    TILDA           reduce using rule 107 (factor -> alterable .)
    AND             reduce using rule 107 (factor -> alterable .)
    OR              reduce using rule 107 (factor -> alterable .)
    SEMICOLON       reduce using rule 107 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 107 (factor -> alterable .)
    COMMA           reduce using rule 107 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 107 (factor -> alterable .)
    EQUAL           shift and go to state 125
    PLUSEQUAL       shift and go to state 123
    MINUSEQUAL      shift and go to state 122
    TIMESEQUAL      shift and go to state 127
    DIVIDEEQUAL     shift and go to state 124

    mathOp                         shift and go to state 126

state 75

    (38) statement -> phrase .

    VOID_KW         reduce using rule 38 (statement -> phrase .)
    NUMBER          reduce using rule 38 (statement -> phrase .)
    LETTER          reduce using rule 38 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 38 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 38 (statement -> phrase .)
    INTEGER_KW      reduce using rule 38 (statement -> phrase .)
    CHAR_KW         reduce using rule 38 (statement -> phrase .)
    BOOL_KW         reduce using rule 38 (statement -> phrase .)
    INT_KW          reduce using rule 38 (statement -> phrase .)
    $end            reduce using rule 38 (statement -> phrase .)
    CLOSING_BRACE   reduce using rule 38 (statement -> phrase .)
    SEMICOLON       reduce using rule 38 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 38 (statement -> phrase .)
    IF_KW           reduce using rule 38 (statement -> phrase .)
    TILL_KW         reduce using rule 38 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 38 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 38 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 38 (statement -> phrase .)
    TILDA           reduce using rule 38 (statement -> phrase .)
    MINUS           reduce using rule 38 (statement -> phrase .)
    TIMES           reduce using rule 38 (statement -> phrase .)
    QUESTION_MARK   reduce using rule 38 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 38 (statement -> phrase .)
    CONST_KW        reduce using rule 38 (statement -> phrase .)
    TRUE_KW         reduce using rule 38 (statement -> phrase .)
    FALSE_KW        reduce using rule 38 (statement -> phrase .)
    OTHER_KW        reduce using rule 38 (statement -> phrase .)


state 76

    (25) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 129


state 77

    (61) allExpression -> eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES reduce using rule 61 (allExpression -> eachExpression .)
    SEMICOLON       reduce using rule 61 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 61 (allExpression -> eachExpression .)
    COMMA           reduce using rule 61 (allExpression -> eachExpression .)
    LOGICAL_AND     shift and go to state 103
    LOGICAL_OR      shift and go to state 107
    TILDA           shift and go to state 104
    AND             shift and go to state 102
    OR              shift and go to state 106


state 78

    (42) statement -> returnPhrase .

    VOID_KW         reduce using rule 42 (statement -> returnPhrase .)
    NUMBER          reduce using rule 42 (statement -> returnPhrase .)
    LETTER          reduce using rule 42 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 42 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 42 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 42 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 42 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 42 (statement -> returnPhrase .)
    INT_KW          reduce using rule 42 (statement -> returnPhrase .)
    $end            reduce using rule 42 (statement -> returnPhrase .)
    CLOSING_BRACE   reduce using rule 42 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 42 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 42 (statement -> returnPhrase .)
    IF_KW           reduce using rule 42 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 42 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 42 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 42 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 42 (statement -> returnPhrase .)
    TILDA           reduce using rule 42 (statement -> returnPhrase .)
    MINUS           reduce using rule 42 (statement -> returnPhrase .)
    TIMES           reduce using rule 42 (statement -> returnPhrase .)
    QUESTION_MARK   reduce using rule 42 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 42 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 42 (statement -> returnPhrase .)
    TRUE_KW         reduce using rule 42 (statement -> returnPhrase .)
    FALSE_KW        reduce using rule 42 (statement -> returnPhrase .)
    OTHER_KW        reduce using rule 42 (statement -> returnPhrase .)


state 79

    (48) phrase -> SEMICOLON .

    CLOSING_BRACE   reduce using rule 48 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 48 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 48 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 48 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 48 (phrase -> SEMICOLON .)
    TILDA           reduce using rule 48 (phrase -> SEMICOLON .)
    MINUS           reduce using rule 48 (phrase -> SEMICOLON .)
    TIMES           reduce using rule 48 (phrase -> SEMICOLON .)
    QUESTION_MARK   reduce using rule 48 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 48 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 48 (phrase -> SEMICOLON .)
    TRUE_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    FALSE_KW        reduce using rule 48 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    NUMBER          reduce using rule 48 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 48 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 48 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 48 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 48 (phrase -> SEMICOLON .)
    $end            reduce using rule 48 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 48 (phrase -> SEMICOLON .)


state 80

    (55) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (56) returnPhrase -> GIVEBACK_KW . numOrletter SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    NUMBER          shift and go to state 7
    LETTER          shift and go to state 130
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    unaryExpression                shift and go to state 57
    allExpression                  shift and go to state 132
    alterable                      shift and go to state 74
    constant                       shift and go to state 61
    numOrletter                    shift and go to state 131
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 81

    (40) statement -> selectPhrase .

    VOID_KW         reduce using rule 40 (statement -> selectPhrase .)
    NUMBER          reduce using rule 40 (statement -> selectPhrase .)
    LETTER          reduce using rule 40 (statement -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 40 (statement -> selectPhrase .)
    CHARACTER_KW    reduce using rule 40 (statement -> selectPhrase .)
    INTEGER_KW      reduce using rule 40 (statement -> selectPhrase .)
    CHAR_KW         reduce using rule 40 (statement -> selectPhrase .)
    BOOL_KW         reduce using rule 40 (statement -> selectPhrase .)
    INT_KW          reduce using rule 40 (statement -> selectPhrase .)
    $end            reduce using rule 40 (statement -> selectPhrase .)
    CLOSING_BRACE   reduce using rule 40 (statement -> selectPhrase .)
    SEMICOLON       reduce using rule 40 (statement -> selectPhrase .)
    OPENING_BRACE   reduce using rule 40 (statement -> selectPhrase .)
    IF_KW           reduce using rule 40 (statement -> selectPhrase .)
    TILL_KW         reduce using rule 40 (statement -> selectPhrase .)
    COMEBACK_KW     reduce using rule 40 (statement -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 40 (statement -> selectPhrase .)
    CONTINUE_KW     reduce using rule 40 (statement -> selectPhrase .)
    TILDA           reduce using rule 40 (statement -> selectPhrase .)
    MINUS           reduce using rule 40 (statement -> selectPhrase .)
    TIMES           reduce using rule 40 (statement -> selectPhrase .)
    QUESTION_MARK   reduce using rule 40 (statement -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 40 (statement -> selectPhrase .)
    CONST_KW        reduce using rule 40 (statement -> selectPhrase .)
    TRUE_KW         reduce using rule 40 (statement -> selectPhrase .)
    FALSE_KW        reduce using rule 40 (statement -> selectPhrase .)
    OTHER_KW        reduce using rule 40 (statement -> selectPhrase .)


state 82

    (57) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 133


state 83

    (49) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 134


state 84

    (43) statement -> continue .

    VOID_KW         reduce using rule 43 (statement -> continue .)
    NUMBER          reduce using rule 43 (statement -> continue .)
    LETTER          reduce using rule 43 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 43 (statement -> continue .)
    CHARACTER_KW    reduce using rule 43 (statement -> continue .)
    INTEGER_KW      reduce using rule 43 (statement -> continue .)
    CHAR_KW         reduce using rule 43 (statement -> continue .)
    BOOL_KW         reduce using rule 43 (statement -> continue .)
    INT_KW          reduce using rule 43 (statement -> continue .)
    $end            reduce using rule 43 (statement -> continue .)
    CLOSING_BRACE   reduce using rule 43 (statement -> continue .)
    SEMICOLON       reduce using rule 43 (statement -> continue .)
    OPENING_BRACE   reduce using rule 43 (statement -> continue .)
    IF_KW           reduce using rule 43 (statement -> continue .)
    TILL_KW         reduce using rule 43 (statement -> continue .)
    COMEBACK_KW     reduce using rule 43 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 43 (statement -> continue .)
    CONTINUE_KW     reduce using rule 43 (statement -> continue .)
    TILDA           reduce using rule 43 (statement -> continue .)
    MINUS           reduce using rule 43 (statement -> continue .)
    TIMES           reduce using rule 43 (statement -> continue .)
    QUESTION_MARK   reduce using rule 43 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 43 (statement -> continue .)
    CONST_KW        reduce using rule 43 (statement -> continue .)
    TRUE_KW         reduce using rule 43 (statement -> continue .)
    FALSE_KW        reduce using rule 43 (statement -> continue .)
    OTHER_KW        reduce using rule 43 (statement -> continue .)


state 85

    (37) paramId -> LETTER numOrletter OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 135


state 86

    (32) paramList -> paramList COMMA paramId .

    COMMA           reduce using rule 32 (paramList -> paramList COMMA paramId .)
    SEMICOLON       reduce using rule 32 (paramList -> paramList COMMA paramId .)
    CLOSING_PARENTHESES reduce using rule 32 (paramList -> paramList COMMA paramId .)


state 87

    (96) mathEXP -> mathEXP MINUS . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    mathEXP                        shift and go to state 136
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 88

    (91) equal -> EQUALEQUAL .

    MINUS           reduce using rule 91 (equal -> EQUALEQUAL .)
    TIMES           reduce using rule 91 (equal -> EQUALEQUAL .)
    QUESTION_MARK   reduce using rule 91 (equal -> EQUALEQUAL .)
    OPENING_PARENTHESES reduce using rule 91 (equal -> EQUALEQUAL .)
    LETTER          reduce using rule 91 (equal -> EQUALEQUAL .)
    CONST_KW        reduce using rule 91 (equal -> EQUALEQUAL .)
    TRUE_KW         reduce using rule 91 (equal -> EQUALEQUAL .)
    FALSE_KW        reduce using rule 91 (equal -> EQUALEQUAL .)


state 89

    (85) relExpression -> mathEXP compareType . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    mathEXP                        shift and go to state 137
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 90

    (93) nonEqual -> GREATER_THAN .

    MINUS           reduce using rule 93 (nonEqual -> GREATER_THAN .)
    TIMES           reduce using rule 93 (nonEqual -> GREATER_THAN .)
    QUESTION_MARK   reduce using rule 93 (nonEqual -> GREATER_THAN .)
    OPENING_PARENTHESES reduce using rule 93 (nonEqual -> GREATER_THAN .)
    LETTER          reduce using rule 93 (nonEqual -> GREATER_THAN .)
    CONST_KW        reduce using rule 93 (nonEqual -> GREATER_THAN .)
    TRUE_KW         reduce using rule 93 (nonEqual -> GREATER_THAN .)
    FALSE_KW        reduce using rule 93 (nonEqual -> GREATER_THAN .)


state 91

    (90) equal -> GREATEREQUAL .

    MINUS           reduce using rule 90 (equal -> GREATEREQUAL .)
    TIMES           reduce using rule 90 (equal -> GREATEREQUAL .)
    QUESTION_MARK   reduce using rule 90 (equal -> GREATEREQUAL .)
    OPENING_PARENTHESES reduce using rule 90 (equal -> GREATEREQUAL .)
    LETTER          reduce using rule 90 (equal -> GREATEREQUAL .)
    CONST_KW        reduce using rule 90 (equal -> GREATEREQUAL .)
    TRUE_KW         reduce using rule 90 (equal -> GREATEREQUAL .)
    FALSE_KW        reduce using rule 90 (equal -> GREATEREQUAL .)


state 92

    (92) nonEqual -> LESS_THAN .

    MINUS           reduce using rule 92 (nonEqual -> LESS_THAN .)
    TIMES           reduce using rule 92 (nonEqual -> LESS_THAN .)
    QUESTION_MARK   reduce using rule 92 (nonEqual -> LESS_THAN .)
    OPENING_PARENTHESES reduce using rule 92 (nonEqual -> LESS_THAN .)
    LETTER          reduce using rule 92 (nonEqual -> LESS_THAN .)
    CONST_KW        reduce using rule 92 (nonEqual -> LESS_THAN .)
    TRUE_KW         reduce using rule 92 (nonEqual -> LESS_THAN .)
    FALSE_KW        reduce using rule 92 (nonEqual -> LESS_THAN .)


state 93

    (89) equal -> LESSEQUAL .

    MINUS           reduce using rule 89 (equal -> LESSEQUAL .)
    TIMES           reduce using rule 89 (equal -> LESSEQUAL .)
    QUESTION_MARK   reduce using rule 89 (equal -> LESSEQUAL .)
    OPENING_PARENTHESES reduce using rule 89 (equal -> LESSEQUAL .)
    LETTER          reduce using rule 89 (equal -> LESSEQUAL .)
    CONST_KW        reduce using rule 89 (equal -> LESSEQUAL .)
    TRUE_KW         reduce using rule 89 (equal -> LESSEQUAL .)
    FALSE_KW        reduce using rule 89 (equal -> LESSEQUAL .)


state 94

    (94) nonEqual -> NOTEQUAL .

    MINUS           reduce using rule 94 (nonEqual -> NOTEQUAL .)
    TIMES           reduce using rule 94 (nonEqual -> NOTEQUAL .)
    QUESTION_MARK   reduce using rule 94 (nonEqual -> NOTEQUAL .)
    OPENING_PARENTHESES reduce using rule 94 (nonEqual -> NOTEQUAL .)
    LETTER          reduce using rule 94 (nonEqual -> NOTEQUAL .)
    CONST_KW        reduce using rule 94 (nonEqual -> NOTEQUAL .)
    TRUE_KW         reduce using rule 94 (nonEqual -> NOTEQUAL .)
    FALSE_KW        reduce using rule 94 (nonEqual -> NOTEQUAL .)


state 95

    (88) compareType -> nonEqual .

    MINUS           reduce using rule 88 (compareType -> nonEqual .)
    TIMES           reduce using rule 88 (compareType -> nonEqual .)
    QUESTION_MARK   reduce using rule 88 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 88 (compareType -> nonEqual .)
    LETTER          reduce using rule 88 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 88 (compareType -> nonEqual .)
    TRUE_KW         reduce using rule 88 (compareType -> nonEqual .)
    FALSE_KW        reduce using rule 88 (compareType -> nonEqual .)


state 96

    (98) mathEXP -> mathEXP DIVIDE . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    mathEXP                        shift and go to state 138
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 97

    (97) mathEXP -> mathEXP TIMES . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    mathEXP                        shift and go to state 139
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 98

    (99) mathEXP -> mathEXP PERCENTAGE . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    mathEXP                        shift and go to state 140
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 99

    (95) mathEXP -> mathEXP PLUS . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    constant                       shift and go to state 61
    mathEXP                        shift and go to state 141
    factor                         shift and go to state 63
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60

state 100

    (87) compareType -> equal .

    MINUS           reduce using rule 87 (compareType -> equal .)
    TIMES           reduce using rule 87 (compareType -> equal .)
    QUESTION_MARK   reduce using rule 87 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 87 (compareType -> equal .)
    LETTER          reduce using rule 87 (compareType -> equal .)
    CONST_KW        reduce using rule 87 (compareType -> equal .)
    TRUE_KW         reduce using rule 87 (compareType -> equal .)
    FALSE_KW        reduce using rule 87 (compareType -> equal .)


state 101

    (111) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 142


state 102

    (78) eachExpression -> eachExpression AND . eachExpression
    (79) eachExpression -> eachExpression AND . THEN_KW eachExpression
    (80) eachExpression -> eachExpression AND . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    THEN_KW         shift and go to state 144
    ELSE_KW         shift and go to state 145
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 143
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 103

    (68) eachExpression -> eachExpression LOGICAL_AND . eachExpression
    (69) eachExpression -> eachExpression LOGICAL_AND . THEN_KW eachExpression
    (70) eachExpression -> eachExpression LOGICAL_AND . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    THEN_KW         shift and go to state 147
    ELSE_KW         shift and go to state 148
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 146
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 104

    (74) eachExpression -> eachExpression TILDA . eachExpression
    (75) eachExpression -> eachExpression TILDA . THEN_KW eachExpression
    (77) eachExpression -> eachExpression TILDA . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    THEN_KW         shift and go to state 150
    ELSE_KW         shift and go to state 151
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 149
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 105

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    COMMA           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    STATIC_KW       reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOLEAN_KW      reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHARACTER_KW    reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INTEGER_KW      reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHAR_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOL_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INT_KW          reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CLOSING_BRACE   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_BRACE   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    IF_KW           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILL_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMEBACK_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    GIVEBACK_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONTINUE_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    LETTER          reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    QUESTION_MARK   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_PARENTHESES reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONST_KW        reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TRUE_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    FALSE_KW        reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 106

    (81) eachExpression -> eachExpression OR . eachExpression
    (82) eachExpression -> eachExpression OR . THEN_KW eachExpression
    (83) eachExpression -> eachExpression OR . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    THEN_KW         shift and go to state 153
    ELSE_KW         shift and go to state 154
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 152
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 107

    (71) eachExpression -> eachExpression LOGICAL_OR . eachExpression
    (72) eachExpression -> eachExpression LOGICAL_OR . THEN_KW eachExpression
    (73) eachExpression -> eachExpression LOGICAL_OR . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    THEN_KW         shift and go to state 156
    ELSE_KW         shift and go to state 157
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 155
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 108

    (76) eachExpression -> TILDA eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    TILDA           reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    AND             reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    OR              reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    COMMA           reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    SEMICOLON       reduce using rule 76 (eachExpression -> TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 76 (eachExpression -> TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 109

    (101) unaryExpression -> unaryop unaryExpression .

    PLUS            reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    MINUS           reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    TIMES           reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    DIVIDE          reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    PERCENTAGE      reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    LESSEQUAL       reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    GREATEREQUAL    reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    EQUALEQUAL      reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    LESS_THAN       reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    GREATER_THAN    reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    NOTEQUAL        reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_AND     reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_OR      reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    TILDA           reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    AND             reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    OR              reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)
    COMMA           reduce using rule 101 (unaryExpression -> unaryop unaryExpression .)


state 110

    (113) inalterable -> LETTER numOrletter . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> LETTER numOrletter .

    OPENING_PARENTHESES shift and go to state 158
    OPENING_BRACKET reduce using rule 108 (alterable -> LETTER numOrletter .)
    DOT             reduce using rule 108 (alterable -> LETTER numOrletter .)
    PLUS            reduce using rule 108 (alterable -> LETTER numOrletter .)
    MINUS           reduce using rule 108 (alterable -> LETTER numOrletter .)
    TIMES           reduce using rule 108 (alterable -> LETTER numOrletter .)
    DIVIDE          reduce using rule 108 (alterable -> LETTER numOrletter .)
    PERCENTAGE      reduce using rule 108 (alterable -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 108 (alterable -> LETTER numOrletter .)
    LOGICAL_AND     reduce using rule 108 (alterable -> LETTER numOrletter .)
    LOGICAL_OR      reduce using rule 108 (alterable -> LETTER numOrletter .)
    TILDA           reduce using rule 108 (alterable -> LETTER numOrletter .)
    AND             reduce using rule 108 (alterable -> LETTER numOrletter .)
    OR              reduce using rule 108 (alterable -> LETTER numOrletter .)
    CLOSING_BRACKET reduce using rule 108 (alterable -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 108 (alterable -> LETTER numOrletter .)
    COMMA           reduce using rule 108 (alterable -> LETTER numOrletter .)
    LESSEQUAL       reduce using rule 108 (alterable -> LETTER numOrletter .)
    GREATEREQUAL    reduce using rule 108 (alterable -> LETTER numOrletter .)
    EQUALEQUAL      reduce using rule 108 (alterable -> LETTER numOrletter .)
    LESS_THAN       reduce using rule 108 (alterable -> LETTER numOrletter .)
    GREATER_THAN    reduce using rule 108 (alterable -> LETTER numOrletter .)
    NOTEQUAL        reduce using rule 108 (alterable -> LETTER numOrletter .)


state 111

    (110) alterable -> alterable DOT . LETTER

    LETTER          shift and go to state 159


state 112

    (109) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    unaryExpression                shift and go to state 57
    allExpression                  shift and go to state 160
    alterable                      shift and go to state 74
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 113

    (26) function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 161

state 114

    (14) varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .

    DOUBLE_DOT      reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    STATIC_KW       reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOLEAN_KW      reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHARACTER_KW    reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INTEGER_KW      reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHAR_KW         reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOL_KW         reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INT_KW          reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CLOSING_BRACE   reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_BRACE   reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    IF_KW           reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILL_KW         reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMEBACK_KW     reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    GIVEBACK_KW     reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONTINUE_KW     reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    LETTER          reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    QUESTION_MARK   reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_PARENTHESES reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONST_KW        reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TRUE_KW         reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    FALSE_KW        reduce using rule 14 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)


state 115

    (53) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 162
    unaryExpression                shift and go to state 57
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 116

    (47) phrase -> allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    IF_KW           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    LETTER          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TILDA           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    MINUS           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TIMES           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    VOID_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    NUMBER          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 47 (phrase -> allExpression SEMICOLON .)


state 117

    (44) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (34) localDeclarations -> localDeclarations . ScopedVariableDec
    (45) statementList -> . statementList statement
    (46) statementList -> . empty
    (9) ScopedVariableDec -> . scopedSpecifier variableList
    (121) empty -> .
    (16) scopedSpecifier -> . STATIC_KW type
    (17) scopedSpecifier -> . type
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    OPENING_BRACE   reduce using rule 121 (empty -> .)
    IF_KW           reduce using rule 121 (empty -> .)
    TILL_KW         reduce using rule 121 (empty -> .)
    COMEBACK_KW     reduce using rule 121 (empty -> .)
    GIVEBACK_KW     reduce using rule 121 (empty -> .)
    CONTINUE_KW     reduce using rule 121 (empty -> .)
    LETTER          reduce using rule 121 (empty -> .)
    TILDA           reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    TIMES           reduce using rule 121 (empty -> .)
    QUESTION_MARK   reduce using rule 121 (empty -> .)
    OPENING_PARENTHESES reduce using rule 121 (empty -> .)
    CONST_KW        reduce using rule 121 (empty -> .)
    TRUE_KW         reduce using rule 121 (empty -> .)
    FALSE_KW        reduce using rule 121 (empty -> .)
    STATIC_KW       shift and go to state 165
    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    ScopedVariableDec              shift and go to state 163
    statementList                  shift and go to state 166
    type                           shift and go to state 167
    empty                          shift and go to state 164
    scopedSpecifier                shift and go to state 168

state 118

    (35) localDeclarations -> empty .

    STATIC_KW       reduce using rule 35 (localDeclarations -> empty .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> empty .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> empty .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> empty .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> empty .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> empty .)
    INT_KW          reduce using rule 35 (localDeclarations -> empty .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> empty .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> empty .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> empty .)
    IF_KW           reduce using rule 35 (localDeclarations -> empty .)
    TILL_KW         reduce using rule 35 (localDeclarations -> empty .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> empty .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> empty .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> empty .)
    LETTER          reduce using rule 35 (localDeclarations -> empty .)
    TILDA           reduce using rule 35 (localDeclarations -> empty .)
    MINUS           reduce using rule 35 (localDeclarations -> empty .)
    TIMES           reduce using rule 35 (localDeclarations -> empty .)
    QUESTION_MARK   reduce using rule 35 (localDeclarations -> empty .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> empty .)
    CONST_KW        reduce using rule 35 (localDeclarations -> empty .)
    TRUE_KW         reduce using rule 35 (localDeclarations -> empty .)
    FALSE_KW        reduce using rule 35 (localDeclarations -> empty .)


state 119

    (108) alterable -> LETTER numOrletter .
    (113) inalterable -> LETTER numOrletter . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PLUSPLUS        reduce using rule 108 (alterable -> LETTER numOrletter .)
    MINUSMINUS      reduce using rule 108 (alterable -> LETTER numOrletter .)
    OPENING_BRACKET reduce using rule 108 (alterable -> LETTER numOrletter .)
    DOT             reduce using rule 108 (alterable -> LETTER numOrletter .)
    EQUAL           reduce using rule 108 (alterable -> LETTER numOrletter .)
    PLUSEQUAL       reduce using rule 108 (alterable -> LETTER numOrletter .)
    MINUSEQUAL      reduce using rule 108 (alterable -> LETTER numOrletter .)
    TIMESEQUAL      reduce using rule 108 (alterable -> LETTER numOrletter .)
    DIVIDEEQUAL     reduce using rule 108 (alterable -> LETTER numOrletter .)
    PLUS            reduce using rule 108 (alterable -> LETTER numOrletter .)
    MINUS           reduce using rule 108 (alterable -> LETTER numOrletter .)
    TIMES           reduce using rule 108 (alterable -> LETTER numOrletter .)
    DIVIDE          reduce using rule 108 (alterable -> LETTER numOrletter .)
    PERCENTAGE      reduce using rule 108 (alterable -> LETTER numOrletter .)
    LESSEQUAL       reduce using rule 108 (alterable -> LETTER numOrletter .)
    GREATEREQUAL    reduce using rule 108 (alterable -> LETTER numOrletter .)
    EQUALEQUAL      reduce using rule 108 (alterable -> LETTER numOrletter .)
    LESS_THAN       reduce using rule 108 (alterable -> LETTER numOrletter .)
    GREATER_THAN    reduce using rule 108 (alterable -> LETTER numOrletter .)
    NOTEQUAL        reduce using rule 108 (alterable -> LETTER numOrletter .)
    LOGICAL_AND     reduce using rule 108 (alterable -> LETTER numOrletter .)
    LOGICAL_OR      reduce using rule 108 (alterable -> LETTER numOrletter .)
    TILDA           reduce using rule 108 (alterable -> LETTER numOrletter .)
    AND             reduce using rule 108 (alterable -> LETTER numOrletter .)
    OR              reduce using rule 108 (alterable -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 108 (alterable -> LETTER numOrletter .)
    CLOSING_BRACKET reduce using rule 108 (alterable -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 108 (alterable -> LETTER numOrletter .)
    COMMA           reduce using rule 108 (alterable -> LETTER numOrletter .)
    OPENING_PARENTHESES shift and go to state 158


state 120

    (54) returnPhrase -> COMEBACK_KW SEMICOLON .

    CLOSING_BRACE   reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VOID_KW         reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    NUMBER          reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LETTER          reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    IF_KW           reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILDA           reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MINUS           reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIMES           reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE_KW         reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE_KW        reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OTHER_KW        reduce using rule 54 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 121

    (59) allExpression -> alterable PLUSPLUS .

    CLOSING_PARENTHESES reduce using rule 59 (allExpression -> alterable PLUSPLUS .)
    SEMICOLON       reduce using rule 59 (allExpression -> alterable PLUSPLUS .)
    CLOSING_BRACKET reduce using rule 59 (allExpression -> alterable PLUSPLUS .)
    COMMA           reduce using rule 59 (allExpression -> alterable PLUSPLUS .)


state 122

    (65) mathOp -> MINUSEQUAL .

    LETTER          reduce using rule 65 (mathOp -> MINUSEQUAL .)
    TILDA           reduce using rule 65 (mathOp -> MINUSEQUAL .)
    MINUS           reduce using rule 65 (mathOp -> MINUSEQUAL .)
    TIMES           reduce using rule 65 (mathOp -> MINUSEQUAL .)
    QUESTION_MARK   reduce using rule 65 (mathOp -> MINUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 65 (mathOp -> MINUSEQUAL .)
    CONST_KW        reduce using rule 65 (mathOp -> MINUSEQUAL .)
    TRUE_KW         reduce using rule 65 (mathOp -> MINUSEQUAL .)
    FALSE_KW        reduce using rule 65 (mathOp -> MINUSEQUAL .)


state 123

    (64) mathOp -> PLUSEQUAL .

    LETTER          reduce using rule 64 (mathOp -> PLUSEQUAL .)
    TILDA           reduce using rule 64 (mathOp -> PLUSEQUAL .)
    MINUS           reduce using rule 64 (mathOp -> PLUSEQUAL .)
    TIMES           reduce using rule 64 (mathOp -> PLUSEQUAL .)
    QUESTION_MARK   reduce using rule 64 (mathOp -> PLUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 64 (mathOp -> PLUSEQUAL .)
    CONST_KW        reduce using rule 64 (mathOp -> PLUSEQUAL .)
    TRUE_KW         reduce using rule 64 (mathOp -> PLUSEQUAL .)
    FALSE_KW        reduce using rule 64 (mathOp -> PLUSEQUAL .)


state 124

    (67) mathOp -> DIVIDEEQUAL .

    LETTER          reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    TILDA           reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    MINUS           reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    TIMES           reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    QUESTION_MARK   reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    OPENING_PARENTHESES reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    CONST_KW        reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    TRUE_KW         reduce using rule 67 (mathOp -> DIVIDEEQUAL .)
    FALSE_KW        reduce using rule 67 (mathOp -> DIVIDEEQUAL .)


state 125

    (63) mathOp -> EQUAL .

    LETTER          reduce using rule 63 (mathOp -> EQUAL .)
    TILDA           reduce using rule 63 (mathOp -> EQUAL .)
    MINUS           reduce using rule 63 (mathOp -> EQUAL .)
    TIMES           reduce using rule 63 (mathOp -> EQUAL .)
    QUESTION_MARK   reduce using rule 63 (mathOp -> EQUAL .)
    OPENING_PARENTHESES reduce using rule 63 (mathOp -> EQUAL .)
    CONST_KW        reduce using rule 63 (mathOp -> EQUAL .)
    TRUE_KW         reduce using rule 63 (mathOp -> EQUAL .)
    FALSE_KW        reduce using rule 63 (mathOp -> EQUAL .)


state 126

    (58) allExpression -> alterable mathOp . allExpression
    (62) allExpression -> alterable mathOp . alterable
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    unaryExpression                shift and go to state 57
    allExpression                  shift and go to state 169
    alterable                      shift and go to state 170
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 127

    (66) mathOp -> TIMESEQUAL .

    LETTER          reduce using rule 66 (mathOp -> TIMESEQUAL .)
    TILDA           reduce using rule 66 (mathOp -> TIMESEQUAL .)
    MINUS           reduce using rule 66 (mathOp -> TIMESEQUAL .)
    TIMES           reduce using rule 66 (mathOp -> TIMESEQUAL .)
    QUESTION_MARK   reduce using rule 66 (mathOp -> TIMESEQUAL .)
    OPENING_PARENTHESES reduce using rule 66 (mathOp -> TIMESEQUAL .)
    CONST_KW        reduce using rule 66 (mathOp -> TIMESEQUAL .)
    TRUE_KW         reduce using rule 66 (mathOp -> TIMESEQUAL .)
    FALSE_KW        reduce using rule 66 (mathOp -> TIMESEQUAL .)


state 128

    (60) allExpression -> alterable MINUSMINUS .

    CLOSING_PARENTHESES reduce using rule 60 (allExpression -> alterable MINUSMINUS .)
    SEMICOLON       reduce using rule 60 (allExpression -> alterable MINUSMINUS .)
    CLOSING_BRACKET reduce using rule 60 (allExpression -> alterable MINUSMINUS .)
    COMMA           reduce using rule 60 (allExpression -> alterable MINUSMINUS .)


state 129

    (25) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    NUMBER          reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    LETTER          reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 25 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 130

    (3) numOrletter -> LETTER .
    (108) alterable -> LETTER . numOrletter
    (113) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER

    SEMICOLON       reduce using rule 3 (numOrletter -> LETTER .)
    NUMBER          shift and go to state 7
    LETTER          shift and go to state 11

    numOrletter                    shift and go to state 119

state 131

    (56) returnPhrase -> GIVEBACK_KW numOrletter . SEMICOLON

    SEMICOLON       shift and go to state 171


state 132

    (55) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 172


state 133

    (57) continue -> CONTINUE_KW SEMICOLON .

    CLOSING_BRACE   reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    IF_KW           reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    LETTER          reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    TILDA           reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    MINUS           reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    TIMES           reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE_KW         reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE_KW        reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    OTHER_KW        reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    VOID_KW         reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    NUMBER          reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 57 (continue -> CONTINUE_KW SEMICOLON .)


state 134

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 173
    unaryExpression                shift and go to state 57
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 135

    (37) paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .

    COMMA           reduce using rule 37 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 37 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)


state 136

    (96) mathEXP -> mathEXP MINUS mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    MINUS           reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    LESSEQUAL       reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATEREQUAL    reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    EQUALEQUAL      reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    LESS_THAN       reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATER_THAN    reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    NOTEQUAL        reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_AND     reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_OR      reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    TILDA           reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    AND             reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    OR              reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_BRACKET reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    SEMICOLON       reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    COMMA           reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 96
    PERCENTAGE      shift and go to state 98

  ! TIMES           [ reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 96 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PLUS            [ shift and go to state 99 ]
  ! MINUS           [ shift and go to state 87 ]


state 137

    (85) relExpression -> mathEXP compareType mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP

    LOGICAL_AND     reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    LOGICAL_OR      reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    TILDA           reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    AND             reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    OR              reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    COMMA           reduce using rule 85 (relExpression -> mathEXP compareType mathEXP .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 87
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 96
    PERCENTAGE      shift and go to state 98


state 138

    (98) mathEXP -> mathEXP DIVIDE mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    MINUS           reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TIMES           reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    DIVIDE          reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESSEQUAL       reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATEREQUAL    reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    EQUALEQUAL      reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESS_THAN       reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATER_THAN    reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    NOTEQUAL        reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_AND     reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_OR      reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TILDA           reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    AND             reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    OR              reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_BRACKET reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    SEMICOLON       reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    COMMA           reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .)
    PERCENTAGE      shift and go to state 98

  ! PERCENTAGE      [ reduce using rule 98 (mathEXP -> mathEXP DIVIDE mathEXP .) ]
  ! PLUS            [ shift and go to state 99 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]


state 139

    (97) mathEXP -> mathEXP TIMES mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    MINUS           reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    TIMES           reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    DIVIDE          reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    LESSEQUAL       reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATEREQUAL    reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    EQUALEQUAL      reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    LESS_THAN       reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATER_THAN    reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    NOTEQUAL        reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_PARENTHESES reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_AND     reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_OR      reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    TILDA           reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    AND             reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    OR              reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_BRACKET reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    SEMICOLON       reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    COMMA           reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .)
    PERCENTAGE      shift and go to state 98

  ! PERCENTAGE      [ reduce using rule 97 (mathEXP -> mathEXP TIMES mathEXP .) ]
  ! PLUS            [ shift and go to state 99 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]


state 140

    (99) mathEXP -> mathEXP PERCENTAGE mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    MINUS           reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TIMES           reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    DIVIDE          reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    PERCENTAGE      reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESSEQUAL       reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATEREQUAL    reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    EQUALEQUAL      reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESS_THAN       reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATER_THAN    reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    NOTEQUAL        reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_AND     reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_OR      reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TILDA           reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    AND             reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    OR              reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_BRACKET reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    SEMICOLON       reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    COMMA           reduce using rule 99 (mathEXP -> mathEXP PERCENTAGE mathEXP .)

  ! PLUS            [ shift and go to state 99 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! PERCENTAGE      [ shift and go to state 98 ]


state 141

    (95) mathEXP -> mathEXP PLUS mathEXP .
    (95) mathEXP -> mathEXP . PLUS mathEXP
    (96) mathEXP -> mathEXP . MINUS mathEXP
    (97) mathEXP -> mathEXP . TIMES mathEXP
    (98) mathEXP -> mathEXP . DIVIDE mathEXP
    (99) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    MINUS           reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    LESSEQUAL       reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATEREQUAL    reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    EQUALEQUAL      reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    LESS_THAN       reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATER_THAN    reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    NOTEQUAL        reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_AND     reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_OR      reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    TILDA           reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    AND             reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    OR              reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_BRACKET reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    SEMICOLON       reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    COMMA           reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 96
    PERCENTAGE      shift and go to state 98

  ! TIMES           [ reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 95 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PLUS            [ shift and go to state 99 ]
  ! MINUS           [ shift and go to state 87 ]


state 142

    (111) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PLUS            reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND             reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR              reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 111 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 143

    (78) eachExpression -> eachExpression AND eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    LOGICAL_OR      reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    AND             reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    OR              reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    COMMA           reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    SEMICOLON       reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_BRACKET reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .)
    TILDA           shift and go to state 104

  ! TILDA           [ reduce using rule 78 (eachExpression -> eachExpression AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 144

    (79) eachExpression -> eachExpression AND THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 174
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 145

    (80) eachExpression -> eachExpression AND ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 175
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 146

    (68) eachExpression -> eachExpression LOGICAL_AND eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    LOGICAL_OR      reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    AND             reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    OR              reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    COMMA           reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    SEMICOLON       reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_BRACKET reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    TILDA           shift and go to state 104

  ! TILDA           [ reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 147

    (69) eachExpression -> eachExpression LOGICAL_AND THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 176
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 148

    (70) eachExpression -> eachExpression LOGICAL_AND ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 177
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 149

    (74) eachExpression -> eachExpression TILDA eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    TILDA           reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    AND             reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    OR              reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    COMMA           reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    SEMICOLON       reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 74 (eachExpression -> eachExpression TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 150

    (75) eachExpression -> eachExpression TILDA THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 178
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 151

    (77) eachExpression -> eachExpression TILDA ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 179
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 152

    (81) eachExpression -> eachExpression OR eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .)
    OR              reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .)
    COMMA           reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .)
    SEMICOLON       reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_BRACKET reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .) ]
  ! TILDA           [ reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .) ]
  ! AND             [ reduce using rule 81 (eachExpression -> eachExpression OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 153

    (82) eachExpression -> eachExpression OR THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 180
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 154

    (83) eachExpression -> eachExpression OR ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 181
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 155

    (71) eachExpression -> eachExpression LOGICAL_OR eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    OR              reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    COMMA           reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    SEMICOLON       reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_BRACKET reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! TILDA           [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! AND             [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 156

    (72) eachExpression -> eachExpression LOGICAL_OR THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 182
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 157

    (73) eachExpression -> eachExpression LOGICAL_OR ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    LETTER          shift and go to state 54
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 183
    relExpression                  shift and go to state 62
    alterable                      shift and go to state 60
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    factor                         shift and go to state 63
    unaryop                        shift and go to state 53

state 158

    (113) inalterable -> LETTER numOrletter OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (114) args -> . arguments
    (115) args -> . empty
    (116) arguments -> . arguments COMMA allExpression
    (117) arguments -> . allExpression
    (121) empty -> .
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    CLOSING_PARENTHESES reduce using rule 121 (empty -> .)
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    args                           shift and go to state 184
    relExpression                  shift and go to state 62
    empty                          shift and go to state 185
    allExpression                  shift and go to state 186
    alterable                      shift and go to state 74
    constant                       shift and go to state 61
    arguments                      shift and go to state 187
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    factor                         shift and go to state 63

state 159

    (110) alterable -> alterable DOT LETTER .

    OPENING_BRACKET reduce using rule 110 (alterable -> alterable DOT LETTER .)
    DOT             reduce using rule 110 (alterable -> alterable DOT LETTER .)
    PLUS            reduce using rule 110 (alterable -> alterable DOT LETTER .)
    MINUS           reduce using rule 110 (alterable -> alterable DOT LETTER .)
    TIMES           reduce using rule 110 (alterable -> alterable DOT LETTER .)
    DIVIDE          reduce using rule 110 (alterable -> alterable DOT LETTER .)
    PERCENTAGE      reduce using rule 110 (alterable -> alterable DOT LETTER .)
    CLOSING_PARENTHESES reduce using rule 110 (alterable -> alterable DOT LETTER .)
    LOGICAL_AND     reduce using rule 110 (alterable -> alterable DOT LETTER .)
    LOGICAL_OR      reduce using rule 110 (alterable -> alterable DOT LETTER .)
    TILDA           reduce using rule 110 (alterable -> alterable DOT LETTER .)
    AND             reduce using rule 110 (alterable -> alterable DOT LETTER .)
    OR              reduce using rule 110 (alterable -> alterable DOT LETTER .)
    CLOSING_BRACKET reduce using rule 110 (alterable -> alterable DOT LETTER .)
    SEMICOLON       reduce using rule 110 (alterable -> alterable DOT LETTER .)
    COMMA           reduce using rule 110 (alterable -> alterable DOT LETTER .)
    LESSEQUAL       reduce using rule 110 (alterable -> alterable DOT LETTER .)
    GREATEREQUAL    reduce using rule 110 (alterable -> alterable DOT LETTER .)
    EQUALEQUAL      reduce using rule 110 (alterable -> alterable DOT LETTER .)
    LESS_THAN       reduce using rule 110 (alterable -> alterable DOT LETTER .)
    GREATER_THAN    reduce using rule 110 (alterable -> alterable DOT LETTER .)
    NOTEQUAL        reduce using rule 110 (alterable -> alterable DOT LETTER .)
    PLUSPLUS        reduce using rule 110 (alterable -> alterable DOT LETTER .)
    MINUSMINUS      reduce using rule 110 (alterable -> alterable DOT LETTER .)
    EQUAL           reduce using rule 110 (alterable -> alterable DOT LETTER .)
    PLUSEQUAL       reduce using rule 110 (alterable -> alterable DOT LETTER .)
    MINUSEQUAL      reduce using rule 110 (alterable -> alterable DOT LETTER .)
    TIMESEQUAL      reduce using rule 110 (alterable -> alterable DOT LETTER .)
    DIVIDEEQUAL     reduce using rule 110 (alterable -> alterable DOT LETTER .)


state 160

    (109) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 188


state 161

    (26) function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 26 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 162

    (53) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 189
    LOGICAL_AND     shift and go to state 103
    LOGICAL_OR      shift and go to state 107
    TILDA           shift and go to state 104
    AND             shift and go to state 102
    OR              shift and go to state 106


state 163

    (34) localDeclarations -> localDeclarations ScopedVariableDec .

    STATIC_KW       reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOLEAN_KW      reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHARACTER_KW    reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INTEGER_KW      reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHAR_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOL_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INT_KW          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CLOSING_BRACE   reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    SEMICOLON       reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_BRACE   reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    IF_KW           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILL_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    COMEBACK_KW     reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GIVEBACK_KW     reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONTINUE_KW     reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    LETTER          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILDA           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    MINUS           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TIMES           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QUESTION_MARK   reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_PARENTHESES reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONST_KW        reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TRUE_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    FALSE_KW        reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 164

    (46) statementList -> empty .

    CLOSING_BRACE   reduce using rule 46 (statementList -> empty .)
    SEMICOLON       reduce using rule 46 (statementList -> empty .)
    OPENING_BRACE   reduce using rule 46 (statementList -> empty .)
    IF_KW           reduce using rule 46 (statementList -> empty .)
    TILL_KW         reduce using rule 46 (statementList -> empty .)
    COMEBACK_KW     reduce using rule 46 (statementList -> empty .)
    GIVEBACK_KW     reduce using rule 46 (statementList -> empty .)
    CONTINUE_KW     reduce using rule 46 (statementList -> empty .)
    LETTER          reduce using rule 46 (statementList -> empty .)
    TILDA           reduce using rule 46 (statementList -> empty .)
    MINUS           reduce using rule 46 (statementList -> empty .)
    TIMES           reduce using rule 46 (statementList -> empty .)
    QUESTION_MARK   reduce using rule 46 (statementList -> empty .)
    OPENING_PARENTHESES reduce using rule 46 (statementList -> empty .)
    CONST_KW        reduce using rule 46 (statementList -> empty .)
    TRUE_KW         reduce using rule 46 (statementList -> empty .)
    FALSE_KW        reduce using rule 46 (statementList -> empty .)


state 165

    (16) scopedSpecifier -> STATIC_KW . type
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 2
    CHARACTER_KW    shift and go to state 13
    INTEGER_KW      shift and go to state 3
    CHAR_KW         shift and go to state 12
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 1

    type                           shift and go to state 190

state 166

    (44) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (45) statementList -> statementList . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    CLOSING_BRACE   shift and go to state 191
    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 192

state 167

    (17) scopedSpecifier -> type .

    LETTER          reduce using rule 17 (scopedSpecifier -> type .)


state 168

    (9) ScopedVariableDec -> scopedSpecifier . variableList
    (10) variableList -> . variableList COMMA varInitialization
    (11) variableList -> . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . LETTER

    LETTER          shift and go to state 40

    varForm                        shift and go to state 18
    varInitialization              shift and go to state 20
    variableList                   shift and go to state 193

state 169

    (58) allExpression -> alterable mathOp allExpression .

    CLOSING_PARENTHESES reduce using rule 58 (allExpression -> alterable mathOp allExpression .)
    SEMICOLON       reduce using rule 58 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 58 (allExpression -> alterable mathOp allExpression .)
    COMMA           reduce using rule 58 (allExpression -> alterable mathOp allExpression .)


state 170

    (62) allExpression -> alterable mathOp alterable .
    (58) allExpression -> alterable . mathOp allExpression
    (59) allExpression -> alterable . PLUSPLUS
    (60) allExpression -> alterable . MINUSMINUS
    (62) allExpression -> alterable . mathOp alterable
    (109) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> alterable . DOT LETTER
    (107) factor -> alterable .
    (63) mathOp -> . EQUAL
    (64) mathOp -> . PLUSEQUAL
    (65) mathOp -> . MINUSEQUAL
    (66) mathOp -> . TIMESEQUAL
    (67) mathOp -> . DIVIDEEQUAL

  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for CLOSING_PARENTHESES resolved using rule 62 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for CLOSING_BRACKET resolved using rule 62 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (allExpression -> alterable mathOp alterable .)
    CLOSING_PARENTHESES reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    SEMICOLON       reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    CLOSING_BRACKET reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    COMMA           reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    PLUSPLUS        shift and go to state 121
    MINUSMINUS      shift and go to state 128
    OPENING_BRACKET shift and go to state 112
    DOT             shift and go to state 111
    PLUS            reduce using rule 107 (factor -> alterable .)
    MINUS           reduce using rule 107 (factor -> alterable .)
    TIMES           reduce using rule 107 (factor -> alterable .)
    DIVIDE          reduce using rule 107 (factor -> alterable .)
    PERCENTAGE      reduce using rule 107 (factor -> alterable .)
    LESSEQUAL       reduce using rule 107 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 107 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 107 (factor -> alterable .)
    LESS_THAN       reduce using rule 107 (factor -> alterable .)
    GREATER_THAN    reduce using rule 107 (factor -> alterable .)
    NOTEQUAL        reduce using rule 107 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 107 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 107 (factor -> alterable .)
    TILDA           reduce using rule 107 (factor -> alterable .)
    AND             reduce using rule 107 (factor -> alterable .)
    OR              reduce using rule 107 (factor -> alterable .)
    EQUAL           shift and go to state 125
    PLUSEQUAL       shift and go to state 123
    MINUSEQUAL      shift and go to state 122
    TIMESEQUAL      shift and go to state 127
    DIVIDEEQUAL     shift and go to state 124

  ! SEMICOLON       [ reduce using rule 107 (factor -> alterable .) ]
  ! CLOSING_PARENTHESES [ reduce using rule 107 (factor -> alterable .) ]
  ! CLOSING_BRACKET [ reduce using rule 107 (factor -> alterable .) ]
  ! COMMA           [ reduce using rule 107 (factor -> alterable .) ]

    mathOp                         shift and go to state 126

state 171

    (56) returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .

    CLOSING_BRACE   reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    VOID_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    NUMBER          reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    LETTER          reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    BOOLEAN_KW      reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CHARACTER_KW    reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    INTEGER_KW      reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CHAR_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    BOOL_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    INT_KW          reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    $end            reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    SEMICOLON       reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OPENING_BRACE   reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    IF_KW           reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TILL_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    COMEBACK_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    GIVEBACK_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CONTINUE_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TILDA           reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    MINUS           reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TIMES           reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    QUESTION_MARK   reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CONST_KW        reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TRUE_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    FALSE_KW        reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OTHER_KW        reduce using rule 56 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)


state 172

    (55) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VOID_KW         reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    NUMBER          reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LETTER          reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    IF_KW           reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILDA           reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MINUS           reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIMES           reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 55 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 173

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 194
    LOGICAL_AND     shift and go to state 103
    LOGICAL_OR      shift and go to state 107
    TILDA           shift and go to state 104
    AND             shift and go to state 102
    OR              shift and go to state 106


state 174

    (79) eachExpression -> eachExpression AND THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    OR              reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    COMMA           reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 79 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 175

    (80) eachExpression -> eachExpression AND ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    TILDA           reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    AND             reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    OR              reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    COMMA           reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 80 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 176

    (69) eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    OR              reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    COMMA           reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 177

    (70) eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    TILDA           reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    AND             reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    OR              reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    COMMA           reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 70 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 178

    (75) eachExpression -> eachExpression TILDA THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    OR              reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    COMMA           reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 75 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 179

    (77) eachExpression -> eachExpression TILDA ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    TILDA           reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    AND             reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    OR              reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    COMMA           reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 77 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 180

    (82) eachExpression -> eachExpression OR THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    OR              reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    COMMA           reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 82 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 181

    (83) eachExpression -> eachExpression OR ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    TILDA           reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    AND             reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    OR              reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    COMMA           reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 83 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 182

    (72) eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    OR              reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    COMMA           reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 103
    TILDA           shift and go to state 104
    AND             shift and go to state 102

  ! LOGICAL_AND     [ reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! OR              [ shift and go to state 106 ]


state 183

    (73) eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> eachExpression . TILDA eachExpression
    (75) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (77) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (78) eachExpression -> eachExpression . AND eachExpression
    (79) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (80) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (81) eachExpression -> eachExpression . OR eachExpression
    (82) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (83) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    TILDA           reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    AND             reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    OR              reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    COMMA           reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 103 ]
  ! LOGICAL_OR      [ shift and go to state 107 ]
  ! TILDA           [ shift and go to state 104 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 106 ]


state 184

    (113) inalterable -> LETTER numOrletter OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 195


state 185

    (115) args -> empty .

    CLOSING_PARENTHESES reduce using rule 115 (args -> empty .)


state 186

    (117) arguments -> allExpression .

    COMMA           reduce using rule 117 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 117 (arguments -> allExpression .)


state 187

    (114) args -> arguments .
    (116) arguments -> arguments . COMMA allExpression

    CLOSING_PARENTHESES reduce using rule 114 (args -> arguments .)
    COMMA           shift and go to state 196


state 188

    (109) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    OPENING_BRACKET reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DOT             reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUS            reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDE          reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PERCENTAGE      reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_AND     reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_OR      reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND             reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR              reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESSEQUAL       reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATEREQUAL    reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUALEQUAL      reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESS_THAN       reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATER_THAN    reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NOTEQUAL        reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSPLUS        reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSMINUS      reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUAL           reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSEQUAL       reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSEQUAL      reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMESEQUAL      reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDEEQUAL     reduce using rule 109 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 189

    (53) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 197

state 190

    (16) scopedSpecifier -> STATIC_KW type .

    LETTER          reduce using rule 16 (scopedSpecifier -> STATIC_KW type .)


state 191

    (44) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    CLOSING_BRACE   reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    NUMBER          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILDA           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MINUS           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIMES           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QUESTION_MARK   reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE_KW        reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 192

    (45) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 45 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 45 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 45 (statementList -> statementList statement .)
    IF_KW           reduce using rule 45 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 45 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 45 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 45 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 45 (statementList -> statementList statement .)
    LETTER          reduce using rule 45 (statementList -> statementList statement .)
    TILDA           reduce using rule 45 (statementList -> statementList statement .)
    MINUS           reduce using rule 45 (statementList -> statementList statement .)
    TIMES           reduce using rule 45 (statementList -> statementList statement .)
    QUESTION_MARK   reduce using rule 45 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 45 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 45 (statementList -> statementList statement .)
    TRUE_KW         reduce using rule 45 (statementList -> statementList statement .)
    FALSE_KW        reduce using rule 45 (statementList -> statementList statement .)


state 193

    (9) ScopedVariableDec -> scopedSpecifier variableList .
    (10) variableList -> variableList . COMMA varInitialization

    STATIC_KW       reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOLEAN_KW      reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHARACTER_KW    reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    INTEGER_KW      reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHAR_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOL_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    INT_KW          reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CLOSING_BRACE   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    SEMICOLON       reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_BRACE   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    IF_KW           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILL_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMEBACK_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    GIVEBACK_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONTINUE_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    LETTER          reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILDA           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    MINUS           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TIMES           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    QUESTION_MARK   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_PARENTHESES reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONST_KW        reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TRUE_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    FALSE_KW        reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMMA           shift and go to state 31


state 194

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . ifBody
    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (51) ifBody -> . statement
    (52) ifBody -> . statement OTHER_KW statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    OPENING_BRACE   shift and go to state 198
    SEMICOLON       shift and go to state 79
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    ifBody                         shift and go to state 200
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 199

state 195

    (113) inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PLUS            reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MINUS           reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIMES           reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TILDA           reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND             reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR              reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMMA           reduce using rule 113 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 196

    (116) arguments -> arguments COMMA . allExpression
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    relExpression                  shift and go to state 62
    allExpression                  shift and go to state 201
    alterable                      shift and go to state 74
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryExpression                shift and go to state 57
    unaryop                        shift and go to state 53
    factor                         shift and go to state 63

state 197

    (53) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    IF_KW           reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILDA           reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MINUS           reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIMES           reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QUESTION_MARK   reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE_KW         reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE_KW        reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OTHER_KW        reduce using rule 53 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)


state 198

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE . ifBody ifBody CLOSING_BRACE
    (44) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (51) ifBody -> . statement
    (52) ifBody -> . statement OTHER_KW statement
    (34) localDeclarations -> . localDeclarations ScopedVariableDec
    (35) localDeclarations -> . empty
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (121) empty -> .
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for OPENING_BRACE resolved as shift
  ! shift/reduce conflict for IF_KW resolved as shift
  ! shift/reduce conflict for TILL_KW resolved as shift
  ! shift/reduce conflict for COMEBACK_KW resolved as shift
  ! shift/reduce conflict for GIVEBACK_KW resolved as shift
  ! shift/reduce conflict for CONTINUE_KW resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for OPENING_PARENTHESES resolved as shift
  ! shift/reduce conflict for CONST_KW resolved as shift
  ! shift/reduce conflict for TRUE_KW resolved as shift
  ! shift/reduce conflict for FALSE_KW resolved as shift
    STATIC_KW       reduce using rule 121 (empty -> .)
    BOOLEAN_KW      reduce using rule 121 (empty -> .)
    CHARACTER_KW    reduce using rule 121 (empty -> .)
    INTEGER_KW      reduce using rule 121 (empty -> .)
    CHAR_KW         reduce using rule 121 (empty -> .)
    BOOL_KW         reduce using rule 121 (empty -> .)
    INT_KW          reduce using rule 121 (empty -> .)
    CLOSING_BRACE   reduce using rule 121 (empty -> .)
    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

  ! SEMICOLON       [ reduce using rule 121 (empty -> .) ]
  ! OPENING_BRACE   [ reduce using rule 121 (empty -> .) ]
  ! IF_KW           [ reduce using rule 121 (empty -> .) ]
  ! TILL_KW         [ reduce using rule 121 (empty -> .) ]
  ! COMEBACK_KW     [ reduce using rule 121 (empty -> .) ]
  ! GIVEBACK_KW     [ reduce using rule 121 (empty -> .) ]
  ! CONTINUE_KW     [ reduce using rule 121 (empty -> .) ]
  ! LETTER          [ reduce using rule 121 (empty -> .) ]
  ! TILDA           [ reduce using rule 121 (empty -> .) ]
  ! MINUS           [ reduce using rule 121 (empty -> .) ]
  ! TIMES           [ reduce using rule 121 (empty -> .) ]
  ! QUESTION_MARK   [ reduce using rule 121 (empty -> .) ]
  ! OPENING_PARENTHESES [ reduce using rule 121 (empty -> .) ]
  ! CONST_KW        [ reduce using rule 121 (empty -> .) ]
  ! TRUE_KW         [ reduce using rule 121 (empty -> .) ]
  ! FALSE_KW        [ reduce using rule 121 (empty -> .) ]

    ifBody                         shift and go to state 202
    returnPhrase                   shift and go to state 78
    eachExpression                 shift and go to state 77
    empty                          shift and go to state 118
    localDeclarations              shift and go to state 117
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    compoundPhrase                 shift and go to state 67
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    continue                       shift and go to state 84
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 199
    phrase                         shift and go to state 75

state 199

    (51) ifBody -> statement .
    (52) ifBody -> statement . OTHER_KW statement

  ! shift/reduce conflict for OTHER_KW resolved as shift
    CLOSING_BRACE   reduce using rule 51 (ifBody -> statement .)
    SEMICOLON       reduce using rule 51 (ifBody -> statement .)
    OPENING_BRACE   reduce using rule 51 (ifBody -> statement .)
    IF_KW           reduce using rule 51 (ifBody -> statement .)
    TILL_KW         reduce using rule 51 (ifBody -> statement .)
    COMEBACK_KW     reduce using rule 51 (ifBody -> statement .)
    GIVEBACK_KW     reduce using rule 51 (ifBody -> statement .)
    CONTINUE_KW     reduce using rule 51 (ifBody -> statement .)
    LETTER          reduce using rule 51 (ifBody -> statement .)
    TILDA           reduce using rule 51 (ifBody -> statement .)
    MINUS           reduce using rule 51 (ifBody -> statement .)
    TIMES           reduce using rule 51 (ifBody -> statement .)
    QUESTION_MARK   reduce using rule 51 (ifBody -> statement .)
    OPENING_PARENTHESES reduce using rule 51 (ifBody -> statement .)
    CONST_KW        reduce using rule 51 (ifBody -> statement .)
    TRUE_KW         reduce using rule 51 (ifBody -> statement .)
    FALSE_KW        reduce using rule 51 (ifBody -> statement .)
    VOID_KW         reduce using rule 51 (ifBody -> statement .)
    NUMBER          reduce using rule 51 (ifBody -> statement .)
    BOOLEAN_KW      reduce using rule 51 (ifBody -> statement .)
    CHARACTER_KW    reduce using rule 51 (ifBody -> statement .)
    INTEGER_KW      reduce using rule 51 (ifBody -> statement .)
    CHAR_KW         reduce using rule 51 (ifBody -> statement .)
    BOOL_KW         reduce using rule 51 (ifBody -> statement .)
    INT_KW          reduce using rule 51 (ifBody -> statement .)
    $end            reduce using rule 51 (ifBody -> statement .)
    OTHER_KW        shift and go to state 203

  ! OTHER_KW        [ reduce using rule 51 (ifBody -> statement .) ]


state 200

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .

    OTHER_KW        reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    SEMICOLON       reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_BRACE   reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    IF_KW           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TILL_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    COMEBACK_KW     reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    GIVEBACK_KW     reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONTINUE_KW     reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    LETTER          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TILDA           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    MINUS           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TIMES           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    QUESTION_MARK   reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_PARENTHESES reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONST_KW        reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TRUE_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    FALSE_KW        reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CLOSING_BRACE   reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    VOID_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    NUMBER          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOLEAN_KW      reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHARACTER_KW    reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INTEGER_KW      reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHAR_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOL_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INT_KW          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    $end            reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)


state 201

    (116) arguments -> arguments COMMA allExpression .

    COMMA           reduce using rule 116 (arguments -> arguments COMMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 116 (arguments -> arguments COMMA allExpression .)


state 202

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody . ifBody CLOSING_BRACE
    (51) ifBody -> . statement
    (52) ifBody -> . statement OTHER_KW statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    ifBody                         shift and go to state 204
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 199

state 203

    (52) ifBody -> statement OTHER_KW . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (53) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (54) returnPhrase -> . COMEBACK_KW SEMICOLON
    (55) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (57) continue -> . CONTINUE_KW SEMICOLON
    (58) allExpression -> . alterable mathOp allExpression
    (59) allExpression -> . alterable PLUSPLUS
    (60) allExpression -> . alterable MINUSMINUS
    (61) allExpression -> . eachExpression
    (62) allExpression -> . alterable mathOp alterable
    (108) alterable -> . LETTER numOrletter
    (109) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (110) alterable -> . alterable DOT LETTER
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression TILDA eachExpression
    (75) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (76) eachExpression -> . TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (78) eachExpression -> . eachExpression AND eachExpression
    (79) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (80) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (81) eachExpression -> . eachExpression OR eachExpression
    (82) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (83) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (84) eachExpression -> . relExpression
    (85) relExpression -> . mathEXP compareType mathEXP
    (86) relExpression -> . mathEXP
    (95) mathEXP -> . mathEXP PLUS mathEXP
    (96) mathEXP -> . mathEXP MINUS mathEXP
    (97) mathEXP -> . mathEXP TIMES mathEXP
    (98) mathEXP -> . mathEXP DIVIDE mathEXP
    (99) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (100) mathEXP -> . unaryExpression
    (101) unaryExpression -> . unaryop unaryExpression
    (102) unaryExpression -> . factor
    (103) unaryop -> . MINUS
    (104) unaryop -> . TIMES
    (105) unaryop -> . QUESTION_MARK
    (106) factor -> . inalterable
    (107) factor -> . alterable
    (111) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (112) inalterable -> . constant
    (113) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (118) constant -> . CONST_KW
    (119) constant -> . TRUE_KW
    (120) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 79
    OPENING_BRACE   shift and go to state 70
    IF_KW           shift and go to state 83
    TILL_KW         shift and go to state 68
    COMEBACK_KW     shift and go to state 73
    GIVEBACK_KW     shift and go to state 80
    CONTINUE_KW     shift and go to state 82
    LETTER          shift and go to state 71
    TILDA           shift and go to state 51
    MINUS           shift and go to state 47
    TIMES           shift and go to state 52
    QUESTION_MARK   shift and go to state 56
    OPENING_PARENTHESES shift and go to state 48
    CONST_KW        shift and go to state 58
    TRUE_KW         shift and go to state 50
    FALSE_KW        shift and go to state 55

    eachExpression                 shift and go to state 77
    compoundPhrase                 shift and go to state 67
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 84
    constant                       shift and go to state 61
    inalterable                    shift and go to state 59
    mathEXP                        shift and go to state 46
    unaryop                        shift and go to state 53
    iterationPhrase                shift and go to state 72
    unaryExpression                shift and go to state 57
    selectPhrase                   shift and go to state 81
    allExpression                  shift and go to state 69
    alterable                      shift and go to state 74
    phrase                         shift and go to state 75
    relExpression                  shift and go to state 62
    factor                         shift and go to state 63
    statement                      shift and go to state 205

state 204

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 206


state 205

    (52) ifBody -> statement OTHER_KW statement .

    CLOSING_BRACE   reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    SEMICOLON       reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OPENING_BRACE   reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    IF_KW           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TILL_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    COMEBACK_KW     reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    GIVEBACK_KW     reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CONTINUE_KW     reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    LETTER          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TILDA           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    MINUS           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TIMES           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    QUESTION_MARK   reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OPENING_PARENTHESES reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CONST_KW        reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TRUE_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    FALSE_KW        reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    VOID_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    NUMBER          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    BOOLEAN_KW      reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CHARACTER_KW    reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    INTEGER_KW      reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CHAR_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    BOOL_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    INT_KW          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    $end            reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OTHER_KW        reduce using rule 52 (ifBody -> statement OTHER_KW statement .)


state 206

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .

    OTHER_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    SEMICOLON       reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    IF_KW           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TILL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    LETTER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TILDA           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    MINUS           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TIMES           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    QUESTION_MARK   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONST_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TRUE_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    FALSE_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    VOID_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    NUMBER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHAR_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INT_KW          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    $end            reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LETTER in state 40 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 198 resolved as shift
WARNING: shift/reduce conflict for OPENING_BRACE in state 198 resolved as shift
WARNING: shift/reduce conflict for IF_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for TILL_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for COMEBACK_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for GIVEBACK_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 198 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 198 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 198 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 198 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 198 resolved as shift
WARNING: shift/reduce conflict for OPENING_PARENTHESES in state 198 resolved as shift
WARNING: shift/reduce conflict for CONST_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for TRUE_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for FALSE_KW in state 198 resolved as shift
WARNING: shift/reduce conflict for OTHER_KW in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 170 resolved using rule (allExpression -> alterable mathOp alterable)
WARNING: rejected rule (factor -> alterable) in state 170
