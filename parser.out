Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrletter -> NUMBER
Rule 3     numOrletter -> VarName
Rule 4     list -> list declaration
Rule 5     list -> declaration
Rule 6     declaration -> function
Rule 7     declaration -> varDeclaration
Rule 8     varDeclaration -> type variableList SEMICOLON
Rule 9     ScopedVariableDec -> scopedSpecifier variableList
Rule 10    variableList -> variableList COMMA varInitialization
Rule 11    variableList -> varInitialization
Rule 12    varInitialization -> varForm
Rule 13    varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 14    varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
Rule 15    varForm -> VarName
Rule 16    scopedSpecifier -> STATIC_KW type
Rule 17    scopedSpecifier -> type
Rule 18    type -> BOOLEAN_KW
Rule 19    type -> CHARACTER_KW
Rule 20    type -> INTEGER_KW
Rule 21    type -> CHAR_KW
Rule 22    type -> BOOL_KW
Rule 23    type -> INT_KW
Rule 24    function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 25    function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 26    function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 27    function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> empty
Rule 30    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList COMMA paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> localDeclarations ScopedVariableDec
Rule 36    localDeclarations -> empty
Rule 37    paramId -> VarName
Rule 38    paramId -> VarName OPENING_BRACKET CLOSING_BRACKET
Rule 39    core_statement -> matched
Rule 40    core_statement -> unmatched
Rule 41    matched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW matched
Rule 42    matched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW matched
Rule 43    matched -> statement
Rule 44    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched
Rule 45    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE
Rule 46    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES matched OTHER_KW unmatched
Rule 47    unmatched -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE matched CLOSING_BRACE OTHER_KW unmatched
Rule 48    statement -> phrase
Rule 49    statement -> compoundPhrase
Rule 50    statement -> iterationPhrase
Rule 51    statement -> returnPhrase
Rule 52    statement -> continue
Rule 53    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 54    statementList -> statementList statement
Rule 55    statementList -> empty
Rule 56    phrase -> allExpression SEMICOLON
Rule 57    phrase -> SEMICOLON
Rule 58    ifBody -> matched
Rule 59    ifBody -> matched OTHER_KW matched
Rule 60    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 61    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 62    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 63    continue -> CONTINUE_KW SEMICOLON
Rule 64    allExpression -> alterable mathOp allExpression
Rule 65    allExpression -> alterable PLUSPLUS
Rule 66    allExpression -> alterable MINUSMINUS
Rule 67    allExpression -> eachExpression
Rule 68    allExpression -> alterable mathOp NUMBER
Rule 69    mathOp -> EQUAL
Rule 70    mathOp -> PLUSEQUAL
Rule 71    mathOp -> MINUSEQUAL
Rule 72    mathOp -> TIMESEQUAL
Rule 73    mathOp -> DIVIDEEQUAL
Rule 74    eachExpression -> eachExpression LOGICAL_AND eachExpression
Rule 75    eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression
Rule 76    eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression
Rule 77    eachExpression -> eachExpression LOGICAL_OR eachExpression
Rule 78    eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression
Rule 79    eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression
Rule 80    eachExpression -> eachExpression TILDA eachExpression
Rule 81    eachExpression -> eachExpression TILDA THEN_KW eachExpression
Rule 82    eachExpression -> TILDA eachExpression
Rule 83    eachExpression -> eachExpression TILDA ELSE_KW eachExpression
Rule 84    eachExpression -> eachExpression AND eachExpression
Rule 85    eachExpression -> eachExpression AND THEN_KW eachExpression
Rule 86    eachExpression -> eachExpression AND ELSE_KW eachExpression
Rule 87    eachExpression -> eachExpression OR eachExpression
Rule 88    eachExpression -> eachExpression OR THEN_KW eachExpression
Rule 89    eachExpression -> eachExpression OR ELSE_KW eachExpression
Rule 90    eachExpression -> relExpression
Rule 91    relExpression -> mathEXP compareType mathEXP
Rule 92    relExpression -> mathEXP
Rule 93    compareType -> equal
Rule 94    compareType -> nonEqual
Rule 95    equal -> LESSEQUAL
Rule 96    equal -> GREATEREQUAL
Rule 97    equal -> EQUALEQUAL
Rule 98    nonEqual -> LESS_THAN
Rule 99    nonEqual -> GREATER_THAN
Rule 100   nonEqual -> NOTEQUAL
Rule 101   mathEXP -> mathEXP PLUS mathEXP
Rule 102   mathEXP -> mathEXP MINUS mathEXP
Rule 103   mathEXP -> mathEXP TIMES mathEXP
Rule 104   mathEXP -> mathEXP DIVIDE mathEXP
Rule 105   mathEXP -> mathEXP PERCENTAGE mathEXP
Rule 106   mathEXP -> unaryExpression
Rule 107   unaryExpression -> unaryop unaryExpression
Rule 108   unaryExpression -> factor
Rule 109   unaryop -> MINUS
Rule 110   unaryop -> TIMES
Rule 111   unaryop -> QUESTION_MARK
Rule 112   factor -> inalterable
Rule 113   factor -> alterable
Rule 114   alterable -> VarName
Rule 115   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 116   alterable -> alterable DOT VarName
Rule 117   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 118   inalterable -> constant
Rule 119   inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 120   args -> arguments
Rule 121   args -> empty
Rule 122   arguments -> arguments COMMA allExpression
Rule 123   arguments -> allExpression
Rule 124   constant -> CONST_KW
Rule 125   constant -> TRUE_KW
Rule 126   constant -> FALSE_KW
Rule 127   empty -> <empty>

Terminals, with rules where they appear

AND                  : 84 85 86
BOOLEAN_KW           : 18
BOOL_KW              : 22
CHARACTER_KW         : 19
CHAR_KW              : 21
CLOSING_BRACE        : 24 25 42 45 47 53
CLOSING_BRACKET      : 14 38 115
CLOSING_PARENTHESES  : 13 24 25 26 27 41 42 44 45 46 47 60 117 119
COMEBACK_KW          : 61
COMMA                : 10 33 122
COMMENT              : 
CONST_KW             : 124
CONTINUE_KW          : 63
DIVIDE               : 104
DIVIDEEQUAL          : 73
DOT                  : 116
DOUBLE_DOT           : 13
ELSE_KW              : 76 79 83 86 89
EQUAL                : 69
EQUALEQUAL           : 97
FALSE_KW             : 126
FuncName             : 24 26
GIVEBACK_KW          : 62
GREATEREQUAL         : 96
GREATER_THAN         : 99
IF_KW                : 41 42 44 45 46 47
INTEGER_KW           : 20
INT_KW               : 23
LESSEQUAL            : 95
LESS_THAN            : 98
LOGICAL_AND          : 74 75 76
LOGICAL_OR           : 77 78 79
MINUS                : 102 109
MINUSEQUAL           : 71
MINUSMINUS           : 66
NOTEQUAL             : 100
NUMBER               : 2 68
OPENING_BRACE        : 24 25 42 45 47 53
OPENING_BRACKET      : 14 38 115
OPENING_PARENTHESES  : 13 24 25 26 27 41 42 44 45 46 47 60 117 119
OR                   : 87 88 89
OTHER_KW             : 41 42 46 47 59
PERCENTAGE           : 105
PLUS                 : 101
PLUSEQUAL            : 70
PLUSPLUS             : 65
QUESTION_MARK        : 111
SEMICOLON            : 8 30 56 57 61 62 63
STATIC_KW            : 16
THEN_KW              : 75 78 81 85 88
TILDA                : 80 81 82 83
TILL_KW              : 60
TIMES                : 103 110
TIMESEQUAL           : 72
TRUE_KW              : 125
VOID_KW              : 24 25
VarName              : 3 14 15 25 27 37 38 114 116 119
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 35
allExpression        : 56 62 64 115 117 122 123
alterable            : 64 65 66 68 113 115 116
args                 : 119
arguments            : 120 122
compareType          : 91
compoundPhrase       : 49
constant             : 118
continue             : 52
core_statement       : 
declaration          : 4 5
eachExpression       : 13 14 41 42 44 45 46 47 60 67 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89
empty                : 29 36 55 121
equal                : 93
factor               : 108
function             : 6
ifBody               : 
inalterable          : 112
iterationPhrase      : 50
list                 : 1 4
listOfParameters     : 28 30
localDeclarations    : 35 53
matched              : 39 41 41 42 42 44 45 46 47 58 59 59
mathEXP              : 91 91 92 101 101 102 102 103 103 104 104 105 105
mathOp               : 64 68
nonEqual             : 94
numOrletter          : 
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 24 25 26 27
phrase               : 48
program              : 0
relExpression        : 90
returnPhrase         : 51
scopedSpecifier      : 9
statement            : 24 25 26 27 43 54 60
statementList        : 53 54
type                 : 8 16 17 26 27 32
unaryExpression      : 106 107
unaryop              : 107
unmatched            : 40 46 47
varDeclaration       : 7
varForm              : 12 13
varInitialization    : 10 11
variableList         : 8 9 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (4) list -> . list declaration
    (5) list -> . declaration
    (6) declaration -> . function
    (7) declaration -> . varDeclaration
    (24) function -> . VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (25) function -> . VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (26) function -> . type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (27) function -> . type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> . type variableList SEMICOLON
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    VOID_KW         shift and go to state 9
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    function                       shift and go to state 6
    program                        shift and go to state 11
    list                           shift and go to state 12
    type                           shift and go to state 13
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4

state 1

    (20) type -> INTEGER_KW .

    VarName         reduce using rule 20 (type -> INTEGER_KW .)
    FuncName        reduce using rule 20 (type -> INTEGER_KW .)


state 2

    (21) type -> CHAR_KW .

    VarName         reduce using rule 21 (type -> CHAR_KW .)
    FuncName        reduce using rule 21 (type -> CHAR_KW .)


state 3

    (5) list -> declaration .

    VOID_KW         reduce using rule 5 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> declaration .)
    INTEGER_KW      reduce using rule 5 (list -> declaration .)
    CHAR_KW         reduce using rule 5 (list -> declaration .)
    BOOL_KW         reduce using rule 5 (list -> declaration .)
    INT_KW          reduce using rule 5 (list -> declaration .)
    $end            reduce using rule 5 (list -> declaration .)


state 4

    (7) declaration -> varDeclaration .

    VOID_KW         reduce using rule 7 (declaration -> varDeclaration .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> varDeclaration .)
    CHARACTER_KW    reduce using rule 7 (declaration -> varDeclaration .)
    INTEGER_KW      reduce using rule 7 (declaration -> varDeclaration .)
    CHAR_KW         reduce using rule 7 (declaration -> varDeclaration .)
    BOOL_KW         reduce using rule 7 (declaration -> varDeclaration .)
    INT_KW          reduce using rule 7 (declaration -> varDeclaration .)
    $end            reduce using rule 7 (declaration -> varDeclaration .)


state 5

    (22) type -> BOOL_KW .

    VarName         reduce using rule 22 (type -> BOOL_KW .)
    FuncName        reduce using rule 22 (type -> BOOL_KW .)


state 6

    (6) declaration -> function .

    VOID_KW         reduce using rule 6 (declaration -> function .)
    BOOLEAN_KW      reduce using rule 6 (declaration -> function .)
    CHARACTER_KW    reduce using rule 6 (declaration -> function .)
    INTEGER_KW      reduce using rule 6 (declaration -> function .)
    CHAR_KW         reduce using rule 6 (declaration -> function .)
    BOOL_KW         reduce using rule 6 (declaration -> function .)
    INT_KW          reduce using rule 6 (declaration -> function .)
    $end            reduce using rule 6 (declaration -> function .)


state 7

    (19) type -> CHARACTER_KW .

    VarName         reduce using rule 19 (type -> CHARACTER_KW .)
    FuncName        reduce using rule 19 (type -> CHARACTER_KW .)


state 8

    (18) type -> BOOLEAN_KW .

    VarName         reduce using rule 18 (type -> BOOLEAN_KW .)
    FuncName        reduce using rule 18 (type -> BOOLEAN_KW .)


state 9

    (24) function -> VOID_KW . FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (25) function -> VOID_KW . VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    FuncName        shift and go to state 15
    VarName         shift and go to state 14


state 10

    (23) type -> INT_KW .

    VarName         reduce using rule 23 (type -> INT_KW .)
    FuncName        reduce using rule 23 (type -> INT_KW .)


state 11

    (0) S' -> program .



state 12

    (1) program -> list .
    (4) list -> list . declaration
    (6) declaration -> . function
    (7) declaration -> . varDeclaration
    (24) function -> . VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (25) function -> . VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (26) function -> . type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (27) function -> . type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> . type variableList SEMICOLON
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 9
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    function                       shift and go to state 6
    type                           shift and go to state 13
    declaration                    shift and go to state 16
    varDeclaration                 shift and go to state 4

state 13

    (26) function -> type . FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (27) function -> type . VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (8) varDeclaration -> type . variableList SEMICOLON
    (10) variableList -> . variableList COMMA varInitialization
    (11) variableList -> . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . VarName

    FuncName        shift and go to state 21
    VarName         shift and go to state 17

    variableList                   shift and go to state 20
    varForm                        shift and go to state 18
    varInitialization              shift and go to state 19

state 14

    (25) function -> VOID_KW VarName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 22


state 15

    (24) function -> VOID_KW FuncName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 23


state 16

    (4) list -> list declaration .

    VOID_KW         reduce using rule 4 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 4 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 4 (list -> list declaration .)
    INTEGER_KW      reduce using rule 4 (list -> list declaration .)
    CHAR_KW         reduce using rule 4 (list -> list declaration .)
    BOOL_KW         reduce using rule 4 (list -> list declaration .)
    INT_KW          reduce using rule 4 (list -> list declaration .)
    $end            reduce using rule 4 (list -> list declaration .)


state 17

    (27) function -> type VarName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (14) varForm -> VarName . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> VarName .

    OPENING_PARENTHESES shift and go to state 25
    OPENING_BRACKET shift and go to state 24
    DOUBLE_DOT      reduce using rule 15 (varForm -> VarName .)
    SEMICOLON       reduce using rule 15 (varForm -> VarName .)
    COMMA           reduce using rule 15 (varForm -> VarName .)


state 18

    (12) varInitialization -> varForm .
    (13) varInitialization -> varForm . DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    SEMICOLON       reduce using rule 12 (varInitialization -> varForm .)
    COMMA           reduce using rule 12 (varInitialization -> varForm .)
    STATIC_KW       reduce using rule 12 (varInitialization -> varForm .)
    BOOLEAN_KW      reduce using rule 12 (varInitialization -> varForm .)
    CHARACTER_KW    reduce using rule 12 (varInitialization -> varForm .)
    INTEGER_KW      reduce using rule 12 (varInitialization -> varForm .)
    CHAR_KW         reduce using rule 12 (varInitialization -> varForm .)
    BOOL_KW         reduce using rule 12 (varInitialization -> varForm .)
    INT_KW          reduce using rule 12 (varInitialization -> varForm .)
    CLOSING_BRACE   reduce using rule 12 (varInitialization -> varForm .)
    OPENING_BRACE   reduce using rule 12 (varInitialization -> varForm .)
    TILL_KW         reduce using rule 12 (varInitialization -> varForm .)
    COMEBACK_KW     reduce using rule 12 (varInitialization -> varForm .)
    GIVEBACK_KW     reduce using rule 12 (varInitialization -> varForm .)
    CONTINUE_KW     reduce using rule 12 (varInitialization -> varForm .)
    VarName         reduce using rule 12 (varInitialization -> varForm .)
    TILDA           reduce using rule 12 (varInitialization -> varForm .)
    MINUS           reduce using rule 12 (varInitialization -> varForm .)
    TIMES           reduce using rule 12 (varInitialization -> varForm .)
    QUESTION_MARK   reduce using rule 12 (varInitialization -> varForm .)
    OPENING_PARENTHESES reduce using rule 12 (varInitialization -> varForm .)
    CONST_KW        reduce using rule 12 (varInitialization -> varForm .)
    TRUE_KW         reduce using rule 12 (varInitialization -> varForm .)
    FALSE_KW        reduce using rule 12 (varInitialization -> varForm .)
    DOUBLE_DOT      shift and go to state 26


state 19

    (11) variableList -> varInitialization .

    COMMA           reduce using rule 11 (variableList -> varInitialization .)
    STATIC_KW       reduce using rule 11 (variableList -> varInitialization .)
    BOOLEAN_KW      reduce using rule 11 (variableList -> varInitialization .)
    CHARACTER_KW    reduce using rule 11 (variableList -> varInitialization .)
    INTEGER_KW      reduce using rule 11 (variableList -> varInitialization .)
    CHAR_KW         reduce using rule 11 (variableList -> varInitialization .)
    BOOL_KW         reduce using rule 11 (variableList -> varInitialization .)
    INT_KW          reduce using rule 11 (variableList -> varInitialization .)
    CLOSING_BRACE   reduce using rule 11 (variableList -> varInitialization .)
    SEMICOLON       reduce using rule 11 (variableList -> varInitialization .)
    OPENING_BRACE   reduce using rule 11 (variableList -> varInitialization .)
    TILL_KW         reduce using rule 11 (variableList -> varInitialization .)
    COMEBACK_KW     reduce using rule 11 (variableList -> varInitialization .)
    GIVEBACK_KW     reduce using rule 11 (variableList -> varInitialization .)
    CONTINUE_KW     reduce using rule 11 (variableList -> varInitialization .)
    VarName         reduce using rule 11 (variableList -> varInitialization .)
    TILDA           reduce using rule 11 (variableList -> varInitialization .)
    MINUS           reduce using rule 11 (variableList -> varInitialization .)
    TIMES           reduce using rule 11 (variableList -> varInitialization .)
    QUESTION_MARK   reduce using rule 11 (variableList -> varInitialization .)
    OPENING_PARENTHESES reduce using rule 11 (variableList -> varInitialization .)
    CONST_KW        reduce using rule 11 (variableList -> varInitialization .)
    TRUE_KW         reduce using rule 11 (variableList -> varInitialization .)
    FALSE_KW        reduce using rule 11 (variableList -> varInitialization .)


state 20

    (8) varDeclaration -> type variableList . SEMICOLON
    (10) variableList -> variableList . COMMA varInitialization

    SEMICOLON       shift and go to state 28
    COMMA           shift and go to state 27


state 21

    (26) function -> type FuncName . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 29


state 22

    (25) function -> VOID_KW VarName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (127) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 127 (empty -> .)
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    paramTypeList                  shift and go to state 33
    parameter                      shift and go to state 30
    listOfParameters               shift and go to state 31
    type                           shift and go to state 34
    empty                          shift and go to state 32

state 23

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (127) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 127 (empty -> .)
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    paramTypeList                  shift and go to state 33
    parameter                      shift and go to state 35
    listOfParameters               shift and go to state 31
    type                           shift and go to state 34
    empty                          shift and go to state 32

state 24

    (14) varForm -> VarName OPENING_BRACKET . eachExpression CLOSING_BRACKET
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 46
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 25

    (27) function -> type VarName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (127) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 127 (empty -> .)
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    paramTypeList                  shift and go to state 33
    parameter                      shift and go to state 54
    listOfParameters               shift and go to state 31
    type                           shift and go to state 34
    empty                          shift and go to state 32

state 26

    (13) varInitialization -> varForm DOUBLE_DOT . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 55


state 27

    (10) variableList -> variableList COMMA . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . VarName

    VarName         shift and go to state 56

    varForm                        shift and go to state 18
    varInitialization              shift and go to state 57

state 28

    (8) varDeclaration -> type variableList SEMICOLON .

    VOID_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    CHAR_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    BOOL_KW         reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    INT_KW          reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)
    $end            reduce using rule 8 (varDeclaration -> type variableList SEMICOLON .)


state 29

    (26) function -> type FuncName OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (127) empty -> .
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 127 (empty -> .)
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    paramTypeList                  shift and go to state 33
    parameter                      shift and go to state 58
    listOfParameters               shift and go to state 31
    type                           shift and go to state 34
    empty                          shift and go to state 32

state 30

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 59


state 31

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 60


state 32

    (29) parameter -> empty .

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> empty .)


state 33

    (31) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 31 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 31 (listOfParameters -> paramTypeList .)


state 34

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList COMMA paramId
    (34) paramList -> . paramId
    (37) paramId -> . VarName
    (38) paramId -> . VarName OPENING_BRACKET CLOSING_BRACKET

    VarName         shift and go to state 61

    paramList                      shift and go to state 62
    paramId                        shift and go to state 63

state 35

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 64


state 36

    (119) inalterable -> VarName . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> VarName .

    OPENING_PARENTHESES shift and go to state 65
    OPENING_BRACKET reduce using rule 114 (alterable -> VarName .)
    DOT             reduce using rule 114 (alterable -> VarName .)
    PLUS            reduce using rule 114 (alterable -> VarName .)
    MINUS           reduce using rule 114 (alterable -> VarName .)
    TIMES           reduce using rule 114 (alterable -> VarName .)
    DIVIDE          reduce using rule 114 (alterable -> VarName .)
    PERCENTAGE      reduce using rule 114 (alterable -> VarName .)
    LESSEQUAL       reduce using rule 114 (alterable -> VarName .)
    GREATEREQUAL    reduce using rule 114 (alterable -> VarName .)
    EQUALEQUAL      reduce using rule 114 (alterable -> VarName .)
    LESS_THAN       reduce using rule 114 (alterable -> VarName .)
    GREATER_THAN    reduce using rule 114 (alterable -> VarName .)
    NOTEQUAL        reduce using rule 114 (alterable -> VarName .)
    LOGICAL_AND     reduce using rule 114 (alterable -> VarName .)
    LOGICAL_OR      reduce using rule 114 (alterable -> VarName .)
    TILDA           reduce using rule 114 (alterable -> VarName .)
    AND             reduce using rule 114 (alterable -> VarName .)
    OR              reduce using rule 114 (alterable -> VarName .)
    CLOSING_BRACKET reduce using rule 114 (alterable -> VarName .)
    CLOSING_PARENTHESES reduce using rule 114 (alterable -> VarName .)
    COMMA           reduce using rule 114 (alterable -> VarName .)
    SEMICOLON       reduce using rule 114 (alterable -> VarName .)


state 37

    (117) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    factor                         shift and go to state 41
    relExpression                  shift and go to state 39
    allExpression                  shift and go to state 68
    alterable                      shift and go to state 67

state 38

    (110) unaryop -> TIMES .

    MINUS           reduce using rule 110 (unaryop -> TIMES .)
    TIMES           reduce using rule 110 (unaryop -> TIMES .)
    QUESTION_MARK   reduce using rule 110 (unaryop -> TIMES .)
    OPENING_PARENTHESES reduce using rule 110 (unaryop -> TIMES .)
    VarName         reduce using rule 110 (unaryop -> TIMES .)
    CONST_KW        reduce using rule 110 (unaryop -> TIMES .)
    TRUE_KW         reduce using rule 110 (unaryop -> TIMES .)
    FALSE_KW        reduce using rule 110 (unaryop -> TIMES .)


state 39

    (90) eachExpression -> relExpression .

    LOGICAL_AND     reduce using rule 90 (eachExpression -> relExpression .)
    LOGICAL_OR      reduce using rule 90 (eachExpression -> relExpression .)
    TILDA           reduce using rule 90 (eachExpression -> relExpression .)
    AND             reduce using rule 90 (eachExpression -> relExpression .)
    OR              reduce using rule 90 (eachExpression -> relExpression .)
    COMMA           reduce using rule 90 (eachExpression -> relExpression .)
    CLOSING_PARENTHESES reduce using rule 90 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 90 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 90 (eachExpression -> relExpression .)


state 40

    (126) constant -> FALSE_KW .

    PLUS            reduce using rule 126 (constant -> FALSE_KW .)
    MINUS           reduce using rule 126 (constant -> FALSE_KW .)
    TIMES           reduce using rule 126 (constant -> FALSE_KW .)
    DIVIDE          reduce using rule 126 (constant -> FALSE_KW .)
    PERCENTAGE      reduce using rule 126 (constant -> FALSE_KW .)
    LESSEQUAL       reduce using rule 126 (constant -> FALSE_KW .)
    GREATEREQUAL    reduce using rule 126 (constant -> FALSE_KW .)
    EQUALEQUAL      reduce using rule 126 (constant -> FALSE_KW .)
    LESS_THAN       reduce using rule 126 (constant -> FALSE_KW .)
    GREATER_THAN    reduce using rule 126 (constant -> FALSE_KW .)
    NOTEQUAL        reduce using rule 126 (constant -> FALSE_KW .)
    LOGICAL_AND     reduce using rule 126 (constant -> FALSE_KW .)
    LOGICAL_OR      reduce using rule 126 (constant -> FALSE_KW .)
    TILDA           reduce using rule 126 (constant -> FALSE_KW .)
    AND             reduce using rule 126 (constant -> FALSE_KW .)
    OR              reduce using rule 126 (constant -> FALSE_KW .)
    CLOSING_BRACKET reduce using rule 126 (constant -> FALSE_KW .)
    CLOSING_PARENTHESES reduce using rule 126 (constant -> FALSE_KW .)
    COMMA           reduce using rule 126 (constant -> FALSE_KW .)
    SEMICOLON       reduce using rule 126 (constant -> FALSE_KW .)


state 41

    (108) unaryExpression -> factor .

    PLUS            reduce using rule 108 (unaryExpression -> factor .)
    MINUS           reduce using rule 108 (unaryExpression -> factor .)
    TIMES           reduce using rule 108 (unaryExpression -> factor .)
    DIVIDE          reduce using rule 108 (unaryExpression -> factor .)
    PERCENTAGE      reduce using rule 108 (unaryExpression -> factor .)
    LESSEQUAL       reduce using rule 108 (unaryExpression -> factor .)
    GREATEREQUAL    reduce using rule 108 (unaryExpression -> factor .)
    EQUALEQUAL      reduce using rule 108 (unaryExpression -> factor .)
    LESS_THAN       reduce using rule 108 (unaryExpression -> factor .)
    GREATER_THAN    reduce using rule 108 (unaryExpression -> factor .)
    NOTEQUAL        reduce using rule 108 (unaryExpression -> factor .)
    LOGICAL_AND     reduce using rule 108 (unaryExpression -> factor .)
    LOGICAL_OR      reduce using rule 108 (unaryExpression -> factor .)
    TILDA           reduce using rule 108 (unaryExpression -> factor .)
    AND             reduce using rule 108 (unaryExpression -> factor .)
    OR              reduce using rule 108 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 108 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 108 (unaryExpression -> factor .)
    COMMA           reduce using rule 108 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 108 (unaryExpression -> factor .)


state 42

    (91) relExpression -> mathEXP . compareType mathEXP
    (92) relExpression -> mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP
    (93) compareType -> . equal
    (94) compareType -> . nonEqual
    (95) equal -> . LESSEQUAL
    (96) equal -> . GREATEREQUAL
    (97) equal -> . EQUALEQUAL
    (98) nonEqual -> . LESS_THAN
    (99) nonEqual -> . GREATER_THAN
    (100) nonEqual -> . NOTEQUAL

    LOGICAL_AND     reduce using rule 92 (relExpression -> mathEXP .)
    LOGICAL_OR      reduce using rule 92 (relExpression -> mathEXP .)
    TILDA           reduce using rule 92 (relExpression -> mathEXP .)
    AND             reduce using rule 92 (relExpression -> mathEXP .)
    OR              reduce using rule 92 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 92 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 92 (relExpression -> mathEXP .)
    COMMA           reduce using rule 92 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 92 (relExpression -> mathEXP .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 71
    PERCENTAGE      shift and go to state 72
    LESSEQUAL       shift and go to state 81
    GREATEREQUAL    shift and go to state 74
    EQUALEQUAL      shift and go to state 70
    LESS_THAN       shift and go to state 80
    GREATER_THAN    shift and go to state 73
    NOTEQUAL        shift and go to state 79

    equal                          shift and go to state 75
    nonEqual                       shift and go to state 83
    compareType                    shift and go to state 76

state 43

    (124) constant -> CONST_KW .

    PLUS            reduce using rule 124 (constant -> CONST_KW .)
    MINUS           reduce using rule 124 (constant -> CONST_KW .)
    TIMES           reduce using rule 124 (constant -> CONST_KW .)
    DIVIDE          reduce using rule 124 (constant -> CONST_KW .)
    PERCENTAGE      reduce using rule 124 (constant -> CONST_KW .)
    LESSEQUAL       reduce using rule 124 (constant -> CONST_KW .)
    GREATEREQUAL    reduce using rule 124 (constant -> CONST_KW .)
    EQUALEQUAL      reduce using rule 124 (constant -> CONST_KW .)
    LESS_THAN       reduce using rule 124 (constant -> CONST_KW .)
    GREATER_THAN    reduce using rule 124 (constant -> CONST_KW .)
    NOTEQUAL        reduce using rule 124 (constant -> CONST_KW .)
    LOGICAL_AND     reduce using rule 124 (constant -> CONST_KW .)
    LOGICAL_OR      reduce using rule 124 (constant -> CONST_KW .)
    TILDA           reduce using rule 124 (constant -> CONST_KW .)
    AND             reduce using rule 124 (constant -> CONST_KW .)
    OR              reduce using rule 124 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 124 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 124 (constant -> CONST_KW .)
    COMMA           reduce using rule 124 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 124 (constant -> CONST_KW .)


state 44

    (106) mathEXP -> unaryExpression .

    PLUS            reduce using rule 106 (mathEXP -> unaryExpression .)
    MINUS           reduce using rule 106 (mathEXP -> unaryExpression .)
    TIMES           reduce using rule 106 (mathEXP -> unaryExpression .)
    DIVIDE          reduce using rule 106 (mathEXP -> unaryExpression .)
    PERCENTAGE      reduce using rule 106 (mathEXP -> unaryExpression .)
    LESSEQUAL       reduce using rule 106 (mathEXP -> unaryExpression .)
    GREATEREQUAL    reduce using rule 106 (mathEXP -> unaryExpression .)
    EQUALEQUAL      reduce using rule 106 (mathEXP -> unaryExpression .)
    LESS_THAN       reduce using rule 106 (mathEXP -> unaryExpression .)
    GREATER_THAN    reduce using rule 106 (mathEXP -> unaryExpression .)
    NOTEQUAL        reduce using rule 106 (mathEXP -> unaryExpression .)
    LOGICAL_AND     reduce using rule 106 (mathEXP -> unaryExpression .)
    LOGICAL_OR      reduce using rule 106 (mathEXP -> unaryExpression .)
    TILDA           reduce using rule 106 (mathEXP -> unaryExpression .)
    AND             reduce using rule 106 (mathEXP -> unaryExpression .)
    OR              reduce using rule 106 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 106 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 106 (mathEXP -> unaryExpression .)
    COMMA           reduce using rule 106 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 106 (mathEXP -> unaryExpression .)


state 45

    (107) unaryExpression -> unaryop . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 84
    unaryop                        shift and go to state 45
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    alterable                      shift and go to state 49

state 46

    (14) varForm -> VarName OPENING_BRACKET eachExpression . CLOSING_BRACKET
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_BRACKET shift and go to state 88
    LOGICAL_AND     shift and go to state 90
    LOGICAL_OR      shift and go to state 87
    TILDA           shift and go to state 89
    AND             shift and go to state 85
    OR              shift and go to state 86


state 47

    (112) factor -> inalterable .

    PLUS            reduce using rule 112 (factor -> inalterable .)
    MINUS           reduce using rule 112 (factor -> inalterable .)
    TIMES           reduce using rule 112 (factor -> inalterable .)
    DIVIDE          reduce using rule 112 (factor -> inalterable .)
    PERCENTAGE      reduce using rule 112 (factor -> inalterable .)
    LESSEQUAL       reduce using rule 112 (factor -> inalterable .)
    GREATEREQUAL    reduce using rule 112 (factor -> inalterable .)
    EQUALEQUAL      reduce using rule 112 (factor -> inalterable .)
    LESS_THAN       reduce using rule 112 (factor -> inalterable .)
    GREATER_THAN    reduce using rule 112 (factor -> inalterable .)
    NOTEQUAL        reduce using rule 112 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 112 (factor -> inalterable .)
    LOGICAL_AND     reduce using rule 112 (factor -> inalterable .)
    LOGICAL_OR      reduce using rule 112 (factor -> inalterable .)
    TILDA           reduce using rule 112 (factor -> inalterable .)
    AND             reduce using rule 112 (factor -> inalterable .)
    OR              reduce using rule 112 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 112 (factor -> inalterable .)
    COMMA           reduce using rule 112 (factor -> inalterable .)
    SEMICOLON       reduce using rule 112 (factor -> inalterable .)


state 48

    (125) constant -> TRUE_KW .

    PLUS            reduce using rule 125 (constant -> TRUE_KW .)
    MINUS           reduce using rule 125 (constant -> TRUE_KW .)
    TIMES           reduce using rule 125 (constant -> TRUE_KW .)
    DIVIDE          reduce using rule 125 (constant -> TRUE_KW .)
    PERCENTAGE      reduce using rule 125 (constant -> TRUE_KW .)
    LESSEQUAL       reduce using rule 125 (constant -> TRUE_KW .)
    GREATEREQUAL    reduce using rule 125 (constant -> TRUE_KW .)
    EQUALEQUAL      reduce using rule 125 (constant -> TRUE_KW .)
    LESS_THAN       reduce using rule 125 (constant -> TRUE_KW .)
    GREATER_THAN    reduce using rule 125 (constant -> TRUE_KW .)
    NOTEQUAL        reduce using rule 125 (constant -> TRUE_KW .)
    LOGICAL_AND     reduce using rule 125 (constant -> TRUE_KW .)
    LOGICAL_OR      reduce using rule 125 (constant -> TRUE_KW .)
    TILDA           reduce using rule 125 (constant -> TRUE_KW .)
    AND             reduce using rule 125 (constant -> TRUE_KW .)
    OR              reduce using rule 125 (constant -> TRUE_KW .)
    CLOSING_BRACKET reduce using rule 125 (constant -> TRUE_KW .)
    CLOSING_PARENTHESES reduce using rule 125 (constant -> TRUE_KW .)
    COMMA           reduce using rule 125 (constant -> TRUE_KW .)
    SEMICOLON       reduce using rule 125 (constant -> TRUE_KW .)


state 49

    (113) factor -> alterable .
    (115) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> alterable . DOT VarName

    PLUS            reduce using rule 113 (factor -> alterable .)
    MINUS           reduce using rule 113 (factor -> alterable .)
    TIMES           reduce using rule 113 (factor -> alterable .)
    DIVIDE          reduce using rule 113 (factor -> alterable .)
    PERCENTAGE      reduce using rule 113 (factor -> alterable .)
    LESSEQUAL       reduce using rule 113 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 113 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 113 (factor -> alterable .)
    LESS_THAN       reduce using rule 113 (factor -> alterable .)
    GREATER_THAN    reduce using rule 113 (factor -> alterable .)
    NOTEQUAL        reduce using rule 113 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 113 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 113 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 113 (factor -> alterable .)
    TILDA           reduce using rule 113 (factor -> alterable .)
    AND             reduce using rule 113 (factor -> alterable .)
    OR              reduce using rule 113 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 113 (factor -> alterable .)
    COMMA           reduce using rule 113 (factor -> alterable .)
    SEMICOLON       reduce using rule 113 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 91
    DOT             shift and go to state 92


state 50

    (118) inalterable -> constant .

    PLUS            reduce using rule 118 (inalterable -> constant .)
    MINUS           reduce using rule 118 (inalterable -> constant .)
    TIMES           reduce using rule 118 (inalterable -> constant .)
    DIVIDE          reduce using rule 118 (inalterable -> constant .)
    PERCENTAGE      reduce using rule 118 (inalterable -> constant .)
    LESSEQUAL       reduce using rule 118 (inalterable -> constant .)
    GREATEREQUAL    reduce using rule 118 (inalterable -> constant .)
    EQUALEQUAL      reduce using rule 118 (inalterable -> constant .)
    LESS_THAN       reduce using rule 118 (inalterable -> constant .)
    GREATER_THAN    reduce using rule 118 (inalterable -> constant .)
    NOTEQUAL        reduce using rule 118 (inalterable -> constant .)
    LOGICAL_AND     reduce using rule 118 (inalterable -> constant .)
    LOGICAL_OR      reduce using rule 118 (inalterable -> constant .)
    TILDA           reduce using rule 118 (inalterable -> constant .)
    AND             reduce using rule 118 (inalterable -> constant .)
    OR              reduce using rule 118 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 118 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 118 (inalterable -> constant .)
    COMMA           reduce using rule 118 (inalterable -> constant .)
    SEMICOLON       reduce using rule 118 (inalterable -> constant .)


state 51

    (111) unaryop -> QUESTION_MARK .

    MINUS           reduce using rule 111 (unaryop -> QUESTION_MARK .)
    TIMES           reduce using rule 111 (unaryop -> QUESTION_MARK .)
    QUESTION_MARK   reduce using rule 111 (unaryop -> QUESTION_MARK .)
    OPENING_PARENTHESES reduce using rule 111 (unaryop -> QUESTION_MARK .)
    VarName         reduce using rule 111 (unaryop -> QUESTION_MARK .)
    CONST_KW        reduce using rule 111 (unaryop -> QUESTION_MARK .)
    TRUE_KW         reduce using rule 111 (unaryop -> QUESTION_MARK .)
    FALSE_KW        reduce using rule 111 (unaryop -> QUESTION_MARK .)


state 52

    (109) unaryop -> MINUS .

    MINUS           reduce using rule 109 (unaryop -> MINUS .)
    TIMES           reduce using rule 109 (unaryop -> MINUS .)
    QUESTION_MARK   reduce using rule 109 (unaryop -> MINUS .)
    OPENING_PARENTHESES reduce using rule 109 (unaryop -> MINUS .)
    VarName         reduce using rule 109 (unaryop -> MINUS .)
    CONST_KW        reduce using rule 109 (unaryop -> MINUS .)
    TRUE_KW         reduce using rule 109 (unaryop -> MINUS .)
    FALSE_KW        reduce using rule 109 (unaryop -> MINUS .)


state 53

    (82) eachExpression -> TILDA . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 93
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 54

    (27) function -> type VarName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 94


state 55

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 95
    inalterable                    shift and go to state 47
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    mathEXP                        shift and go to state 42
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 56

    (14) varForm -> VarName . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> VarName .

    OPENING_BRACKET shift and go to state 24
    DOUBLE_DOT      reduce using rule 15 (varForm -> VarName .)
    SEMICOLON       reduce using rule 15 (varForm -> VarName .)
    COMMA           reduce using rule 15 (varForm -> VarName .)
    STATIC_KW       reduce using rule 15 (varForm -> VarName .)
    BOOLEAN_KW      reduce using rule 15 (varForm -> VarName .)
    CHARACTER_KW    reduce using rule 15 (varForm -> VarName .)
    INTEGER_KW      reduce using rule 15 (varForm -> VarName .)
    CHAR_KW         reduce using rule 15 (varForm -> VarName .)
    BOOL_KW         reduce using rule 15 (varForm -> VarName .)
    INT_KW          reduce using rule 15 (varForm -> VarName .)
    CLOSING_BRACE   reduce using rule 15 (varForm -> VarName .)
    OPENING_BRACE   reduce using rule 15 (varForm -> VarName .)
    TILL_KW         reduce using rule 15 (varForm -> VarName .)
    COMEBACK_KW     reduce using rule 15 (varForm -> VarName .)
    GIVEBACK_KW     reduce using rule 15 (varForm -> VarName .)
    CONTINUE_KW     reduce using rule 15 (varForm -> VarName .)
    VarName         reduce using rule 15 (varForm -> VarName .)
    TILDA           reduce using rule 15 (varForm -> VarName .)
    MINUS           reduce using rule 15 (varForm -> VarName .)
    TIMES           reduce using rule 15 (varForm -> VarName .)
    QUESTION_MARK   reduce using rule 15 (varForm -> VarName .)
    OPENING_PARENTHESES reduce using rule 15 (varForm -> VarName .)
    CONST_KW        reduce using rule 15 (varForm -> VarName .)
    TRUE_KW         reduce using rule 15 (varForm -> VarName .)
    FALSE_KW        reduce using rule 15 (varForm -> VarName .)


state 57

    (10) variableList -> variableList COMMA varInitialization .

    COMMA           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    STATIC_KW       reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    BOOLEAN_KW      reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CHARACTER_KW    reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    INTEGER_KW      reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CHAR_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    BOOL_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    INT_KW          reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CLOSING_BRACE   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    SEMICOLON       reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    OPENING_BRACE   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TILL_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    COMEBACK_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    GIVEBACK_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CONTINUE_KW     reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    VarName         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TILDA           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    MINUS           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TIMES           reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    QUESTION_MARK   reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    OPENING_PARENTHESES reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    CONST_KW        reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    TRUE_KW         reduce using rule 10 (variableList -> variableList COMMA varInitialization .)
    FALSE_KW        reduce using rule 10 (variableList -> variableList COMMA varInitialization .)


state 58

    (26) function -> type FuncName OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 96


state 59

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 97


state 60

    (30) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (32) paramTypeList -> . type paramList
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    paramTypeList                  shift and go to state 98
    type                           shift and go to state 34

state 61

    (37) paramId -> VarName .
    (38) paramId -> VarName . OPENING_BRACKET CLOSING_BRACKET

    COMMA           reduce using rule 37 (paramId -> VarName .)
    SEMICOLON       reduce using rule 37 (paramId -> VarName .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> VarName .)
    OPENING_BRACKET shift and go to state 99


state 62

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . COMMA paramId

    SEMICOLON       reduce using rule 32 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 32 (paramTypeList -> type paramList .)
    COMMA           shift and go to state 100


state 63

    (34) paramList -> paramId .

    COMMA           reduce using rule 34 (paramList -> paramId .)
    SEMICOLON       reduce using rule 34 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 34 (paramList -> paramId .)


state 64

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 101


state 65

    (119) inalterable -> VarName OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (120) args -> . arguments
    (121) args -> . empty
    (122) arguments -> . arguments COMMA allExpression
    (123) arguments -> . allExpression
    (127) empty -> .
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    CLOSING_PARENTHESES reduce using rule 127 (empty -> .)
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    allExpression                  shift and go to state 103
    empty                          shift and go to state 104
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    factor                         shift and go to state 41
    arguments                      shift and go to state 105
    relExpression                  shift and go to state 39
    args                           shift and go to state 102
    alterable                      shift and go to state 67

state 66

    (114) alterable -> VarName .
    (119) inalterable -> VarName . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PLUSPLUS        reduce using rule 114 (alterable -> VarName .)
    MINUSMINUS      reduce using rule 114 (alterable -> VarName .)
    OPENING_BRACKET reduce using rule 114 (alterable -> VarName .)
    DOT             reduce using rule 114 (alterable -> VarName .)
    EQUAL           reduce using rule 114 (alterable -> VarName .)
    PLUSEQUAL       reduce using rule 114 (alterable -> VarName .)
    MINUSEQUAL      reduce using rule 114 (alterable -> VarName .)
    TIMESEQUAL      reduce using rule 114 (alterable -> VarName .)
    DIVIDEEQUAL     reduce using rule 114 (alterable -> VarName .)
    PLUS            reduce using rule 114 (alterable -> VarName .)
    MINUS           reduce using rule 114 (alterable -> VarName .)
    TIMES           reduce using rule 114 (alterable -> VarName .)
    DIVIDE          reduce using rule 114 (alterable -> VarName .)
    PERCENTAGE      reduce using rule 114 (alterable -> VarName .)
    LESSEQUAL       reduce using rule 114 (alterable -> VarName .)
    GREATEREQUAL    reduce using rule 114 (alterable -> VarName .)
    EQUALEQUAL      reduce using rule 114 (alterable -> VarName .)
    LESS_THAN       reduce using rule 114 (alterable -> VarName .)
    GREATER_THAN    reduce using rule 114 (alterable -> VarName .)
    NOTEQUAL        reduce using rule 114 (alterable -> VarName .)
    LOGICAL_AND     reduce using rule 114 (alterable -> VarName .)
    LOGICAL_OR      reduce using rule 114 (alterable -> VarName .)
    TILDA           reduce using rule 114 (alterable -> VarName .)
    AND             reduce using rule 114 (alterable -> VarName .)
    OR              reduce using rule 114 (alterable -> VarName .)
    SEMICOLON       reduce using rule 114 (alterable -> VarName .)
    COMMA           reduce using rule 114 (alterable -> VarName .)
    CLOSING_PARENTHESES reduce using rule 114 (alterable -> VarName .)
    CLOSING_BRACKET reduce using rule 114 (alterable -> VarName .)
    OPENING_PARENTHESES shift and go to state 65


state 67

    (64) allExpression -> alterable . mathOp allExpression
    (65) allExpression -> alterable . PLUSPLUS
    (66) allExpression -> alterable . MINUSMINUS
    (68) allExpression -> alterable . mathOp NUMBER
    (115) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> alterable . DOT VarName
    (113) factor -> alterable .
    (69) mathOp -> . EQUAL
    (70) mathOp -> . PLUSEQUAL
    (71) mathOp -> . MINUSEQUAL
    (72) mathOp -> . TIMESEQUAL
    (73) mathOp -> . DIVIDEEQUAL

    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    OPENING_BRACKET shift and go to state 91
    DOT             shift and go to state 92
    PLUS            reduce using rule 113 (factor -> alterable .)
    MINUS           reduce using rule 113 (factor -> alterable .)
    TIMES           reduce using rule 113 (factor -> alterable .)
    DIVIDE          reduce using rule 113 (factor -> alterable .)
    PERCENTAGE      reduce using rule 113 (factor -> alterable .)
    LESSEQUAL       reduce using rule 113 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 113 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 113 (factor -> alterable .)
    LESS_THAN       reduce using rule 113 (factor -> alterable .)
    GREATER_THAN    reduce using rule 113 (factor -> alterable .)
    NOTEQUAL        reduce using rule 113 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 113 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 113 (factor -> alterable .)
    TILDA           reduce using rule 113 (factor -> alterable .)
    AND             reduce using rule 113 (factor -> alterable .)
    OR              reduce using rule 113 (factor -> alterable .)
    SEMICOLON       reduce using rule 113 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 113 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 113 (factor -> alterable .)
    COMMA           reduce using rule 113 (factor -> alterable .)
    EQUAL           shift and go to state 111
    PLUSEQUAL       shift and go to state 108
    MINUSEQUAL      shift and go to state 107
    TIMESEQUAL      shift and go to state 113
    DIVIDEEQUAL     shift and go to state 106

    mathOp                         shift and go to state 112

state 68

    (117) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 114


state 69

    (67) allExpression -> eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    SEMICOLON       reduce using rule 67 (allExpression -> eachExpression .)
    CLOSING_PARENTHESES reduce using rule 67 (allExpression -> eachExpression .)
    COMMA           reduce using rule 67 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 67 (allExpression -> eachExpression .)
    LOGICAL_AND     shift and go to state 90
    LOGICAL_OR      shift and go to state 87
    TILDA           shift and go to state 89
    AND             shift and go to state 85
    OR              shift and go to state 86


state 70

    (97) equal -> EQUALEQUAL .

    MINUS           reduce using rule 97 (equal -> EQUALEQUAL .)
    TIMES           reduce using rule 97 (equal -> EQUALEQUAL .)
    QUESTION_MARK   reduce using rule 97 (equal -> EQUALEQUAL .)
    OPENING_PARENTHESES reduce using rule 97 (equal -> EQUALEQUAL .)
    VarName         reduce using rule 97 (equal -> EQUALEQUAL .)
    CONST_KW        reduce using rule 97 (equal -> EQUALEQUAL .)
    TRUE_KW         reduce using rule 97 (equal -> EQUALEQUAL .)
    FALSE_KW        reduce using rule 97 (equal -> EQUALEQUAL .)


state 71

    (104) mathEXP -> mathEXP DIVIDE . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 115
    alterable                      shift and go to state 49

state 72

    (105) mathEXP -> mathEXP PERCENTAGE . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 116
    alterable                      shift and go to state 49

state 73

    (99) nonEqual -> GREATER_THAN .

    MINUS           reduce using rule 99 (nonEqual -> GREATER_THAN .)
    TIMES           reduce using rule 99 (nonEqual -> GREATER_THAN .)
    QUESTION_MARK   reduce using rule 99 (nonEqual -> GREATER_THAN .)
    OPENING_PARENTHESES reduce using rule 99 (nonEqual -> GREATER_THAN .)
    VarName         reduce using rule 99 (nonEqual -> GREATER_THAN .)
    CONST_KW        reduce using rule 99 (nonEqual -> GREATER_THAN .)
    TRUE_KW         reduce using rule 99 (nonEqual -> GREATER_THAN .)
    FALSE_KW        reduce using rule 99 (nonEqual -> GREATER_THAN .)


state 74

    (96) equal -> GREATEREQUAL .

    MINUS           reduce using rule 96 (equal -> GREATEREQUAL .)
    TIMES           reduce using rule 96 (equal -> GREATEREQUAL .)
    QUESTION_MARK   reduce using rule 96 (equal -> GREATEREQUAL .)
    OPENING_PARENTHESES reduce using rule 96 (equal -> GREATEREQUAL .)
    VarName         reduce using rule 96 (equal -> GREATEREQUAL .)
    CONST_KW        reduce using rule 96 (equal -> GREATEREQUAL .)
    TRUE_KW         reduce using rule 96 (equal -> GREATEREQUAL .)
    FALSE_KW        reduce using rule 96 (equal -> GREATEREQUAL .)


state 75

    (93) compareType -> equal .

    MINUS           reduce using rule 93 (compareType -> equal .)
    TIMES           reduce using rule 93 (compareType -> equal .)
    QUESTION_MARK   reduce using rule 93 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 93 (compareType -> equal .)
    VarName         reduce using rule 93 (compareType -> equal .)
    CONST_KW        reduce using rule 93 (compareType -> equal .)
    TRUE_KW         reduce using rule 93 (compareType -> equal .)
    FALSE_KW        reduce using rule 93 (compareType -> equal .)


state 76

    (91) relExpression -> mathEXP compareType . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    alterable                      shift and go to state 49
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 117

state 77

    (102) mathEXP -> mathEXP MINUS . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 118
    alterable                      shift and go to state 49

state 78

    (103) mathEXP -> mathEXP TIMES . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 119
    alterable                      shift and go to state 49

state 79

    (100) nonEqual -> NOTEQUAL .

    MINUS           reduce using rule 100 (nonEqual -> NOTEQUAL .)
    TIMES           reduce using rule 100 (nonEqual -> NOTEQUAL .)
    QUESTION_MARK   reduce using rule 100 (nonEqual -> NOTEQUAL .)
    OPENING_PARENTHESES reduce using rule 100 (nonEqual -> NOTEQUAL .)
    VarName         reduce using rule 100 (nonEqual -> NOTEQUAL .)
    CONST_KW        reduce using rule 100 (nonEqual -> NOTEQUAL .)
    TRUE_KW         reduce using rule 100 (nonEqual -> NOTEQUAL .)
    FALSE_KW        reduce using rule 100 (nonEqual -> NOTEQUAL .)


state 80

    (98) nonEqual -> LESS_THAN .

    MINUS           reduce using rule 98 (nonEqual -> LESS_THAN .)
    TIMES           reduce using rule 98 (nonEqual -> LESS_THAN .)
    QUESTION_MARK   reduce using rule 98 (nonEqual -> LESS_THAN .)
    OPENING_PARENTHESES reduce using rule 98 (nonEqual -> LESS_THAN .)
    VarName         reduce using rule 98 (nonEqual -> LESS_THAN .)
    CONST_KW        reduce using rule 98 (nonEqual -> LESS_THAN .)
    TRUE_KW         reduce using rule 98 (nonEqual -> LESS_THAN .)
    FALSE_KW        reduce using rule 98 (nonEqual -> LESS_THAN .)


state 81

    (95) equal -> LESSEQUAL .

    MINUS           reduce using rule 95 (equal -> LESSEQUAL .)
    TIMES           reduce using rule 95 (equal -> LESSEQUAL .)
    QUESTION_MARK   reduce using rule 95 (equal -> LESSEQUAL .)
    OPENING_PARENTHESES reduce using rule 95 (equal -> LESSEQUAL .)
    VarName         reduce using rule 95 (equal -> LESSEQUAL .)
    CONST_KW        reduce using rule 95 (equal -> LESSEQUAL .)
    TRUE_KW         reduce using rule 95 (equal -> LESSEQUAL .)
    FALSE_KW        reduce using rule 95 (equal -> LESSEQUAL .)


state 82

    (101) mathEXP -> mathEXP PLUS . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    constant                       shift and go to state 50
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    factor                         shift and go to state 41
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 120
    alterable                      shift and go to state 49

state 83

    (94) compareType -> nonEqual .

    MINUS           reduce using rule 94 (compareType -> nonEqual .)
    TIMES           reduce using rule 94 (compareType -> nonEqual .)
    QUESTION_MARK   reduce using rule 94 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 94 (compareType -> nonEqual .)
    VarName         reduce using rule 94 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 94 (compareType -> nonEqual .)
    TRUE_KW         reduce using rule 94 (compareType -> nonEqual .)
    FALSE_KW        reduce using rule 94 (compareType -> nonEqual .)


state 84

    (107) unaryExpression -> unaryop unaryExpression .

    PLUS            reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    MINUS           reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    TIMES           reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    DIVIDE          reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    PERCENTAGE      reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    LESSEQUAL       reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    GREATEREQUAL    reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    EQUALEQUAL      reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    LESS_THAN       reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    GREATER_THAN    reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    NOTEQUAL        reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_AND     reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_OR      reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    TILDA           reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    AND             reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    OR              reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    COMMA           reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 107 (unaryExpression -> unaryop unaryExpression .)


state 85

    (84) eachExpression -> eachExpression AND . eachExpression
    (85) eachExpression -> eachExpression AND . THEN_KW eachExpression
    (86) eachExpression -> eachExpression AND . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    THEN_KW         shift and go to state 122
    ELSE_KW         shift and go to state 123
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 121
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 86

    (87) eachExpression -> eachExpression OR . eachExpression
    (88) eachExpression -> eachExpression OR . THEN_KW eachExpression
    (89) eachExpression -> eachExpression OR . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    THEN_KW         shift and go to state 125
    ELSE_KW         shift and go to state 126
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 124
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 87

    (77) eachExpression -> eachExpression LOGICAL_OR . eachExpression
    (78) eachExpression -> eachExpression LOGICAL_OR . THEN_KW eachExpression
    (79) eachExpression -> eachExpression LOGICAL_OR . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    THEN_KW         shift and go to state 128
    ELSE_KW         shift and go to state 129
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 127
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 88

    (14) varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .

    DOUBLE_DOT      reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    STATIC_KW       reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOLEAN_KW      reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHARACTER_KW    reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INTEGER_KW      reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHAR_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOL_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INT_KW          reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CLOSING_BRACE   reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_BRACE   reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILL_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMEBACK_KW     reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    GIVEBACK_KW     reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONTINUE_KW     reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    VarName         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    QUESTION_MARK   reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_PARENTHESES reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONST_KW        reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TRUE_KW         reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    FALSE_KW        reduce using rule 14 (varForm -> VarName OPENING_BRACKET eachExpression CLOSING_BRACKET .)


state 89

    (80) eachExpression -> eachExpression TILDA . eachExpression
    (81) eachExpression -> eachExpression TILDA . THEN_KW eachExpression
    (83) eachExpression -> eachExpression TILDA . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    THEN_KW         shift and go to state 131
    ELSE_KW         shift and go to state 132
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 130
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 90

    (74) eachExpression -> eachExpression LOGICAL_AND . eachExpression
    (75) eachExpression -> eachExpression LOGICAL_AND . THEN_KW eachExpression
    (76) eachExpression -> eachExpression LOGICAL_AND . ELSE_KW eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    THEN_KW         shift and go to state 134
    ELSE_KW         shift and go to state 135
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 133
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 91

    (115) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    factor                         shift and go to state 41
    relExpression                  shift and go to state 39
    allExpression                  shift and go to state 136
    alterable                      shift and go to state 67

state 92

    (116) alterable -> alterable DOT . VarName

    VarName         shift and go to state 137


state 93

    (82) eachExpression -> TILDA eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    TILDA           reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    AND             reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    OR              reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    COMMA           reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 82 (eachExpression -> TILDA eachExpression .)
    SEMICOLON       reduce using rule 82 (eachExpression -> TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 94

    (27) function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 149
    OPENING_BRACE   shift and go to state 150
    TILL_KW         shift and go to state 145
    COMEBACK_KW     shift and go to state 138
    GIVEBACK_KW     shift and go to state 146
    CONTINUE_KW     shift and go to state 147
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    compoundPhrase                 shift and go to state 140
    continue                       shift and go to state 144
    statement                      shift and go to state 143
    phrase                         shift and go to state 139
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    allExpression                  shift and go to state 148
    mathEXP                        shift and go to state 42
    returnPhrase                   shift and go to state 142
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    constant                       shift and go to state 50
    iterationPhrase                shift and go to state 141
    alterable                      shift and go to state 67

state 95

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 151
    LOGICAL_AND     shift and go to state 90
    LOGICAL_OR      shift and go to state 87
    TILDA           shift and go to state 89
    AND             shift and go to state 85
    OR              shift and go to state 86


state 96

    (26) function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 149
    OPENING_BRACE   shift and go to state 150
    TILL_KW         shift and go to state 145
    COMEBACK_KW     shift and go to state 138
    GIVEBACK_KW     shift and go to state 146
    CONTINUE_KW     shift and go to state 147
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    compoundPhrase                 shift and go to state 140
    continue                       shift and go to state 144
    statement                      shift and go to state 152
    phrase                         shift and go to state 139
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    allExpression                  shift and go to state 148
    mathEXP                        shift and go to state 42
    returnPhrase                   shift and go to state 142
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    constant                       shift and go to state 50
    iterationPhrase                shift and go to state 141
    alterable                      shift and go to state 67

state 97

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 149
    OPENING_BRACE   shift and go to state 150
    TILL_KW         shift and go to state 145
    COMEBACK_KW     shift and go to state 138
    GIVEBACK_KW     shift and go to state 146
    CONTINUE_KW     shift and go to state 147
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    compoundPhrase                 shift and go to state 140
    continue                       shift and go to state 144
    statement                      shift and go to state 153
    phrase                         shift and go to state 139
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    allExpression                  shift and go to state 148
    mathEXP                        shift and go to state 42
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    constant                       shift and go to state 50
    iterationPhrase                shift and go to state 141
    returnPhrase                   shift and go to state 142
    alterable                      shift and go to state 67

state 98

    (30) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 99

    (38) paramId -> VarName OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 154


state 100

    (33) paramList -> paramList COMMA . paramId
    (37) paramId -> . VarName
    (38) paramId -> . VarName OPENING_BRACKET CLOSING_BRACKET

    VarName         shift and go to state 61

    paramId                        shift and go to state 155

state 101

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 149
    OPENING_BRACE   shift and go to state 150
    TILL_KW         shift and go to state 145
    COMEBACK_KW     shift and go to state 138
    GIVEBACK_KW     shift and go to state 146
    CONTINUE_KW     shift and go to state 147
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    compoundPhrase                 shift and go to state 140
    continue                       shift and go to state 144
    statement                      shift and go to state 156
    phrase                         shift and go to state 139
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    allExpression                  shift and go to state 148
    mathEXP                        shift and go to state 42
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    constant                       shift and go to state 50
    iterationPhrase                shift and go to state 141
    returnPhrase                   shift and go to state 142
    alterable                      shift and go to state 67

state 102

    (119) inalterable -> VarName OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 157


state 103

    (123) arguments -> allExpression .

    COMMA           reduce using rule 123 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 123 (arguments -> allExpression .)


state 104

    (121) args -> empty .

    CLOSING_PARENTHESES reduce using rule 121 (args -> empty .)


state 105

    (120) args -> arguments .
    (122) arguments -> arguments . COMMA allExpression

    CLOSING_PARENTHESES reduce using rule 120 (args -> arguments .)
    COMMA           shift and go to state 158


state 106

    (73) mathOp -> DIVIDEEQUAL .

    NUMBER          reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    VarName         reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    TILDA           reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    MINUS           reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    TIMES           reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    QUESTION_MARK   reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    OPENING_PARENTHESES reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    CONST_KW        reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    TRUE_KW         reduce using rule 73 (mathOp -> DIVIDEEQUAL .)
    FALSE_KW        reduce using rule 73 (mathOp -> DIVIDEEQUAL .)


state 107

    (71) mathOp -> MINUSEQUAL .

    NUMBER          reduce using rule 71 (mathOp -> MINUSEQUAL .)
    VarName         reduce using rule 71 (mathOp -> MINUSEQUAL .)
    TILDA           reduce using rule 71 (mathOp -> MINUSEQUAL .)
    MINUS           reduce using rule 71 (mathOp -> MINUSEQUAL .)
    TIMES           reduce using rule 71 (mathOp -> MINUSEQUAL .)
    QUESTION_MARK   reduce using rule 71 (mathOp -> MINUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 71 (mathOp -> MINUSEQUAL .)
    CONST_KW        reduce using rule 71 (mathOp -> MINUSEQUAL .)
    TRUE_KW         reduce using rule 71 (mathOp -> MINUSEQUAL .)
    FALSE_KW        reduce using rule 71 (mathOp -> MINUSEQUAL .)


state 108

    (70) mathOp -> PLUSEQUAL .

    NUMBER          reduce using rule 70 (mathOp -> PLUSEQUAL .)
    VarName         reduce using rule 70 (mathOp -> PLUSEQUAL .)
    TILDA           reduce using rule 70 (mathOp -> PLUSEQUAL .)
    MINUS           reduce using rule 70 (mathOp -> PLUSEQUAL .)
    TIMES           reduce using rule 70 (mathOp -> PLUSEQUAL .)
    QUESTION_MARK   reduce using rule 70 (mathOp -> PLUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 70 (mathOp -> PLUSEQUAL .)
    CONST_KW        reduce using rule 70 (mathOp -> PLUSEQUAL .)
    TRUE_KW         reduce using rule 70 (mathOp -> PLUSEQUAL .)
    FALSE_KW        reduce using rule 70 (mathOp -> PLUSEQUAL .)


state 109

    (65) allExpression -> alterable PLUSPLUS .

    SEMICOLON       reduce using rule 65 (allExpression -> alterable PLUSPLUS .)
    CLOSING_PARENTHESES reduce using rule 65 (allExpression -> alterable PLUSPLUS .)
    COMMA           reduce using rule 65 (allExpression -> alterable PLUSPLUS .)
    CLOSING_BRACKET reduce using rule 65 (allExpression -> alterable PLUSPLUS .)


state 110

    (66) allExpression -> alterable MINUSMINUS .

    SEMICOLON       reduce using rule 66 (allExpression -> alterable MINUSMINUS .)
    CLOSING_PARENTHESES reduce using rule 66 (allExpression -> alterable MINUSMINUS .)
    COMMA           reduce using rule 66 (allExpression -> alterable MINUSMINUS .)
    CLOSING_BRACKET reduce using rule 66 (allExpression -> alterable MINUSMINUS .)


state 111

    (69) mathOp -> EQUAL .

    NUMBER          reduce using rule 69 (mathOp -> EQUAL .)
    VarName         reduce using rule 69 (mathOp -> EQUAL .)
    TILDA           reduce using rule 69 (mathOp -> EQUAL .)
    MINUS           reduce using rule 69 (mathOp -> EQUAL .)
    TIMES           reduce using rule 69 (mathOp -> EQUAL .)
    QUESTION_MARK   reduce using rule 69 (mathOp -> EQUAL .)
    OPENING_PARENTHESES reduce using rule 69 (mathOp -> EQUAL .)
    CONST_KW        reduce using rule 69 (mathOp -> EQUAL .)
    TRUE_KW         reduce using rule 69 (mathOp -> EQUAL .)
    FALSE_KW        reduce using rule 69 (mathOp -> EQUAL .)


state 112

    (64) allExpression -> alterable mathOp . allExpression
    (68) allExpression -> alterable mathOp . NUMBER
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    NUMBER          shift and go to state 160
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    factor                         shift and go to state 41
    relExpression                  shift and go to state 39
    allExpression                  shift and go to state 159
    alterable                      shift and go to state 67

state 113

    (72) mathOp -> TIMESEQUAL .

    NUMBER          reduce using rule 72 (mathOp -> TIMESEQUAL .)
    VarName         reduce using rule 72 (mathOp -> TIMESEQUAL .)
    TILDA           reduce using rule 72 (mathOp -> TIMESEQUAL .)
    MINUS           reduce using rule 72 (mathOp -> TIMESEQUAL .)
    TIMES           reduce using rule 72 (mathOp -> TIMESEQUAL .)
    QUESTION_MARK   reduce using rule 72 (mathOp -> TIMESEQUAL .)
    OPENING_PARENTHESES reduce using rule 72 (mathOp -> TIMESEQUAL .)
    CONST_KW        reduce using rule 72 (mathOp -> TIMESEQUAL .)
    TRUE_KW         reduce using rule 72 (mathOp -> TIMESEQUAL .)
    FALSE_KW        reduce using rule 72 (mathOp -> TIMESEQUAL .)


state 114

    (117) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PLUS            reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND             reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR              reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 117 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 115

    (104) mathEXP -> mathEXP DIVIDE mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    MINUS           reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TIMES           reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    DIVIDE          reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESSEQUAL       reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATEREQUAL    reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    EQUALEQUAL      reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESS_THAN       reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATER_THAN    reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    NOTEQUAL        reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_AND     reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_OR      reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TILDA           reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    AND             reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    OR              reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_BRACKET reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    COMMA           reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    SEMICOLON       reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .)
    PERCENTAGE      shift and go to state 72

  ! PERCENTAGE      [ reduce using rule 104 (mathEXP -> mathEXP DIVIDE mathEXP .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 71 ]


state 116

    (105) mathEXP -> mathEXP PERCENTAGE mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    MINUS           reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TIMES           reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    DIVIDE          reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    PERCENTAGE      reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESSEQUAL       reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATEREQUAL    reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    EQUALEQUAL      reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESS_THAN       reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATER_THAN    reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    NOTEQUAL        reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_AND     reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_OR      reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TILDA           reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    AND             reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    OR              reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_BRACKET reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    COMMA           reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    SEMICOLON       reduce using rule 105 (mathEXP -> mathEXP PERCENTAGE mathEXP .)

  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! PERCENTAGE      [ shift and go to state 72 ]


state 117

    (91) relExpression -> mathEXP compareType mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP

    LOGICAL_AND     reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    LOGICAL_OR      reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    TILDA           reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    AND             reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    OR              reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    COMMA           reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 91 (relExpression -> mathEXP compareType mathEXP .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 71
    PERCENTAGE      shift and go to state 72


state 118

    (102) mathEXP -> mathEXP MINUS mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    MINUS           reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    LESSEQUAL       reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATEREQUAL    reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    EQUALEQUAL      reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    LESS_THAN       reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATER_THAN    reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    NOTEQUAL        reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_AND     reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_OR      reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    TILDA           reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    AND             reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    OR              reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_BRACKET reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    COMMA           reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    SEMICOLON       reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 71
    PERCENTAGE      shift and go to state 72

  ! TIMES           [ reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 102 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 77 ]


state 119

    (103) mathEXP -> mathEXP TIMES mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    MINUS           reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    TIMES           reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    DIVIDE          reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    LESSEQUAL       reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATEREQUAL    reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    EQUALEQUAL      reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    LESS_THAN       reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATER_THAN    reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    NOTEQUAL        reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_AND     reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_OR      reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    TILDA           reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    AND             reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    OR              reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_BRACKET reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_PARENTHESES reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    COMMA           reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    SEMICOLON       reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .)
    PERCENTAGE      shift and go to state 72

  ! PERCENTAGE      [ reduce using rule 103 (mathEXP -> mathEXP TIMES mathEXP .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 71 ]


state 120

    (101) mathEXP -> mathEXP PLUS mathEXP .
    (101) mathEXP -> mathEXP . PLUS mathEXP
    (102) mathEXP -> mathEXP . MINUS mathEXP
    (103) mathEXP -> mathEXP . TIMES mathEXP
    (104) mathEXP -> mathEXP . DIVIDE mathEXP
    (105) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    MINUS           reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    LESSEQUAL       reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATEREQUAL    reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    EQUALEQUAL      reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    LESS_THAN       reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATER_THAN    reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    NOTEQUAL        reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_AND     reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_OR      reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    TILDA           reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    AND             reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    OR              reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_BRACKET reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    COMMA           reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    SEMICOLON       reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 71
    PERCENTAGE      shift and go to state 72

  ! TIMES           [ reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 101 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 77 ]


state 121

    (84) eachExpression -> eachExpression AND eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    LOGICAL_OR      reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    AND             reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    OR              reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    COMMA           reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_BRACKET reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    SEMICOLON       reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .)
    TILDA           shift and go to state 89

  ! TILDA           [ reduce using rule 84 (eachExpression -> eachExpression AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 122

    (85) eachExpression -> eachExpression AND THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 161
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 123

    (86) eachExpression -> eachExpression AND ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 162
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 124

    (87) eachExpression -> eachExpression OR eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .)
    OR              reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .)
    COMMA           reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_BRACKET reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .)
    SEMICOLON       reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .) ]
  ! TILDA           [ reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .) ]
  ! AND             [ reduce using rule 87 (eachExpression -> eachExpression OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 125

    (88) eachExpression -> eachExpression OR THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 163
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 126

    (89) eachExpression -> eachExpression OR ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 164
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 127

    (77) eachExpression -> eachExpression LOGICAL_OR eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    OR              reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    COMMA           reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_BRACKET reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    SEMICOLON       reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! TILDA           [ reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! AND             [ reduce using rule 77 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 128

    (78) eachExpression -> eachExpression LOGICAL_OR THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 165
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 129

    (79) eachExpression -> eachExpression LOGICAL_OR ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 166
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 130

    (80) eachExpression -> eachExpression TILDA eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    TILDA           reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    AND             reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    OR              reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    COMMA           reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)
    SEMICOLON       reduce using rule 80 (eachExpression -> eachExpression TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 131

    (81) eachExpression -> eachExpression TILDA THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 167
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 132

    (83) eachExpression -> eachExpression TILDA ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 168
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 133

    (74) eachExpression -> eachExpression LOGICAL_AND eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    LOGICAL_OR      reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    AND             reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    OR              reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    COMMA           reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_BRACKET reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    SEMICOLON       reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    TILDA           shift and go to state 89

  ! TILDA           [ reduce using rule 74 (eachExpression -> eachExpression LOGICAL_AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 134

    (75) eachExpression -> eachExpression LOGICAL_AND THEN_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 169
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 135

    (76) eachExpression -> eachExpression LOGICAL_AND ELSE_KW . eachExpression
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 170
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 136

    (115) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 171


state 137

    (116) alterable -> alterable DOT VarName .

    PLUSPLUS        reduce using rule 116 (alterable -> alterable DOT VarName .)
    MINUSMINUS      reduce using rule 116 (alterable -> alterable DOT VarName .)
    OPENING_BRACKET reduce using rule 116 (alterable -> alterable DOT VarName .)
    DOT             reduce using rule 116 (alterable -> alterable DOT VarName .)
    EQUAL           reduce using rule 116 (alterable -> alterable DOT VarName .)
    PLUSEQUAL       reduce using rule 116 (alterable -> alterable DOT VarName .)
    MINUSEQUAL      reduce using rule 116 (alterable -> alterable DOT VarName .)
    TIMESEQUAL      reduce using rule 116 (alterable -> alterable DOT VarName .)
    DIVIDEEQUAL     reduce using rule 116 (alterable -> alterable DOT VarName .)
    PLUS            reduce using rule 116 (alterable -> alterable DOT VarName .)
    MINUS           reduce using rule 116 (alterable -> alterable DOT VarName .)
    TIMES           reduce using rule 116 (alterable -> alterable DOT VarName .)
    DIVIDE          reduce using rule 116 (alterable -> alterable DOT VarName .)
    PERCENTAGE      reduce using rule 116 (alterable -> alterable DOT VarName .)
    LESSEQUAL       reduce using rule 116 (alterable -> alterable DOT VarName .)
    GREATEREQUAL    reduce using rule 116 (alterable -> alterable DOT VarName .)
    EQUALEQUAL      reduce using rule 116 (alterable -> alterable DOT VarName .)
    LESS_THAN       reduce using rule 116 (alterable -> alterable DOT VarName .)
    GREATER_THAN    reduce using rule 116 (alterable -> alterable DOT VarName .)
    NOTEQUAL        reduce using rule 116 (alterable -> alterable DOT VarName .)
    LOGICAL_AND     reduce using rule 116 (alterable -> alterable DOT VarName .)
    LOGICAL_OR      reduce using rule 116 (alterable -> alterable DOT VarName .)
    TILDA           reduce using rule 116 (alterable -> alterable DOT VarName .)
    AND             reduce using rule 116 (alterable -> alterable DOT VarName .)
    OR              reduce using rule 116 (alterable -> alterable DOT VarName .)
    SEMICOLON       reduce using rule 116 (alterable -> alterable DOT VarName .)
    CLOSING_BRACKET reduce using rule 116 (alterable -> alterable DOT VarName .)
    CLOSING_PARENTHESES reduce using rule 116 (alterable -> alterable DOT VarName .)
    COMMA           reduce using rule 116 (alterable -> alterable DOT VarName .)


state 138

    (61) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 172


state 139

    (48) statement -> phrase .

    CLOSING_BRACE   reduce using rule 48 (statement -> phrase .)
    SEMICOLON       reduce using rule 48 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 48 (statement -> phrase .)
    TILL_KW         reduce using rule 48 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 48 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 48 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 48 (statement -> phrase .)
    VarName         reduce using rule 48 (statement -> phrase .)
    TILDA           reduce using rule 48 (statement -> phrase .)
    MINUS           reduce using rule 48 (statement -> phrase .)
    TIMES           reduce using rule 48 (statement -> phrase .)
    QUESTION_MARK   reduce using rule 48 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 48 (statement -> phrase .)
    CONST_KW        reduce using rule 48 (statement -> phrase .)
    TRUE_KW         reduce using rule 48 (statement -> phrase .)
    FALSE_KW        reduce using rule 48 (statement -> phrase .)
    VOID_KW         reduce using rule 48 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 48 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 48 (statement -> phrase .)
    INTEGER_KW      reduce using rule 48 (statement -> phrase .)
    CHAR_KW         reduce using rule 48 (statement -> phrase .)
    BOOL_KW         reduce using rule 48 (statement -> phrase .)
    INT_KW          reduce using rule 48 (statement -> phrase .)
    $end            reduce using rule 48 (statement -> phrase .)


state 140

    (49) statement -> compoundPhrase .

    CLOSING_BRACE   reduce using rule 49 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 49 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 49 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 49 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 49 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 49 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 49 (statement -> compoundPhrase .)
    VarName         reduce using rule 49 (statement -> compoundPhrase .)
    TILDA           reduce using rule 49 (statement -> compoundPhrase .)
    MINUS           reduce using rule 49 (statement -> compoundPhrase .)
    TIMES           reduce using rule 49 (statement -> compoundPhrase .)
    QUESTION_MARK   reduce using rule 49 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 49 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 49 (statement -> compoundPhrase .)
    TRUE_KW         reduce using rule 49 (statement -> compoundPhrase .)
    FALSE_KW        reduce using rule 49 (statement -> compoundPhrase .)
    VOID_KW         reduce using rule 49 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 49 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 49 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 49 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 49 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 49 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 49 (statement -> compoundPhrase .)
    $end            reduce using rule 49 (statement -> compoundPhrase .)


state 141

    (50) statement -> iterationPhrase .

    CLOSING_BRACE   reduce using rule 50 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 50 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 50 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 50 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 50 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 50 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 50 (statement -> iterationPhrase .)
    VarName         reduce using rule 50 (statement -> iterationPhrase .)
    TILDA           reduce using rule 50 (statement -> iterationPhrase .)
    MINUS           reduce using rule 50 (statement -> iterationPhrase .)
    TIMES           reduce using rule 50 (statement -> iterationPhrase .)
    QUESTION_MARK   reduce using rule 50 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 50 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 50 (statement -> iterationPhrase .)
    TRUE_KW         reduce using rule 50 (statement -> iterationPhrase .)
    FALSE_KW        reduce using rule 50 (statement -> iterationPhrase .)
    VOID_KW         reduce using rule 50 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 50 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 50 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 50 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 50 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 50 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 50 (statement -> iterationPhrase .)
    $end            reduce using rule 50 (statement -> iterationPhrase .)


state 142

    (51) statement -> returnPhrase .

    CLOSING_BRACE   reduce using rule 51 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 51 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 51 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 51 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 51 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 51 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 51 (statement -> returnPhrase .)
    VarName         reduce using rule 51 (statement -> returnPhrase .)
    TILDA           reduce using rule 51 (statement -> returnPhrase .)
    MINUS           reduce using rule 51 (statement -> returnPhrase .)
    TIMES           reduce using rule 51 (statement -> returnPhrase .)
    QUESTION_MARK   reduce using rule 51 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 51 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 51 (statement -> returnPhrase .)
    TRUE_KW         reduce using rule 51 (statement -> returnPhrase .)
    FALSE_KW        reduce using rule 51 (statement -> returnPhrase .)
    VOID_KW         reduce using rule 51 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 51 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 51 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 51 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 51 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 51 (statement -> returnPhrase .)
    INT_KW          reduce using rule 51 (statement -> returnPhrase .)
    $end            reduce using rule 51 (statement -> returnPhrase .)


state 143

    (27) function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 27 (function -> type VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 144

    (52) statement -> continue .

    CLOSING_BRACE   reduce using rule 52 (statement -> continue .)
    SEMICOLON       reduce using rule 52 (statement -> continue .)
    OPENING_BRACE   reduce using rule 52 (statement -> continue .)
    TILL_KW         reduce using rule 52 (statement -> continue .)
    COMEBACK_KW     reduce using rule 52 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 52 (statement -> continue .)
    CONTINUE_KW     reduce using rule 52 (statement -> continue .)
    VarName         reduce using rule 52 (statement -> continue .)
    TILDA           reduce using rule 52 (statement -> continue .)
    MINUS           reduce using rule 52 (statement -> continue .)
    TIMES           reduce using rule 52 (statement -> continue .)
    QUESTION_MARK   reduce using rule 52 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 52 (statement -> continue .)
    CONST_KW        reduce using rule 52 (statement -> continue .)
    TRUE_KW         reduce using rule 52 (statement -> continue .)
    FALSE_KW        reduce using rule 52 (statement -> continue .)
    VOID_KW         reduce using rule 52 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 52 (statement -> continue .)
    CHARACTER_KW    reduce using rule 52 (statement -> continue .)
    INTEGER_KW      reduce using rule 52 (statement -> continue .)
    CHAR_KW         reduce using rule 52 (statement -> continue .)
    BOOL_KW         reduce using rule 52 (statement -> continue .)
    INT_KW          reduce using rule 52 (statement -> continue .)
    $end            reduce using rule 52 (statement -> continue .)


state 145

    (60) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 173


state 146

    (62) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    factor                         shift and go to state 41
    relExpression                  shift and go to state 39
    allExpression                  shift and go to state 174
    alterable                      shift and go to state 67

state 147

    (63) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 175


state 148

    (56) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 176


state 149

    (57) phrase -> SEMICOLON .

    CLOSING_BRACE   reduce using rule 57 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 57 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 57 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 57 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 57 (phrase -> SEMICOLON .)
    $end            reduce using rule 57 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 57 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 57 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 57 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (phrase -> SEMICOLON .)
    VarName         reduce using rule 57 (phrase -> SEMICOLON .)
    TILDA           reduce using rule 57 (phrase -> SEMICOLON .)
    MINUS           reduce using rule 57 (phrase -> SEMICOLON .)
    TIMES           reduce using rule 57 (phrase -> SEMICOLON .)
    QUESTION_MARK   reduce using rule 57 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 57 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 57 (phrase -> SEMICOLON .)
    TRUE_KW         reduce using rule 57 (phrase -> SEMICOLON .)
    FALSE_KW        reduce using rule 57 (phrase -> SEMICOLON .)


state 150

    (53) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> . empty
    (127) empty -> .

    STATIC_KW       reduce using rule 127 (empty -> .)
    BOOLEAN_KW      reduce using rule 127 (empty -> .)
    CHARACTER_KW    reduce using rule 127 (empty -> .)
    INTEGER_KW      reduce using rule 127 (empty -> .)
    CHAR_KW         reduce using rule 127 (empty -> .)
    BOOL_KW         reduce using rule 127 (empty -> .)
    INT_KW          reduce using rule 127 (empty -> .)
    CLOSING_BRACE   reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    OPENING_BRACE   reduce using rule 127 (empty -> .)
    TILL_KW         reduce using rule 127 (empty -> .)
    COMEBACK_KW     reduce using rule 127 (empty -> .)
    GIVEBACK_KW     reduce using rule 127 (empty -> .)
    CONTINUE_KW     reduce using rule 127 (empty -> .)
    VarName         reduce using rule 127 (empty -> .)
    TILDA           reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    TIMES           reduce using rule 127 (empty -> .)
    QUESTION_MARK   reduce using rule 127 (empty -> .)
    OPENING_PARENTHESES reduce using rule 127 (empty -> .)
    CONST_KW        reduce using rule 127 (empty -> .)
    TRUE_KW         reduce using rule 127 (empty -> .)
    FALSE_KW        reduce using rule 127 (empty -> .)

    empty                          shift and go to state 177
    localDeclarations              shift and go to state 178

state 151

    (13) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    STATIC_KW       reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOLEAN_KW      reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHARACTER_KW    reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INTEGER_KW      reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHAR_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOL_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INT_KW          reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CLOSING_BRACE   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_BRACE   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILL_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMEBACK_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    GIVEBACK_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONTINUE_KW     reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    VarName         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    QUESTION_MARK   reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_PARENTHESES reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONST_KW        reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TRUE_KW         reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    FALSE_KW        reduce using rule 13 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 152

    (26) function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 26 (function -> type FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 153

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 179


state 154

    (38) paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .

    COMMA           reduce using rule 38 (paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 38 (paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 38 (paramId -> VarName OPENING_BRACKET CLOSING_BRACKET .)


state 155

    (33) paramList -> paramList COMMA paramId .

    COMMA           reduce using rule 33 (paramList -> paramList COMMA paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramList COMMA paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramList COMMA paramId .)


state 156

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 180


state 157

    (119) inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PLUS            reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MINUS           reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIMES           reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TILDA           reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND             reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR              reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMMA           reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 119 (inalterable -> VarName OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 158

    (122) arguments -> arguments COMMA . allExpression
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 69
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    factor                         shift and go to state 41
    relExpression                  shift and go to state 39
    allExpression                  shift and go to state 181
    alterable                      shift and go to state 67

state 159

    (64) allExpression -> alterable mathOp allExpression .

    SEMICOLON       reduce using rule 64 (allExpression -> alterable mathOp allExpression .)
    CLOSING_PARENTHESES reduce using rule 64 (allExpression -> alterable mathOp allExpression .)
    COMMA           reduce using rule 64 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 64 (allExpression -> alterable mathOp allExpression .)


state 160

    (68) allExpression -> alterable mathOp NUMBER .

    SEMICOLON       reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)
    CLOSING_PARENTHESES reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)
    COMMA           reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)
    CLOSING_BRACKET reduce using rule 68 (allExpression -> alterable mathOp NUMBER .)


state 161

    (85) eachExpression -> eachExpression AND THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    OR              reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    COMMA           reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 85 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 162

    (86) eachExpression -> eachExpression AND ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    TILDA           reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    AND             reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    OR              reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    COMMA           reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 86 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 163

    (88) eachExpression -> eachExpression OR THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    OR              reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    COMMA           reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 88 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 164

    (89) eachExpression -> eachExpression OR ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    TILDA           reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    AND             reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    OR              reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    COMMA           reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 89 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 165

    (78) eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    OR              reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    COMMA           reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 78 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 166

    (79) eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    TILDA           reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    AND             reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    OR              reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    COMMA           reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 79 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 167

    (81) eachExpression -> eachExpression TILDA THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    OR              reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    COMMA           reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 81 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 168

    (83) eachExpression -> eachExpression TILDA ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    TILDA           reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    AND             reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    OR              reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    COMMA           reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 83 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 169

    (75) eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    OR              reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    COMMA           reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 90
    TILDA           shift and go to state 89
    AND             shift and go to state 85

  ! LOGICAL_AND     [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! OR              [ shift and go to state 86 ]


state 170

    (76) eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    LOGICAL_OR      reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    TILDA           reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    AND             reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    OR              reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    COMMA           reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 76 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 90 ]
  ! LOGICAL_OR      [ shift and go to state 87 ]
  ! TILDA           [ shift and go to state 89 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]


state 171

    (115) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    PLUSPLUS        reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSMINUS      reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OPENING_BRACKET reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DOT             reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUAL           reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSEQUAL       reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSEQUAL      reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMESEQUAL      reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDEEQUAL     reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUS            reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDE          reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PERCENTAGE      reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESSEQUAL       reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATEREQUAL    reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUALEQUAL      reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESS_THAN       reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATER_THAN    reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NOTEQUAL        reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_AND     reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_OR      reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND             reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR              reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 115 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 172

    (61) returnPhrase -> COMEBACK_KW SEMICOLON .

    VOID_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VarName         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILDA           reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MINUS           reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIMES           reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE_KW         reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE_KW        reduce using rule 61 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 173

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    VarName         shift and go to state 36
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    eachExpression                 shift and go to state 182
    inalterable                    shift and go to state 47
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    relExpression                  shift and go to state 39
    factor                         shift and go to state 41
    alterable                      shift and go to state 49

state 174

    (62) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 183


state 175

    (63) continue -> CONTINUE_KW SEMICOLON .

    VOID_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    VarName         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TILDA           reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    MINUS           reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TIMES           reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE_KW         reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE_KW        reduce using rule 63 (continue -> CONTINUE_KW SEMICOLON .)


state 176

    (56) phrase -> allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    VOID_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    VarName         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TILDA           reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    MINUS           reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TIMES           reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 56 (phrase -> allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 56 (phrase -> allExpression SEMICOLON .)


state 177

    (36) localDeclarations -> empty .

    STATIC_KW       reduce using rule 36 (localDeclarations -> empty .)
    BOOLEAN_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHARACTER_KW    reduce using rule 36 (localDeclarations -> empty .)
    INTEGER_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHAR_KW         reduce using rule 36 (localDeclarations -> empty .)
    BOOL_KW         reduce using rule 36 (localDeclarations -> empty .)
    INT_KW          reduce using rule 36 (localDeclarations -> empty .)
    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> empty .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    TILL_KW         reduce using rule 36 (localDeclarations -> empty .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> empty .)
    VarName         reduce using rule 36 (localDeclarations -> empty .)
    TILDA           reduce using rule 36 (localDeclarations -> empty .)
    MINUS           reduce using rule 36 (localDeclarations -> empty .)
    TIMES           reduce using rule 36 (localDeclarations -> empty .)
    QUESTION_MARK   reduce using rule 36 (localDeclarations -> empty .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> empty .)
    CONST_KW        reduce using rule 36 (localDeclarations -> empty .)
    TRUE_KW         reduce using rule 36 (localDeclarations -> empty .)
    FALSE_KW        reduce using rule 36 (localDeclarations -> empty .)


state 178

    (53) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (35) localDeclarations -> localDeclarations . ScopedVariableDec
    (54) statementList -> . statementList statement
    (55) statementList -> . empty
    (9) ScopedVariableDec -> . scopedSpecifier variableList
    (127) empty -> .
    (16) scopedSpecifier -> . STATIC_KW type
    (17) scopedSpecifier -> . type
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    OPENING_BRACE   reduce using rule 127 (empty -> .)
    TILL_KW         reduce using rule 127 (empty -> .)
    COMEBACK_KW     reduce using rule 127 (empty -> .)
    GIVEBACK_KW     reduce using rule 127 (empty -> .)
    CONTINUE_KW     reduce using rule 127 (empty -> .)
    VarName         reduce using rule 127 (empty -> .)
    TILDA           reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    TIMES           reduce using rule 127 (empty -> .)
    QUESTION_MARK   reduce using rule 127 (empty -> .)
    OPENING_PARENTHESES reduce using rule 127 (empty -> .)
    CONST_KW        reduce using rule 127 (empty -> .)
    TRUE_KW         reduce using rule 127 (empty -> .)
    FALSE_KW        reduce using rule 127 (empty -> .)
    STATIC_KW       shift and go to state 188
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    scopedSpecifier                shift and go to state 184
    type                           shift and go to state 189
    statementList                  shift and go to state 186
    empty                          shift and go to state 187
    ScopedVariableDec              shift and go to state 185

state 179

    (25) function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 25 (function -> VOID_KW VarName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 180

    (24) function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 24 (function -> VOID_KW FuncName OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 181

    (122) arguments -> arguments COMMA allExpression .

    COMMA           reduce using rule 122 (arguments -> arguments COMMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 122 (arguments -> arguments COMMA allExpression .)


state 182

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (74) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (78) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . TILDA eachExpression
    (81) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (83) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . AND eachExpression
    (85) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (86) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (87) eachExpression -> eachExpression . OR eachExpression
    (88) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (89) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 190
    LOGICAL_AND     shift and go to state 90
    LOGICAL_OR      shift and go to state 87
    TILDA           shift and go to state 89
    AND             shift and go to state 85
    OR              shift and go to state 86


state 183

    (62) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    VOID_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VarName         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILDA           reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MINUS           reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIMES           reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 62 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 184

    (9) ScopedVariableDec -> scopedSpecifier . variableList
    (10) variableList -> . variableList COMMA varInitialization
    (11) variableList -> . varInitialization
    (12) varInitialization -> . varForm
    (13) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (14) varForm -> . VarName OPENING_BRACKET eachExpression CLOSING_BRACKET
    (15) varForm -> . VarName

    VarName         shift and go to state 56

    varForm                        shift and go to state 18
    variableList                   shift and go to state 191
    varInitialization              shift and go to state 19

state 185

    (35) localDeclarations -> localDeclarations ScopedVariableDec .

    STATIC_KW       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INT_KW          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    VarName         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILDA           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    MINUS           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TIMES           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QUESTION_MARK   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONST_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TRUE_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    FALSE_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 186

    (53) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (54) statementList -> statementList . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    CLOSING_BRACE   shift and go to state 193
    SEMICOLON       shift and go to state 149
    OPENING_BRACE   shift and go to state 150
    TILL_KW         shift and go to state 145
    COMEBACK_KW     shift and go to state 138
    GIVEBACK_KW     shift and go to state 146
    CONTINUE_KW     shift and go to state 147
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    factor                         shift and go to state 41
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    compoundPhrase                 shift and go to state 140
    eachExpression                 shift and go to state 69
    continue                       shift and go to state 144
    statement                      shift and go to state 192
    relExpression                  shift and go to state 39
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    iterationPhrase                shift and go to state 141
    inalterable                    shift and go to state 47
    returnPhrase                   shift and go to state 142
    phrase                         shift and go to state 139
    allExpression                  shift and go to state 148
    alterable                      shift and go to state 67

state 187

    (55) statementList -> empty .

    CLOSING_BRACE   reduce using rule 55 (statementList -> empty .)
    SEMICOLON       reduce using rule 55 (statementList -> empty .)
    OPENING_BRACE   reduce using rule 55 (statementList -> empty .)
    TILL_KW         reduce using rule 55 (statementList -> empty .)
    COMEBACK_KW     reduce using rule 55 (statementList -> empty .)
    GIVEBACK_KW     reduce using rule 55 (statementList -> empty .)
    CONTINUE_KW     reduce using rule 55 (statementList -> empty .)
    VarName         reduce using rule 55 (statementList -> empty .)
    TILDA           reduce using rule 55 (statementList -> empty .)
    MINUS           reduce using rule 55 (statementList -> empty .)
    TIMES           reduce using rule 55 (statementList -> empty .)
    QUESTION_MARK   reduce using rule 55 (statementList -> empty .)
    OPENING_PARENTHESES reduce using rule 55 (statementList -> empty .)
    CONST_KW        reduce using rule 55 (statementList -> empty .)
    TRUE_KW         reduce using rule 55 (statementList -> empty .)
    FALSE_KW        reduce using rule 55 (statementList -> empty .)


state 188

    (16) scopedSpecifier -> STATIC_KW . type
    (18) type -> . BOOLEAN_KW
    (19) type -> . CHARACTER_KW
    (20) type -> . INTEGER_KW
    (21) type -> . CHAR_KW
    (22) type -> . BOOL_KW
    (23) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 2
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 10

    type                           shift and go to state 194

state 189

    (17) scopedSpecifier -> type .

    VarName         reduce using rule 17 (scopedSpecifier -> type .)


state 190

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (48) statement -> . phrase
    (49) statement -> . compoundPhrase
    (50) statement -> . iterationPhrase
    (51) statement -> . returnPhrase
    (52) statement -> . continue
    (56) phrase -> . allExpression SEMICOLON
    (57) phrase -> . SEMICOLON
    (53) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (60) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (61) returnPhrase -> . COMEBACK_KW SEMICOLON
    (62) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (63) continue -> . CONTINUE_KW SEMICOLON
    (64) allExpression -> . alterable mathOp allExpression
    (65) allExpression -> . alterable PLUSPLUS
    (66) allExpression -> . alterable MINUSMINUS
    (67) allExpression -> . eachExpression
    (68) allExpression -> . alterable mathOp NUMBER
    (114) alterable -> . VarName
    (115) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (116) alterable -> . alterable DOT VarName
    (74) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (76) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (78) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (79) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression TILDA eachExpression
    (81) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (82) eachExpression -> . TILDA eachExpression
    (83) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression AND eachExpression
    (85) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (86) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (87) eachExpression -> . eachExpression OR eachExpression
    (88) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (89) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (90) eachExpression -> . relExpression
    (91) relExpression -> . mathEXP compareType mathEXP
    (92) relExpression -> . mathEXP
    (101) mathEXP -> . mathEXP PLUS mathEXP
    (102) mathEXP -> . mathEXP MINUS mathEXP
    (103) mathEXP -> . mathEXP TIMES mathEXP
    (104) mathEXP -> . mathEXP DIVIDE mathEXP
    (105) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (106) mathEXP -> . unaryExpression
    (107) unaryExpression -> . unaryop unaryExpression
    (108) unaryExpression -> . factor
    (109) unaryop -> . MINUS
    (110) unaryop -> . TIMES
    (111) unaryop -> . QUESTION_MARK
    (112) factor -> . inalterable
    (113) factor -> . alterable
    (117) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (118) inalterable -> . constant
    (119) inalterable -> . VarName OPENING_PARENTHESES args CLOSING_PARENTHESES
    (124) constant -> . CONST_KW
    (125) constant -> . TRUE_KW
    (126) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 149
    OPENING_BRACE   shift and go to state 150
    TILL_KW         shift and go to state 145
    COMEBACK_KW     shift and go to state 138
    GIVEBACK_KW     shift and go to state 146
    CONTINUE_KW     shift and go to state 147
    VarName         shift and go to state 66
    TILDA           shift and go to state 53
    MINUS           shift and go to state 52
    TIMES           shift and go to state 38
    QUESTION_MARK   shift and go to state 51
    OPENING_PARENTHESES shift and go to state 37
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 40

    factor                         shift and go to state 41
    unaryExpression                shift and go to state 44
    unaryop                        shift and go to state 45
    compoundPhrase                 shift and go to state 140
    eachExpression                 shift and go to state 69
    continue                       shift and go to state 144
    statement                      shift and go to state 195
    relExpression                  shift and go to state 39
    mathEXP                        shift and go to state 42
    constant                       shift and go to state 50
    iterationPhrase                shift and go to state 141
    inalterable                    shift and go to state 47
    returnPhrase                   shift and go to state 142
    phrase                         shift and go to state 139
    allExpression                  shift and go to state 148
    alterable                      shift and go to state 67

state 191

    (9) ScopedVariableDec -> scopedSpecifier variableList .
    (10) variableList -> variableList . COMMA varInitialization

    STATIC_KW       reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOLEAN_KW      reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHARACTER_KW    reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    INTEGER_KW      reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHAR_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOL_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    INT_KW          reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CLOSING_BRACE   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    SEMICOLON       reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_BRACE   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILL_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMEBACK_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    GIVEBACK_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONTINUE_KW     reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    VarName         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILDA           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    MINUS           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TIMES           reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    QUESTION_MARK   reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_PARENTHESES reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONST_KW        reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    TRUE_KW         reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    FALSE_KW        reduce using rule 9 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMMA           shift and go to state 27


state 192

    (54) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 54 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 54 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 54 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 54 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 54 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 54 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 54 (statementList -> statementList statement .)
    VarName         reduce using rule 54 (statementList -> statementList statement .)
    TILDA           reduce using rule 54 (statementList -> statementList statement .)
    MINUS           reduce using rule 54 (statementList -> statementList statement .)
    TIMES           reduce using rule 54 (statementList -> statementList statement .)
    QUESTION_MARK   reduce using rule 54 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 54 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 54 (statementList -> statementList statement .)
    TRUE_KW         reduce using rule 54 (statementList -> statementList statement .)
    FALSE_KW        reduce using rule 54 (statementList -> statementList statement .)


state 193

    (53) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    CLOSING_BRACE   reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VarName         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILDA           reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MINUS           reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIMES           reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QUESTION_MARK   reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE_KW         reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE_KW        reduce using rule 53 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 194

    (16) scopedSpecifier -> STATIC_KW type .

    VarName         reduce using rule 16 (scopedSpecifier -> STATIC_KW type .)


state 195

    (60) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    CLOSING_BRACE   reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    VarName         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILDA           reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MINUS           reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIMES           reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QUESTION_MARK   reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE_KW        reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    VOID_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 60 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)

