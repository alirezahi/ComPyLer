Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrletter -> NUMBER
Rule 3     numOrletter -> LETTER
Rule 4     list -> list declaration
Rule 5     list -> declaration
Rule 6     declaration -> function
Rule 7     declaration -> varDeclaration
Rule 8     varDeclaration -> type variableList SEMICOLON
Rule 9     ScopedVariableDec -> scopedSpecifier variableList
Rule 10    variableList -> variableList COMMA varInitialization
Rule 11    variableList -> varInitialization
Rule 12    varInitialization -> varForm
Rule 13    varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 14    varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
Rule 15    varForm -> LETTER numOrletter
Rule 16    scopedSpecifier -> STATIC_KW type
Rule 17    scopedSpecifier -> type
Rule 18    type -> BOOLEAN_KW
Rule 19    type -> CHARACTER_KW
Rule 20    type -> INTEGER_KW
Rule 21    type -> CHAR_KW
Rule 22    type -> BOOL_KW
Rule 23    type -> INT_KW
Rule 24    function -> VOID_KW
Rule 25    function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 26    function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 27    parameter -> listOfParameters
Rule 28    parameter -> empty
Rule 29    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 30    listOfParameters -> paramTypeList
Rule 31    paramTypeList -> type paramList
Rule 32    paramList -> paramList COMMA paramId
Rule 33    paramList -> paramId
Rule 34    localDeclarations -> localDeclarations ScopedVariableDec
Rule 35    localDeclarations -> empty
Rule 36    paramId -> LETTER numOrletter
Rule 37    paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET
Rule 38    statement -> phrase
Rule 39    statement -> compoundPhrase
Rule 40    statement -> selectPhrase
Rule 41    statement -> iterationPhrase
Rule 42    statement -> returnPhrase
Rule 43    statement -> continue
Rule 44    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 45    statementList -> statementList statement
Rule 46    statementList -> empty
Rule 47    phrase -> allExpression SEMICOLON
Rule 48    phrase -> SEMICOLON
Rule 49    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
Rule 50    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
Rule 51    ifBody -> statement
Rule 52    ifBody -> statement OTHER_KW statement
Rule 53    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 54    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 55    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 56    returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON
Rule 57    continue -> CONTINUE_KW SEMICOLON
Rule 58    allExpression -> alterable mathOp allExpression
Rule 59    allExpression -> alterable PLUSPLUS
Rule 60    allExpression -> alterable MINUSMINUS
Rule 61    allExpression -> eachExpression
Rule 62    allExpression -> alterable mathOp alterable
Rule 63    mathOp -> EQUAL
Rule 64    mathOp -> PLUSEQUAL
Rule 65    mathOp -> MINUSEQUAL
Rule 66    mathOp -> TIMESEQUAL
Rule 67    mathOp -> DIVIDEEQUAL
Rule 68    eachExpression -> eachExpression LOGICAL_AND eachExpression
Rule 69    eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression
Rule 70    eachExpression -> LOGICAL_AND eachExpression
Rule 71    eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression
Rule 72    eachExpression -> eachExpression LOGICAL_OR eachExpression
Rule 73    eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression
Rule 74    eachExpression -> LOGICAL_OR eachExpression
Rule 75    eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression
Rule 76    eachExpression -> eachExpression TILDA eachExpression
Rule 77    eachExpression -> eachExpression TILDA THEN_KW eachExpression
Rule 78    eachExpression -> TILDA eachExpression
Rule 79    eachExpression -> eachExpression TILDA ELSE_KW eachExpression
Rule 80    eachExpression -> eachExpression AND eachExpression
Rule 81    eachExpression -> eachExpression AND THEN_KW eachExpression
Rule 82    eachExpression -> AND eachExpression
Rule 83    eachExpression -> eachExpression AND ELSE_KW eachExpression
Rule 84    eachExpression -> eachExpression OR eachExpression
Rule 85    eachExpression -> eachExpression OR THEN_KW eachExpression
Rule 86    eachExpression -> OR eachExpression
Rule 87    eachExpression -> eachExpression OR ELSE_KW eachExpression
Rule 88    eachExpression -> relExpression
Rule 89    relExpression -> mathEXP compareType mathEXP
Rule 90    relExpression -> mathEXP
Rule 91    compareType -> equal
Rule 92    compareType -> nonEqual
Rule 93    equal -> LESSEQUAL
Rule 94    equal -> GREATEREQUAL
Rule 95    equal -> EQUALEQUAL
Rule 96    nonEqual -> LESS_THAN
Rule 97    nonEqual -> GREATER_THAN
Rule 98    nonEqual -> NOTEQUAL
Rule 99    mathEXP -> mathEXP PLUS mathEXP
Rule 100   mathEXP -> mathEXP MINUS mathEXP
Rule 101   mathEXP -> mathEXP TIMES mathEXP
Rule 102   mathEXP -> mathEXP DIVIDE mathEXP
Rule 103   mathEXP -> mathEXP PERCENTAGE mathEXP
Rule 104   mathEXP -> unaryExpression
Rule 105   unaryExpression -> unaryop unaryExpression
Rule 106   unaryExpression -> factor
Rule 107   unaryop -> MINUS
Rule 108   unaryop -> TIMES
Rule 109   unaryop -> QUESTION_MARK
Rule 110   factor -> inalterable
Rule 111   factor -> alterable
Rule 112   alterable -> LETTER numOrletter
Rule 113   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 114   alterable -> alterable DOT LETTER
Rule 115   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 116   inalterable -> constant
Rule 117   inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 118   args -> arguments
Rule 119   args -> empty
Rule 120   arguments -> arguments COMMA allExpression
Rule 121   arguments -> allExpression
Rule 122   constant -> CONST_KW
Rule 123   constant -> TRUE_KW
Rule 124   constant -> FALSE_KW
Rule 125   empty -> <empty>

Terminals, with rules where they appear

AND                  : 80 81 82 83
BOOLEAN_KW           : 18
BOOL_KW              : 22
CHARACTER_KW         : 19
CHAR_KW              : 21
CLOSING_BRACE        : 25 44 50
CLOSING_BRACKET      : 14 37 113
CLOSING_PARENTHESES  : 13 25 26 49 50 53 115 117
COMEBACK_KW          : 54
COMMA                : 10 32 120
COMMENT              : 
CONST_KW             : 122
CONTINUE_KW          : 57
DIVIDE               : 102
DIVIDEEQUAL          : 67
DOT                  : 114
DOUBLE_DOT           : 13
ELSE_KW              : 71 75 79 83 87
EQUAL                : 63
EQUALEQUAL           : 95
FALSE_KW             : 124
GIVEBACK_KW          : 55 56
GREATEREQUAL         : 94
GREATER_THAN         : 97
IF_KW                : 49 50
INTEGER_KW           : 20
INT_KW               : 23
LESSEQUAL            : 93
LESS_THAN            : 96
LETTER               : 3 14 15 26 36 37 112 114 117
LOGICAL_AND          : 68 69 70 71
LOGICAL_OR           : 72 73 74 75
MINUS                : 100 107
MINUSEQUAL           : 65
MINUSMINUS           : 60
NOTEQUAL             : 98
NUMBER               : 2
OPENING_BRACE        : 25 44 50
OPENING_BRACKET      : 14 37 113
OPENING_PARENTHESES  : 13 25 26 49 50 53 115 117
OR                   : 84 85 86 87
OTHER_KW             : 52
PERCENTAGE           : 103
PLUS                 : 99
PLUSEQUAL            : 64
PLUSPLUS             : 59
QUESTION_MARK        : 109
SEMICOLON            : 8 29 47 48 54 55 56 57
STATIC_KW            : 16
THEN_KW              : 69 73 77 81 85
TILDA                : 76 77 78 79
TILL_KW              : 53
TIMES                : 101 108
TIMESEQUAL           : 66
TRUE_KW              : 123
VOID_KW              : 24
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 34
allExpression        : 47 55 58 113 115 120 121
alterable            : 58 59 60 62 62 111 113 114
args                 : 117
arguments            : 118 120
compareType          : 89
compoundPhrase       : 39
constant             : 116
continue             : 43
declaration          : 4 5
eachExpression       : 13 14 49 50 53 61 68 68 69 69 70 71 71 72 72 73 73 74 75 75 76 76 77 77 78 79 79 80 80 81 81 82 83 83 84 84 85 85 86 87 87
empty                : 28 35 46 119
equal                : 91
factor               : 106
function             : 6
ifBody               : 49 50 50
inalterable          : 110
iterationPhrase      : 41
list                 : 1 4
listOfParameters     : 27 29
localDeclarations    : 34 44
mathEXP              : 89 89 90 99 99 100 100 101 101 102 102 103 103
mathOp               : 58 62
nonEqual             : 92
numOrletter          : 14 15 25 26 36 37 56 112 117
paramId              : 32 33
paramList            : 31 32
paramTypeList        : 29 30
parameter            : 25 26
phrase               : 38
program              : 0
relExpression        : 88
returnPhrase         : 42
scopedSpecifier      : 9
selectPhrase         : 40
statement            : 25 26 45 51 52 52 53
statementList        : 44 45
type                 : 8 16 17 26 31
unaryExpression      : 104 105
unaryop              : 105
varDeclaration       : 7
varForm              : 12 13
varInitialization    : 10 11
variableList         : 8 9 10

