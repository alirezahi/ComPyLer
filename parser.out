Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrletter -> NUMBER
Rule 3     numOrletter -> LETTER
Rule 4     numOrletter -> empty
Rule 5     list -> list declaration
Rule 6     list -> declaration
Rule 7     declaration -> function
Rule 8     declaration -> varDeclaration
Rule 9     varDeclaration -> type variableList
Rule 10    ScopedVariableDec -> scopedSpecifier variableList
Rule 11    variableList -> variableList COMMA varInitialization
Rule 12    variableList -> varInitialization
Rule 13    varInitialization -> varForm
Rule 14    varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 15    varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
Rule 16    varForm -> LETTER numOrletter
Rule 17    scopedSpecifier -> STATIC_KW type
Rule 18    scopedSpecifier -> type
Rule 19    type -> BOOLEAN_KW
Rule 20    type -> CHARACTER_KW
Rule 21    type -> INTEGER_KW
Rule 22    type -> CHAR_KW
Rule 23    type -> BOOL_KW
Rule 24    type -> INT_KW
Rule 25    function -> VOID_KW
Rule 26    function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 27    function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> empty
Rule 30    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList COMMA paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> localDeclarations ScopedVariableDec
Rule 36    localDeclarations -> empty
Rule 37    paramId -> LETTER numOrletter
Rule 38    paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET
Rule 39    statement -> phrase
Rule 40    statement -> compoundPhrase
Rule 41    statement -> selectPhrase
Rule 42    statement -> iterationPhrase
Rule 43    statement -> returnPhrase
Rule 44    statement -> continue
Rule 45    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 46    statementList -> statementList statement
Rule 47    statementList -> empty
Rule 48    phrase -> allExpression SEMICOLON
Rule 49    phrase -> SEMICOLON
Rule 50    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
Rule 51    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
Rule 52    ifBody -> statement
Rule 53    ifBody -> statement OTHER_KW statement
Rule 54    ifBody -> SEMICOLON
Rule 55    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 56    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 57    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 58    returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON
Rule 59    continue -> CONTINUE_KW SEMICOLON
Rule 60    allExpression -> alterable mathOp allExpression
Rule 61    allExpression -> alterable PLUSPLUS
Rule 62    allExpression -> alterable MINUSMINUS
Rule 63    allExpression -> eachExpression
Rule 64    allExpression -> alterable mathOp alterable
Rule 65    mathOp -> EQUAL
Rule 66    mathOp -> PLUSEQUAL
Rule 67    mathOp -> MINUSEQUAL
Rule 68    mathOp -> TIMESEQUAL
Rule 69    mathOp -> DIVIDEEQUAL
Rule 70    eachExpression -> eachExpression logicOp eachExpression
Rule 71    eachExpression -> eachExpression logicOp THEN_KW
Rule 72    eachExpression -> logicOp eachExpression
Rule 73    eachExpression -> relExpression
Rule 74    eachExpression -> eachExpression logicOp ELSE_KW eachExpression
Rule 75    relExpression -> mathEXP compareType mathEXP
Rule 76    relExpression -> mathEXP
Rule 77    compareType -> equal
Rule 78    compareType -> nonEqual
Rule 79    equal -> LESSEQUAL
Rule 80    equal -> GREATEREQUAL
Rule 81    equal -> EQUALEQUAL
Rule 82    nonEqual -> LESS_THAN
Rule 83    nonEqual -> GREATER_THAN
Rule 84    nonEqual -> NOTEQUAL
Rule 85    mathEXP -> mathEXP op mathEXP
Rule 86    mathEXP -> unaryExpression
Rule 87    op -> PLUS
Rule 88    op -> MINUS
Rule 89    op -> TIMES
Rule 90    op -> DIVIDE
Rule 91    op -> PERCENTAGE
Rule 92    unaryExpression -> unaryop unaryExpression
Rule 93    unaryExpression -> factor
Rule 94    unaryop -> MINUS
Rule 95    unaryop -> TIMES
Rule 96    unaryop -> QUESTION_MARK
Rule 97    factor -> inalterable
Rule 98    factor -> alterable
Rule 99    alterable -> LETTER numOrletter
Rule 100   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 101   alterable -> alterable DOT LETTER
Rule 102   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 103   inalterable -> constant
Rule 104   inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 105   args -> arguments
Rule 106   args -> empty
Rule 107   arguments -> arguments COMMA allExpression
Rule 108   arguments -> allExpression
Rule 109   constant -> CONST_KW
Rule 110   constant -> TRUE_KW
Rule 111   constant -> FALSE_KW
Rule 112   logicOp -> LOGICAL_AND
Rule 113   logicOp -> LOGICAL_OR
Rule 114   logicOp -> TILDA
Rule 115   logicOp -> AND
Rule 116   logicOp -> OR
Rule 117   empty -> <empty>

Terminals, with rules where they appear

AND                  : 115
BOOLEAN_KW           : 19
BOOL_KW              : 23
CHARACTER_KW         : 20
CHAR_KW              : 22
CLOSING_BRACE        : 26 45 51
CLOSING_BRACKET      : 15 38 100
CLOSING_PARENTHESES  : 14 26 27 50 51 55 102 104
COMEBACK_KW          : 56
COMMA                : 11 33 107
COMMENT              : 
CONST_KW             : 109
CONTINUE_KW          : 59
DIVIDE               : 90
DIVIDEEQUAL          : 69
DOT                  : 101
DOUBLE_DOT           : 14
ELSE_KW              : 74
EQUAL                : 65
EQUALEQUAL           : 81
FALSE_KW             : 111
GIVEBACK_KW          : 57 58
GREATEREQUAL         : 80
GREATER_THAN         : 83
IF_KW                : 50 51
INTEGER_KW           : 21
INT_KW               : 24
LESSEQUAL            : 79
LESS_THAN            : 82
LETTER               : 3 15 16 27 37 38 99 101 104
LOGICAL_AND          : 112
LOGICAL_OR           : 113
MINUS                : 88 94
MINUSEQUAL           : 67
MINUSMINUS           : 62
NOTEQUAL             : 84
NUMBER               : 2
OPENING_BRACE        : 26 45 51
OPENING_BRACKET      : 15 38 100
OPENING_PARENTHESES  : 14 26 27 50 51 55 102 104
OR                   : 116
OTHER_KW             : 53
PERCENTAGE           : 91
PLUS                 : 87
PLUSEQUAL            : 66
PLUSPLUS             : 61
QUESTION_MARK        : 96
SEMICOLON            : 30 48 49 54 56 57 58 59
STATIC_KW            : 17
THEN_KW              : 71
TILDA                : 114
TILL_KW              : 55
TIMES                : 89 95
TIMESEQUAL           : 68
TRUE_KW              : 110
VOID_KW              : 25
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 35
allExpression        : 48 57 60 100 102 107 108
alterable            : 60 61 62 64 64 98 100 101
args                 : 104
arguments            : 105 107
compareType          : 75
compoundPhrase       : 40
constant             : 103
continue             : 44
declaration          : 5 6
eachExpression       : 14 15 50 51 55 63 70 70 71 72 74 74
empty                : 4 29 36 47 106
equal                : 77
factor               : 93
function             : 7
ifBody               : 50 51 51
inalterable          : 97
iterationPhrase      : 42
list                 : 1 5
listOfParameters     : 28 30
localDeclarations    : 35 45
logicOp              : 70 71 72 74
mathEXP              : 75 75 76 85 85
mathOp               : 60 64
nonEqual             : 78
numOrletter          : 15 16 26 27 37 38 58 99 104
op                   : 85
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 26 27
phrase               : 39
program              : 0
relExpression        : 73
returnPhrase         : 43
scopedSpecifier      : 10
selectPhrase         : 41
statement            : 26 27 46 52 53 53 55
statementList        : 45 46
type                 : 9 17 18 27 32
unaryExpression      : 86 92
unaryop              : 92
varDeclaration       : 8
varForm              : 13 14
varInitialization    : 11 12
variableList         : 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (5) list -> . list declaration
    (6) list -> . declaration
    (7) declaration -> . function
    (8) declaration -> . varDeclaration
    (25) function -> . VOID_KW
    (26) function -> . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (27) function -> . type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> . type variableList
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW
    (117) empty -> .

    VOID_KW         shift and go to state 5
    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)

    varDeclaration                 shift and go to state 2
    declaration                    shift and go to state 3
    list                           shift and go to state 4
    function                       shift and go to state 9
    numOrletter                    shift and go to state 10
    program                        shift and go to state 16
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 1

    (21) type -> INTEGER_KW .

    LETTER          reduce using rule 21 (type -> INTEGER_KW .)


state 2

    (8) declaration -> varDeclaration .

    VOID_KW         reduce using rule 8 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 8 (declaration -> varDeclaration .)
    LETTER          reduce using rule 8 (declaration -> varDeclaration .)
    BOOLEAN_KW      reduce using rule 8 (declaration -> varDeclaration .)
    CHARACTER_KW    reduce using rule 8 (declaration -> varDeclaration .)
    INTEGER_KW      reduce using rule 8 (declaration -> varDeclaration .)
    CHAR_KW         reduce using rule 8 (declaration -> varDeclaration .)
    BOOL_KW         reduce using rule 8 (declaration -> varDeclaration .)
    INT_KW          reduce using rule 8 (declaration -> varDeclaration .)
    OPENING_PARENTHESES reduce using rule 8 (declaration -> varDeclaration .)
    $end            reduce using rule 8 (declaration -> varDeclaration .)


state 3

    (6) list -> declaration .

    VOID_KW         reduce using rule 6 (list -> declaration .)
    NUMBER          reduce using rule 6 (list -> declaration .)
    LETTER          reduce using rule 6 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 6 (list -> declaration .)
    CHARACTER_KW    reduce using rule 6 (list -> declaration .)
    INTEGER_KW      reduce using rule 6 (list -> declaration .)
    CHAR_KW         reduce using rule 6 (list -> declaration .)
    BOOL_KW         reduce using rule 6 (list -> declaration .)
    INT_KW          reduce using rule 6 (list -> declaration .)
    OPENING_PARENTHESES reduce using rule 6 (list -> declaration .)
    $end            reduce using rule 6 (list -> declaration .)


state 4

    (1) program -> list .
    (5) list -> list . declaration
    (7) declaration -> . function
    (8) declaration -> . varDeclaration
    (25) function -> . VOID_KW
    (26) function -> . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (27) function -> . type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> . type variableList
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW
    (117) empty -> .

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 5
    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)

    varDeclaration                 shift and go to state 2
    declaration                    shift and go to state 18
    function                       shift and go to state 9
    numOrletter                    shift and go to state 10
    type                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (25) function -> VOID_KW .

    VOID_KW         reduce using rule 25 (function -> VOID_KW .)
    NUMBER          reduce using rule 25 (function -> VOID_KW .)
    LETTER          reduce using rule 25 (function -> VOID_KW .)
    BOOLEAN_KW      reduce using rule 25 (function -> VOID_KW .)
    CHARACTER_KW    reduce using rule 25 (function -> VOID_KW .)
    INTEGER_KW      reduce using rule 25 (function -> VOID_KW .)
    CHAR_KW         reduce using rule 25 (function -> VOID_KW .)
    BOOL_KW         reduce using rule 25 (function -> VOID_KW .)
    INT_KW          reduce using rule 25 (function -> VOID_KW .)
    OPENING_PARENTHESES reduce using rule 25 (function -> VOID_KW .)
    $end            reduce using rule 25 (function -> VOID_KW .)


state 6

    (27) function -> type . LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> type . variableList
    (11) variableList -> . variableList COMMA varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> . LETTER numOrletter

    LETTER          shift and go to state 20

    variableList                   shift and go to state 22
    varForm                        shift and go to state 21
    varInitialization              shift and go to state 19

state 7

    (4) numOrletter -> empty .

    OPENING_PARENTHESES reduce using rule 4 (numOrletter -> empty .)
    OPENING_BRACKET reduce using rule 4 (numOrletter -> empty .)
    DOUBLE_DOT      reduce using rule 4 (numOrletter -> empty .)
    COMMA           reduce using rule 4 (numOrletter -> empty .)
    VOID_KW         reduce using rule 4 (numOrletter -> empty .)
    NUMBER          reduce using rule 4 (numOrletter -> empty .)
    LETTER          reduce using rule 4 (numOrletter -> empty .)
    BOOLEAN_KW      reduce using rule 4 (numOrletter -> empty .)
    CHARACTER_KW    reduce using rule 4 (numOrletter -> empty .)
    INTEGER_KW      reduce using rule 4 (numOrletter -> empty .)
    CHAR_KW         reduce using rule 4 (numOrletter -> empty .)
    BOOL_KW         reduce using rule 4 (numOrletter -> empty .)
    INT_KW          reduce using rule 4 (numOrletter -> empty .)
    $end            reduce using rule 4 (numOrletter -> empty .)
    PLUSPLUS        reduce using rule 4 (numOrletter -> empty .)
    MINUSMINUS      reduce using rule 4 (numOrletter -> empty .)
    DOT             reduce using rule 4 (numOrletter -> empty .)
    EQUAL           reduce using rule 4 (numOrletter -> empty .)
    PLUSEQUAL       reduce using rule 4 (numOrletter -> empty .)
    MINUSEQUAL      reduce using rule 4 (numOrletter -> empty .)
    TIMESEQUAL      reduce using rule 4 (numOrletter -> empty .)
    DIVIDEEQUAL     reduce using rule 4 (numOrletter -> empty .)
    PLUS            reduce using rule 4 (numOrletter -> empty .)
    MINUS           reduce using rule 4 (numOrletter -> empty .)
    TIMES           reduce using rule 4 (numOrletter -> empty .)
    DIVIDE          reduce using rule 4 (numOrletter -> empty .)
    PERCENTAGE      reduce using rule 4 (numOrletter -> empty .)
    LESSEQUAL       reduce using rule 4 (numOrletter -> empty .)
    GREATEREQUAL    reduce using rule 4 (numOrletter -> empty .)
    EQUALEQUAL      reduce using rule 4 (numOrletter -> empty .)
    LESS_THAN       reduce using rule 4 (numOrletter -> empty .)
    GREATER_THAN    reduce using rule 4 (numOrletter -> empty .)
    NOTEQUAL        reduce using rule 4 (numOrletter -> empty .)
    LOGICAL_AND     reduce using rule 4 (numOrletter -> empty .)
    LOGICAL_OR      reduce using rule 4 (numOrletter -> empty .)
    TILDA           reduce using rule 4 (numOrletter -> empty .)
    AND             reduce using rule 4 (numOrletter -> empty .)
    OR              reduce using rule 4 (numOrletter -> empty .)
    SEMICOLON       reduce using rule 4 (numOrletter -> empty .)
    STATIC_KW       reduce using rule 4 (numOrletter -> empty .)
    CLOSING_BRACE   reduce using rule 4 (numOrletter -> empty .)
    OPENING_BRACE   reduce using rule 4 (numOrletter -> empty .)
    IF_KW           reduce using rule 4 (numOrletter -> empty .)
    TILL_KW         reduce using rule 4 (numOrletter -> empty .)
    COMEBACK_KW     reduce using rule 4 (numOrletter -> empty .)
    GIVEBACK_KW     reduce using rule 4 (numOrletter -> empty .)
    CONTINUE_KW     reduce using rule 4 (numOrletter -> empty .)
    QUESTION_MARK   reduce using rule 4 (numOrletter -> empty .)
    CONST_KW        reduce using rule 4 (numOrletter -> empty .)
    TRUE_KW         reduce using rule 4 (numOrletter -> empty .)
    FALSE_KW        reduce using rule 4 (numOrletter -> empty .)
    CLOSING_BRACKET reduce using rule 4 (numOrletter -> empty .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrletter -> empty .)


state 8

    (22) type -> CHAR_KW .

    LETTER          reduce using rule 22 (type -> CHAR_KW .)


state 9

    (7) declaration -> function .

    VOID_KW         reduce using rule 7 (declaration -> function .)
    NUMBER          reduce using rule 7 (declaration -> function .)
    LETTER          reduce using rule 7 (declaration -> function .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> function .)
    CHARACTER_KW    reduce using rule 7 (declaration -> function .)
    INTEGER_KW      reduce using rule 7 (declaration -> function .)
    CHAR_KW         reduce using rule 7 (declaration -> function .)
    BOOL_KW         reduce using rule 7 (declaration -> function .)
    INT_KW          reduce using rule 7 (declaration -> function .)
    OPENING_PARENTHESES reduce using rule 7 (declaration -> function .)
    $end            reduce using rule 7 (declaration -> function .)


state 10

    (26) function -> numOrletter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 23


state 11

    (2) numOrletter -> NUMBER .

    OPENING_PARENTHESES reduce using rule 2 (numOrletter -> NUMBER .)
    OPENING_BRACKET reduce using rule 2 (numOrletter -> NUMBER .)
    DOUBLE_DOT      reduce using rule 2 (numOrletter -> NUMBER .)
    COMMA           reduce using rule 2 (numOrletter -> NUMBER .)
    VOID_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    NUMBER          reduce using rule 2 (numOrletter -> NUMBER .)
    LETTER          reduce using rule 2 (numOrletter -> NUMBER .)
    BOOLEAN_KW      reduce using rule 2 (numOrletter -> NUMBER .)
    CHARACTER_KW    reduce using rule 2 (numOrletter -> NUMBER .)
    INTEGER_KW      reduce using rule 2 (numOrletter -> NUMBER .)
    CHAR_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    BOOL_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    INT_KW          reduce using rule 2 (numOrletter -> NUMBER .)
    $end            reduce using rule 2 (numOrletter -> NUMBER .)
    PLUSPLUS        reduce using rule 2 (numOrletter -> NUMBER .)
    MINUSMINUS      reduce using rule 2 (numOrletter -> NUMBER .)
    DOT             reduce using rule 2 (numOrletter -> NUMBER .)
    EQUAL           reduce using rule 2 (numOrletter -> NUMBER .)
    PLUSEQUAL       reduce using rule 2 (numOrletter -> NUMBER .)
    MINUSEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    TIMESEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    DIVIDEEQUAL     reduce using rule 2 (numOrletter -> NUMBER .)
    PLUS            reduce using rule 2 (numOrletter -> NUMBER .)
    MINUS           reduce using rule 2 (numOrletter -> NUMBER .)
    TIMES           reduce using rule 2 (numOrletter -> NUMBER .)
    DIVIDE          reduce using rule 2 (numOrletter -> NUMBER .)
    PERCENTAGE      reduce using rule 2 (numOrletter -> NUMBER .)
    LESSEQUAL       reduce using rule 2 (numOrletter -> NUMBER .)
    GREATEREQUAL    reduce using rule 2 (numOrletter -> NUMBER .)
    EQUALEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    LESS_THAN       reduce using rule 2 (numOrletter -> NUMBER .)
    GREATER_THAN    reduce using rule 2 (numOrletter -> NUMBER .)
    NOTEQUAL        reduce using rule 2 (numOrletter -> NUMBER .)
    LOGICAL_AND     reduce using rule 2 (numOrletter -> NUMBER .)
    LOGICAL_OR      reduce using rule 2 (numOrletter -> NUMBER .)
    TILDA           reduce using rule 2 (numOrletter -> NUMBER .)
    AND             reduce using rule 2 (numOrletter -> NUMBER .)
    OR              reduce using rule 2 (numOrletter -> NUMBER .)
    SEMICOLON       reduce using rule 2 (numOrletter -> NUMBER .)
    STATIC_KW       reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_BRACE   reduce using rule 2 (numOrletter -> NUMBER .)
    OPENING_BRACE   reduce using rule 2 (numOrletter -> NUMBER .)
    IF_KW           reduce using rule 2 (numOrletter -> NUMBER .)
    TILL_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    COMEBACK_KW     reduce using rule 2 (numOrletter -> NUMBER .)
    GIVEBACK_KW     reduce using rule 2 (numOrletter -> NUMBER .)
    CONTINUE_KW     reduce using rule 2 (numOrletter -> NUMBER .)
    QUESTION_MARK   reduce using rule 2 (numOrletter -> NUMBER .)
    CONST_KW        reduce using rule 2 (numOrletter -> NUMBER .)
    TRUE_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    FALSE_KW        reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_BRACKET reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_PARENTHESES reduce using rule 2 (numOrletter -> NUMBER .)


state 12

    (19) type -> BOOLEAN_KW .

    LETTER          reduce using rule 19 (type -> BOOLEAN_KW .)


state 13

    (3) numOrletter -> LETTER .

    OPENING_PARENTHESES reduce using rule 3 (numOrletter -> LETTER .)
    OPENING_BRACKET reduce using rule 3 (numOrletter -> LETTER .)
    DOUBLE_DOT      reduce using rule 3 (numOrletter -> LETTER .)
    COMMA           reduce using rule 3 (numOrletter -> LETTER .)
    VOID_KW         reduce using rule 3 (numOrletter -> LETTER .)
    NUMBER          reduce using rule 3 (numOrletter -> LETTER .)
    LETTER          reduce using rule 3 (numOrletter -> LETTER .)
    BOOLEAN_KW      reduce using rule 3 (numOrletter -> LETTER .)
    CHARACTER_KW    reduce using rule 3 (numOrletter -> LETTER .)
    INTEGER_KW      reduce using rule 3 (numOrletter -> LETTER .)
    CHAR_KW         reduce using rule 3 (numOrletter -> LETTER .)
    BOOL_KW         reduce using rule 3 (numOrletter -> LETTER .)
    INT_KW          reduce using rule 3 (numOrletter -> LETTER .)
    $end            reduce using rule 3 (numOrletter -> LETTER .)
    PLUSPLUS        reduce using rule 3 (numOrletter -> LETTER .)
    MINUSMINUS      reduce using rule 3 (numOrletter -> LETTER .)
    DOT             reduce using rule 3 (numOrletter -> LETTER .)
    EQUAL           reduce using rule 3 (numOrletter -> LETTER .)
    PLUSEQUAL       reduce using rule 3 (numOrletter -> LETTER .)
    MINUSEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    TIMESEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    DIVIDEEQUAL     reduce using rule 3 (numOrletter -> LETTER .)
    PLUS            reduce using rule 3 (numOrletter -> LETTER .)
    MINUS           reduce using rule 3 (numOrletter -> LETTER .)
    TIMES           reduce using rule 3 (numOrletter -> LETTER .)
    DIVIDE          reduce using rule 3 (numOrletter -> LETTER .)
    PERCENTAGE      reduce using rule 3 (numOrletter -> LETTER .)
    LESSEQUAL       reduce using rule 3 (numOrletter -> LETTER .)
    GREATEREQUAL    reduce using rule 3 (numOrletter -> LETTER .)
    EQUALEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    LESS_THAN       reduce using rule 3 (numOrletter -> LETTER .)
    GREATER_THAN    reduce using rule 3 (numOrletter -> LETTER .)
    NOTEQUAL        reduce using rule 3 (numOrletter -> LETTER .)
    LOGICAL_AND     reduce using rule 3 (numOrletter -> LETTER .)
    LOGICAL_OR      reduce using rule 3 (numOrletter -> LETTER .)
    TILDA           reduce using rule 3 (numOrletter -> LETTER .)
    AND             reduce using rule 3 (numOrletter -> LETTER .)
    OR              reduce using rule 3 (numOrletter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrletter -> LETTER .)
    STATIC_KW       reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_BRACE   reduce using rule 3 (numOrletter -> LETTER .)
    OPENING_BRACE   reduce using rule 3 (numOrletter -> LETTER .)
    IF_KW           reduce using rule 3 (numOrletter -> LETTER .)
    TILL_KW         reduce using rule 3 (numOrletter -> LETTER .)
    COMEBACK_KW     reduce using rule 3 (numOrletter -> LETTER .)
    GIVEBACK_KW     reduce using rule 3 (numOrletter -> LETTER .)
    CONTINUE_KW     reduce using rule 3 (numOrletter -> LETTER .)
    QUESTION_MARK   reduce using rule 3 (numOrletter -> LETTER .)
    CONST_KW        reduce using rule 3 (numOrletter -> LETTER .)
    TRUE_KW         reduce using rule 3 (numOrletter -> LETTER .)
    FALSE_KW        reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_BRACKET reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 3 (numOrletter -> LETTER .)


state 14

    (23) type -> BOOL_KW .

    LETTER          reduce using rule 23 (type -> BOOL_KW .)


state 15

    (24) type -> INT_KW .

    LETTER          reduce using rule 24 (type -> INT_KW .)


state 16

    (0) S' -> program .



state 17

    (20) type -> CHARACTER_KW .

    LETTER          reduce using rule 20 (type -> CHARACTER_KW .)


state 18

    (5) list -> list declaration .

    VOID_KW         reduce using rule 5 (list -> list declaration .)
    NUMBER          reduce using rule 5 (list -> list declaration .)
    LETTER          reduce using rule 5 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> list declaration .)
    INTEGER_KW      reduce using rule 5 (list -> list declaration .)
    CHAR_KW         reduce using rule 5 (list -> list declaration .)
    BOOL_KW         reduce using rule 5 (list -> list declaration .)
    INT_KW          reduce using rule 5 (list -> list declaration .)
    OPENING_PARENTHESES reduce using rule 5 (list -> list declaration .)
    $end            reduce using rule 5 (list -> list declaration .)


state 19

    (12) variableList -> varInitialization .

    COMMA           reduce using rule 12 (variableList -> varInitialization .)
    STATIC_KW       reduce using rule 12 (variableList -> varInitialization .)
    BOOLEAN_KW      reduce using rule 12 (variableList -> varInitialization .)
    CHARACTER_KW    reduce using rule 12 (variableList -> varInitialization .)
    INTEGER_KW      reduce using rule 12 (variableList -> varInitialization .)
    CHAR_KW         reduce using rule 12 (variableList -> varInitialization .)
    BOOL_KW         reduce using rule 12 (variableList -> varInitialization .)
    INT_KW          reduce using rule 12 (variableList -> varInitialization .)
    CLOSING_BRACE   reduce using rule 12 (variableList -> varInitialization .)
    SEMICOLON       reduce using rule 12 (variableList -> varInitialization .)
    OPENING_BRACE   reduce using rule 12 (variableList -> varInitialization .)
    IF_KW           reduce using rule 12 (variableList -> varInitialization .)
    TILL_KW         reduce using rule 12 (variableList -> varInitialization .)
    COMEBACK_KW     reduce using rule 12 (variableList -> varInitialization .)
    GIVEBACK_KW     reduce using rule 12 (variableList -> varInitialization .)
    CONTINUE_KW     reduce using rule 12 (variableList -> varInitialization .)
    LETTER          reduce using rule 12 (variableList -> varInitialization .)
    LOGICAL_AND     reduce using rule 12 (variableList -> varInitialization .)
    LOGICAL_OR      reduce using rule 12 (variableList -> varInitialization .)
    TILDA           reduce using rule 12 (variableList -> varInitialization .)
    AND             reduce using rule 12 (variableList -> varInitialization .)
    OR              reduce using rule 12 (variableList -> varInitialization .)
    MINUS           reduce using rule 12 (variableList -> varInitialization .)
    TIMES           reduce using rule 12 (variableList -> varInitialization .)
    QUESTION_MARK   reduce using rule 12 (variableList -> varInitialization .)
    OPENING_PARENTHESES reduce using rule 12 (variableList -> varInitialization .)
    CONST_KW        reduce using rule 12 (variableList -> varInitialization .)
    TRUE_KW         reduce using rule 12 (variableList -> varInitialization .)
    FALSE_KW        reduce using rule 12 (variableList -> varInitialization .)
    VOID_KW         reduce using rule 12 (variableList -> varInitialization .)
    NUMBER          reduce using rule 12 (variableList -> varInitialization .)
    $end            reduce using rule 12 (variableList -> varInitialization .)


state 20

    (27) function -> type LETTER . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (15) varForm -> LETTER . numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (117) empty -> .

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    OPENING_BRACKET reduce using rule 117 (empty -> .)
    DOUBLE_DOT      reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    VOID_KW         reduce using rule 117 (empty -> .)
    BOOLEAN_KW      reduce using rule 117 (empty -> .)
    CHARACTER_KW    reduce using rule 117 (empty -> .)
    INTEGER_KW      reduce using rule 117 (empty -> .)
    CHAR_KW         reduce using rule 117 (empty -> .)
    BOOL_KW         reduce using rule 117 (empty -> .)
    INT_KW          reduce using rule 117 (empty -> .)
    $end            reduce using rule 117 (empty -> .)

  ! NUMBER          [ reduce using rule 117 (empty -> .) ]
  ! LETTER          [ reduce using rule 117 (empty -> .) ]

    numOrletter                    shift and go to state 24
    empty                          shift and go to state 7

state 21

    (13) varInitialization -> varForm .
    (14) varInitialization -> varForm . DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    COMMA           reduce using rule 13 (varInitialization -> varForm .)
    VOID_KW         reduce using rule 13 (varInitialization -> varForm .)
    NUMBER          reduce using rule 13 (varInitialization -> varForm .)
    LETTER          reduce using rule 13 (varInitialization -> varForm .)
    BOOLEAN_KW      reduce using rule 13 (varInitialization -> varForm .)
    CHARACTER_KW    reduce using rule 13 (varInitialization -> varForm .)
    INTEGER_KW      reduce using rule 13 (varInitialization -> varForm .)
    CHAR_KW         reduce using rule 13 (varInitialization -> varForm .)
    BOOL_KW         reduce using rule 13 (varInitialization -> varForm .)
    INT_KW          reduce using rule 13 (varInitialization -> varForm .)
    OPENING_PARENTHESES reduce using rule 13 (varInitialization -> varForm .)
    $end            reduce using rule 13 (varInitialization -> varForm .)
    STATIC_KW       reduce using rule 13 (varInitialization -> varForm .)
    CLOSING_BRACE   reduce using rule 13 (varInitialization -> varForm .)
    SEMICOLON       reduce using rule 13 (varInitialization -> varForm .)
    OPENING_BRACE   reduce using rule 13 (varInitialization -> varForm .)
    IF_KW           reduce using rule 13 (varInitialization -> varForm .)
    TILL_KW         reduce using rule 13 (varInitialization -> varForm .)
    COMEBACK_KW     reduce using rule 13 (varInitialization -> varForm .)
    GIVEBACK_KW     reduce using rule 13 (varInitialization -> varForm .)
    CONTINUE_KW     reduce using rule 13 (varInitialization -> varForm .)
    LOGICAL_AND     reduce using rule 13 (varInitialization -> varForm .)
    LOGICAL_OR      reduce using rule 13 (varInitialization -> varForm .)
    TILDA           reduce using rule 13 (varInitialization -> varForm .)
    AND             reduce using rule 13 (varInitialization -> varForm .)
    OR              reduce using rule 13 (varInitialization -> varForm .)
    MINUS           reduce using rule 13 (varInitialization -> varForm .)
    TIMES           reduce using rule 13 (varInitialization -> varForm .)
    QUESTION_MARK   reduce using rule 13 (varInitialization -> varForm .)
    CONST_KW        reduce using rule 13 (varInitialization -> varForm .)
    TRUE_KW         reduce using rule 13 (varInitialization -> varForm .)
    FALSE_KW        reduce using rule 13 (varInitialization -> varForm .)
    DOUBLE_DOT      shift and go to state 25


state 22

    (9) varDeclaration -> type variableList .
    (11) variableList -> variableList . COMMA varInitialization

    VOID_KW         reduce using rule 9 (varDeclaration -> type variableList .)
    NUMBER          reduce using rule 9 (varDeclaration -> type variableList .)
    LETTER          reduce using rule 9 (varDeclaration -> type variableList .)
    BOOLEAN_KW      reduce using rule 9 (varDeclaration -> type variableList .)
    CHARACTER_KW    reduce using rule 9 (varDeclaration -> type variableList .)
    INTEGER_KW      reduce using rule 9 (varDeclaration -> type variableList .)
    CHAR_KW         reduce using rule 9 (varDeclaration -> type variableList .)
    BOOL_KW         reduce using rule 9 (varDeclaration -> type variableList .)
    INT_KW          reduce using rule 9 (varDeclaration -> type variableList .)
    OPENING_PARENTHESES reduce using rule 9 (varDeclaration -> type variableList .)
    $end            reduce using rule 9 (varDeclaration -> type variableList .)
    COMMA           shift and go to state 26


state 23

    (26) function -> numOrletter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (117) empty -> .
    (32) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 117 (empty -> .)
    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15

    parameter                      shift and go to state 29
    listOfParameters               shift and go to state 28
    type                           shift and go to state 30
    paramTypeList                  shift and go to state 27
    empty                          shift and go to state 31

state 24

    (27) function -> type LETTER numOrletter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (15) varForm -> LETTER numOrletter . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER numOrletter .

  ! shift/reduce conflict for OPENING_PARENTHESES resolved as shift
    OPENING_PARENTHESES shift and go to state 32
    OPENING_BRACKET shift and go to state 33
    DOUBLE_DOT      reduce using rule 16 (varForm -> LETTER numOrletter .)
    COMMA           reduce using rule 16 (varForm -> LETTER numOrletter .)
    VOID_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    NUMBER          reduce using rule 16 (varForm -> LETTER numOrletter .)
    LETTER          reduce using rule 16 (varForm -> LETTER numOrletter .)
    BOOLEAN_KW      reduce using rule 16 (varForm -> LETTER numOrletter .)
    CHARACTER_KW    reduce using rule 16 (varForm -> LETTER numOrletter .)
    INTEGER_KW      reduce using rule 16 (varForm -> LETTER numOrletter .)
    CHAR_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    BOOL_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    INT_KW          reduce using rule 16 (varForm -> LETTER numOrletter .)
    $end            reduce using rule 16 (varForm -> LETTER numOrletter .)

  ! OPENING_PARENTHESES [ reduce using rule 16 (varForm -> LETTER numOrletter .) ]


state 25

    (14) varInitialization -> varForm DOUBLE_DOT . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 34


state 26

    (11) variableList -> variableList COMMA . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> . LETTER numOrletter

    LETTER          shift and go to state 35

    varForm                        shift and go to state 21
    varInitialization              shift and go to state 36

state 27

    (31) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 31 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 31 (listOfParameters -> paramTypeList .)


state 28

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 37


state 29

    (26) function -> numOrletter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 38


state 30

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList COMMA paramId
    (34) paramList -> . paramId
    (37) paramId -> . LETTER numOrletter
    (38) paramId -> . LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 39

    paramList                      shift and go to state 40
    paramId                        shift and go to state 41

state 31

    (29) parameter -> empty .

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> empty .)


state 32

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (117) empty -> .
    (32) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 117 (empty -> .)
    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15

    parameter                      shift and go to state 42
    listOfParameters               shift and go to state 28
    paramTypeList                  shift and go to state 27
    type                           shift and go to state 30
    empty                          shift and go to state 31

state 33

    (15) varForm -> LETTER numOrletter OPENING_BRACKET . eachExpression CLOSING_BRACKET
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 54
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 34

    (14) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 66
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 35

    (15) varForm -> LETTER . numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (117) empty -> .

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    OPENING_BRACKET reduce using rule 117 (empty -> .)
    DOUBLE_DOT      reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    VOID_KW         reduce using rule 117 (empty -> .)
    BOOLEAN_KW      reduce using rule 117 (empty -> .)
    CHARACTER_KW    reduce using rule 117 (empty -> .)
    INTEGER_KW      reduce using rule 117 (empty -> .)
    CHAR_KW         reduce using rule 117 (empty -> .)
    BOOL_KW         reduce using rule 117 (empty -> .)
    INT_KW          reduce using rule 117 (empty -> .)
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    $end            reduce using rule 117 (empty -> .)
    STATIC_KW       reduce using rule 117 (empty -> .)
    CLOSING_BRACE   reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    OPENING_BRACE   reduce using rule 117 (empty -> .)
    IF_KW           reduce using rule 117 (empty -> .)
    TILL_KW         reduce using rule 117 (empty -> .)
    COMEBACK_KW     reduce using rule 117 (empty -> .)
    GIVEBACK_KW     reduce using rule 117 (empty -> .)
    CONTINUE_KW     reduce using rule 117 (empty -> .)
    LOGICAL_AND     reduce using rule 117 (empty -> .)
    LOGICAL_OR      reduce using rule 117 (empty -> .)
    TILDA           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    QUESTION_MARK   reduce using rule 117 (empty -> .)
    CONST_KW        reduce using rule 117 (empty -> .)
    TRUE_KW         reduce using rule 117 (empty -> .)
    FALSE_KW        reduce using rule 117 (empty -> .)

  ! NUMBER          [ reduce using rule 117 (empty -> .) ]
  ! LETTER          [ reduce using rule 117 (empty -> .) ]

    empty                          shift and go to state 7
    numOrletter                    shift and go to state 67

state 36

    (11) variableList -> variableList COMMA varInitialization .

    COMMA           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    STATIC_KW       reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    BOOLEAN_KW      reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CHARACTER_KW    reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    INTEGER_KW      reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CHAR_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    BOOL_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    INT_KW          reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CLOSING_BRACE   reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    SEMICOLON       reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    OPENING_BRACE   reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    IF_KW           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    TILL_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    COMEBACK_KW     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    GIVEBACK_KW     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CONTINUE_KW     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    LETTER          reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    LOGICAL_AND     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    LOGICAL_OR      reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    TILDA           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    AND             reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    OR              reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    MINUS           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    TIMES           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    QUESTION_MARK   reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    OPENING_PARENTHESES reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CONST_KW        reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    TRUE_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    FALSE_KW        reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    VOID_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    NUMBER          reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    $end            reduce using rule 11 (variableList -> variableList COMMA varInitialization .)


state 37

    (30) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (32) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15

    paramTypeList                  shift and go to state 68
    type                           shift and go to state 30

state 38

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 69


state 39

    (37) paramId -> LETTER . numOrletter
    (38) paramId -> LETTER . numOrletter OPENING_BRACKET CLOSING_BRACKET
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (117) empty -> .

    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    OPENING_BRACKET reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    CLOSING_PARENTHESES reduce using rule 117 (empty -> .)

    empty                          shift and go to state 7
    numOrletter                    shift and go to state 70

state 40

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . COMMA paramId

    SEMICOLON       reduce using rule 32 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 32 (paramTypeList -> type paramList .)
    COMMA           shift and go to state 71


state 41

    (34) paramList -> paramId .

    COMMA           reduce using rule 34 (paramList -> paramId .)
    SEMICOLON       reduce using rule 34 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 34 (paramList -> paramId .)


state 42

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 72


state 43

    (112) logicOp -> LOGICAL_AND .

    LOGICAL_AND     reduce using rule 112 (logicOp -> LOGICAL_AND .)
    LOGICAL_OR      reduce using rule 112 (logicOp -> LOGICAL_AND .)
    TILDA           reduce using rule 112 (logicOp -> LOGICAL_AND .)
    AND             reduce using rule 112 (logicOp -> LOGICAL_AND .)
    OR              reduce using rule 112 (logicOp -> LOGICAL_AND .)
    MINUS           reduce using rule 112 (logicOp -> LOGICAL_AND .)
    TIMES           reduce using rule 112 (logicOp -> LOGICAL_AND .)
    QUESTION_MARK   reduce using rule 112 (logicOp -> LOGICAL_AND .)
    OPENING_PARENTHESES reduce using rule 112 (logicOp -> LOGICAL_AND .)
    LETTER          reduce using rule 112 (logicOp -> LOGICAL_AND .)
    CONST_KW        reduce using rule 112 (logicOp -> LOGICAL_AND .)
    TRUE_KW         reduce using rule 112 (logicOp -> LOGICAL_AND .)
    FALSE_KW        reduce using rule 112 (logicOp -> LOGICAL_AND .)
    THEN_KW         reduce using rule 112 (logicOp -> LOGICAL_AND .)
    ELSE_KW         reduce using rule 112 (logicOp -> LOGICAL_AND .)


state 44

    (98) factor -> alterable .
    (100) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> alterable . DOT LETTER

    PLUS            reduce using rule 98 (factor -> alterable .)
    MINUS           reduce using rule 98 (factor -> alterable .)
    TIMES           reduce using rule 98 (factor -> alterable .)
    DIVIDE          reduce using rule 98 (factor -> alterable .)
    PERCENTAGE      reduce using rule 98 (factor -> alterable .)
    LESSEQUAL       reduce using rule 98 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 98 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 98 (factor -> alterable .)
    LESS_THAN       reduce using rule 98 (factor -> alterable .)
    GREATER_THAN    reduce using rule 98 (factor -> alterable .)
    NOTEQUAL        reduce using rule 98 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 98 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 98 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 98 (factor -> alterable .)
    TILDA           reduce using rule 98 (factor -> alterable .)
    AND             reduce using rule 98 (factor -> alterable .)
    OR              reduce using rule 98 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 98 (factor -> alterable .)
    SEMICOLON       reduce using rule 98 (factor -> alterable .)
    COMMA           reduce using rule 98 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 74
    DOT             shift and go to state 73


state 45

    (94) unaryop -> MINUS .

    MINUS           reduce using rule 94 (unaryop -> MINUS .)
    TIMES           reduce using rule 94 (unaryop -> MINUS .)
    QUESTION_MARK   reduce using rule 94 (unaryop -> MINUS .)
    OPENING_PARENTHESES reduce using rule 94 (unaryop -> MINUS .)
    LETTER          reduce using rule 94 (unaryop -> MINUS .)
    CONST_KW        reduce using rule 94 (unaryop -> MINUS .)
    TRUE_KW         reduce using rule 94 (unaryop -> MINUS .)
    FALSE_KW        reduce using rule 94 (unaryop -> MINUS .)


state 46

    (111) constant -> FALSE_KW .

    PLUS            reduce using rule 111 (constant -> FALSE_KW .)
    MINUS           reduce using rule 111 (constant -> FALSE_KW .)
    TIMES           reduce using rule 111 (constant -> FALSE_KW .)
    DIVIDE          reduce using rule 111 (constant -> FALSE_KW .)
    PERCENTAGE      reduce using rule 111 (constant -> FALSE_KW .)
    LESSEQUAL       reduce using rule 111 (constant -> FALSE_KW .)
    GREATEREQUAL    reduce using rule 111 (constant -> FALSE_KW .)
    EQUALEQUAL      reduce using rule 111 (constant -> FALSE_KW .)
    LESS_THAN       reduce using rule 111 (constant -> FALSE_KW .)
    GREATER_THAN    reduce using rule 111 (constant -> FALSE_KW .)
    NOTEQUAL        reduce using rule 111 (constant -> FALSE_KW .)
    LOGICAL_AND     reduce using rule 111 (constant -> FALSE_KW .)
    LOGICAL_OR      reduce using rule 111 (constant -> FALSE_KW .)
    TILDA           reduce using rule 111 (constant -> FALSE_KW .)
    AND             reduce using rule 111 (constant -> FALSE_KW .)
    OR              reduce using rule 111 (constant -> FALSE_KW .)
    SEMICOLON       reduce using rule 111 (constant -> FALSE_KW .)
    CLOSING_BRACKET reduce using rule 111 (constant -> FALSE_KW .)
    CLOSING_PARENTHESES reduce using rule 111 (constant -> FALSE_KW .)
    COMMA           reduce using rule 111 (constant -> FALSE_KW .)


state 47

    (92) unaryExpression -> unaryop . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    inalterable                    shift and go to state 62
    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    unaryExpression                shift and go to state 75

state 48

    (116) logicOp -> OR .

    LOGICAL_AND     reduce using rule 116 (logicOp -> OR .)
    LOGICAL_OR      reduce using rule 116 (logicOp -> OR .)
    TILDA           reduce using rule 116 (logicOp -> OR .)
    AND             reduce using rule 116 (logicOp -> OR .)
    OR              reduce using rule 116 (logicOp -> OR .)
    MINUS           reduce using rule 116 (logicOp -> OR .)
    TIMES           reduce using rule 116 (logicOp -> OR .)
    QUESTION_MARK   reduce using rule 116 (logicOp -> OR .)
    OPENING_PARENTHESES reduce using rule 116 (logicOp -> OR .)
    LETTER          reduce using rule 116 (logicOp -> OR .)
    CONST_KW        reduce using rule 116 (logicOp -> OR .)
    TRUE_KW         reduce using rule 116 (logicOp -> OR .)
    FALSE_KW        reduce using rule 116 (logicOp -> OR .)
    THEN_KW         reduce using rule 116 (logicOp -> OR .)
    ELSE_KW         reduce using rule 116 (logicOp -> OR .)


state 49

    (114) logicOp -> TILDA .

    LOGICAL_AND     reduce using rule 114 (logicOp -> TILDA .)
    LOGICAL_OR      reduce using rule 114 (logicOp -> TILDA .)
    TILDA           reduce using rule 114 (logicOp -> TILDA .)
    AND             reduce using rule 114 (logicOp -> TILDA .)
    OR              reduce using rule 114 (logicOp -> TILDA .)
    MINUS           reduce using rule 114 (logicOp -> TILDA .)
    TIMES           reduce using rule 114 (logicOp -> TILDA .)
    QUESTION_MARK   reduce using rule 114 (logicOp -> TILDA .)
    OPENING_PARENTHESES reduce using rule 114 (logicOp -> TILDA .)
    LETTER          reduce using rule 114 (logicOp -> TILDA .)
    CONST_KW        reduce using rule 114 (logicOp -> TILDA .)
    TRUE_KW         reduce using rule 114 (logicOp -> TILDA .)
    FALSE_KW        reduce using rule 114 (logicOp -> TILDA .)
    THEN_KW         reduce using rule 114 (logicOp -> TILDA .)
    ELSE_KW         reduce using rule 114 (logicOp -> TILDA .)


state 50

    (113) logicOp -> LOGICAL_OR .

    LOGICAL_AND     reduce using rule 113 (logicOp -> LOGICAL_OR .)
    LOGICAL_OR      reduce using rule 113 (logicOp -> LOGICAL_OR .)
    TILDA           reduce using rule 113 (logicOp -> LOGICAL_OR .)
    AND             reduce using rule 113 (logicOp -> LOGICAL_OR .)
    OR              reduce using rule 113 (logicOp -> LOGICAL_OR .)
    MINUS           reduce using rule 113 (logicOp -> LOGICAL_OR .)
    TIMES           reduce using rule 113 (logicOp -> LOGICAL_OR .)
    QUESTION_MARK   reduce using rule 113 (logicOp -> LOGICAL_OR .)
    OPENING_PARENTHESES reduce using rule 113 (logicOp -> LOGICAL_OR .)
    LETTER          reduce using rule 113 (logicOp -> LOGICAL_OR .)
    CONST_KW        reduce using rule 113 (logicOp -> LOGICAL_OR .)
    TRUE_KW         reduce using rule 113 (logicOp -> LOGICAL_OR .)
    FALSE_KW        reduce using rule 113 (logicOp -> LOGICAL_OR .)
    THEN_KW         reduce using rule 113 (logicOp -> LOGICAL_OR .)
    ELSE_KW         reduce using rule 113 (logicOp -> LOGICAL_OR .)


state 51

    (110) constant -> TRUE_KW .

    PLUS            reduce using rule 110 (constant -> TRUE_KW .)
    MINUS           reduce using rule 110 (constant -> TRUE_KW .)
    TIMES           reduce using rule 110 (constant -> TRUE_KW .)
    DIVIDE          reduce using rule 110 (constant -> TRUE_KW .)
    PERCENTAGE      reduce using rule 110 (constant -> TRUE_KW .)
    LESSEQUAL       reduce using rule 110 (constant -> TRUE_KW .)
    GREATEREQUAL    reduce using rule 110 (constant -> TRUE_KW .)
    EQUALEQUAL      reduce using rule 110 (constant -> TRUE_KW .)
    LESS_THAN       reduce using rule 110 (constant -> TRUE_KW .)
    GREATER_THAN    reduce using rule 110 (constant -> TRUE_KW .)
    NOTEQUAL        reduce using rule 110 (constant -> TRUE_KW .)
    LOGICAL_AND     reduce using rule 110 (constant -> TRUE_KW .)
    LOGICAL_OR      reduce using rule 110 (constant -> TRUE_KW .)
    TILDA           reduce using rule 110 (constant -> TRUE_KW .)
    AND             reduce using rule 110 (constant -> TRUE_KW .)
    OR              reduce using rule 110 (constant -> TRUE_KW .)
    SEMICOLON       reduce using rule 110 (constant -> TRUE_KW .)
    CLOSING_BRACKET reduce using rule 110 (constant -> TRUE_KW .)
    CLOSING_PARENTHESES reduce using rule 110 (constant -> TRUE_KW .)
    COMMA           reduce using rule 110 (constant -> TRUE_KW .)


state 52

    (103) inalterable -> constant .

    PLUS            reduce using rule 103 (inalterable -> constant .)
    MINUS           reduce using rule 103 (inalterable -> constant .)
    TIMES           reduce using rule 103 (inalterable -> constant .)
    DIVIDE          reduce using rule 103 (inalterable -> constant .)
    PERCENTAGE      reduce using rule 103 (inalterable -> constant .)
    LESSEQUAL       reduce using rule 103 (inalterable -> constant .)
    GREATEREQUAL    reduce using rule 103 (inalterable -> constant .)
    EQUALEQUAL      reduce using rule 103 (inalterable -> constant .)
    LESS_THAN       reduce using rule 103 (inalterable -> constant .)
    GREATER_THAN    reduce using rule 103 (inalterable -> constant .)
    NOTEQUAL        reduce using rule 103 (inalterable -> constant .)
    LOGICAL_AND     reduce using rule 103 (inalterable -> constant .)
    LOGICAL_OR      reduce using rule 103 (inalterable -> constant .)
    TILDA           reduce using rule 103 (inalterable -> constant .)
    AND             reduce using rule 103 (inalterable -> constant .)
    OR              reduce using rule 103 (inalterable -> constant .)
    SEMICOLON       reduce using rule 103 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 103 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 103 (inalterable -> constant .)
    COMMA           reduce using rule 103 (inalterable -> constant .)


state 53

    (86) mathEXP -> unaryExpression .

    PLUS            reduce using rule 86 (mathEXP -> unaryExpression .)
    MINUS           reduce using rule 86 (mathEXP -> unaryExpression .)
    TIMES           reduce using rule 86 (mathEXP -> unaryExpression .)
    DIVIDE          reduce using rule 86 (mathEXP -> unaryExpression .)
    PERCENTAGE      reduce using rule 86 (mathEXP -> unaryExpression .)
    LESSEQUAL       reduce using rule 86 (mathEXP -> unaryExpression .)
    GREATEREQUAL    reduce using rule 86 (mathEXP -> unaryExpression .)
    EQUALEQUAL      reduce using rule 86 (mathEXP -> unaryExpression .)
    LESS_THAN       reduce using rule 86 (mathEXP -> unaryExpression .)
    GREATER_THAN    reduce using rule 86 (mathEXP -> unaryExpression .)
    NOTEQUAL        reduce using rule 86 (mathEXP -> unaryExpression .)
    LOGICAL_AND     reduce using rule 86 (mathEXP -> unaryExpression .)
    LOGICAL_OR      reduce using rule 86 (mathEXP -> unaryExpression .)
    TILDA           reduce using rule 86 (mathEXP -> unaryExpression .)
    AND             reduce using rule 86 (mathEXP -> unaryExpression .)
    OR              reduce using rule 86 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 86 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 86 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 86 (mathEXP -> unaryExpression .)
    COMMA           reduce using rule 86 (mathEXP -> unaryExpression .)


state 54

    (15) varForm -> LETTER numOrletter OPENING_BRACKET eachExpression . CLOSING_BRACKET
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

    CLOSING_BRACKET shift and go to state 76
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

    logicOp                        shift and go to state 77

state 55

    (102) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    inalterable                    shift and go to state 62
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 79
    unaryExpression                shift and go to state 53
    logicOp                        shift and go to state 65
    mathEXP                        shift and go to state 64

state 56

    (109) constant -> CONST_KW .

    PLUS            reduce using rule 109 (constant -> CONST_KW .)
    MINUS           reduce using rule 109 (constant -> CONST_KW .)
    TIMES           reduce using rule 109 (constant -> CONST_KW .)
    DIVIDE          reduce using rule 109 (constant -> CONST_KW .)
    PERCENTAGE      reduce using rule 109 (constant -> CONST_KW .)
    LESSEQUAL       reduce using rule 109 (constant -> CONST_KW .)
    GREATEREQUAL    reduce using rule 109 (constant -> CONST_KW .)
    EQUALEQUAL      reduce using rule 109 (constant -> CONST_KW .)
    LESS_THAN       reduce using rule 109 (constant -> CONST_KW .)
    GREATER_THAN    reduce using rule 109 (constant -> CONST_KW .)
    NOTEQUAL        reduce using rule 109 (constant -> CONST_KW .)
    LOGICAL_AND     reduce using rule 109 (constant -> CONST_KW .)
    LOGICAL_OR      reduce using rule 109 (constant -> CONST_KW .)
    TILDA           reduce using rule 109 (constant -> CONST_KW .)
    AND             reduce using rule 109 (constant -> CONST_KW .)
    OR              reduce using rule 109 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 109 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 109 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 109 (constant -> CONST_KW .)
    COMMA           reduce using rule 109 (constant -> CONST_KW .)


state 57

    (93) unaryExpression -> factor .

    PLUS            reduce using rule 93 (unaryExpression -> factor .)
    MINUS           reduce using rule 93 (unaryExpression -> factor .)
    TIMES           reduce using rule 93 (unaryExpression -> factor .)
    DIVIDE          reduce using rule 93 (unaryExpression -> factor .)
    PERCENTAGE      reduce using rule 93 (unaryExpression -> factor .)
    LESSEQUAL       reduce using rule 93 (unaryExpression -> factor .)
    GREATEREQUAL    reduce using rule 93 (unaryExpression -> factor .)
    EQUALEQUAL      reduce using rule 93 (unaryExpression -> factor .)
    LESS_THAN       reduce using rule 93 (unaryExpression -> factor .)
    GREATER_THAN    reduce using rule 93 (unaryExpression -> factor .)
    NOTEQUAL        reduce using rule 93 (unaryExpression -> factor .)
    LOGICAL_AND     reduce using rule 93 (unaryExpression -> factor .)
    LOGICAL_OR      reduce using rule 93 (unaryExpression -> factor .)
    TILDA           reduce using rule 93 (unaryExpression -> factor .)
    AND             reduce using rule 93 (unaryExpression -> factor .)
    OR              reduce using rule 93 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 93 (unaryExpression -> factor .)
    COMMA           reduce using rule 93 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 93 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 93 (unaryExpression -> factor .)


state 58

    (96) unaryop -> QUESTION_MARK .

    MINUS           reduce using rule 96 (unaryop -> QUESTION_MARK .)
    TIMES           reduce using rule 96 (unaryop -> QUESTION_MARK .)
    QUESTION_MARK   reduce using rule 96 (unaryop -> QUESTION_MARK .)
    OPENING_PARENTHESES reduce using rule 96 (unaryop -> QUESTION_MARK .)
    LETTER          reduce using rule 96 (unaryop -> QUESTION_MARK .)
    CONST_KW        reduce using rule 96 (unaryop -> QUESTION_MARK .)
    TRUE_KW         reduce using rule 96 (unaryop -> QUESTION_MARK .)
    FALSE_KW        reduce using rule 96 (unaryop -> QUESTION_MARK .)


state 59

    (115) logicOp -> AND .

    LOGICAL_AND     reduce using rule 115 (logicOp -> AND .)
    LOGICAL_OR      reduce using rule 115 (logicOp -> AND .)
    TILDA           reduce using rule 115 (logicOp -> AND .)
    AND             reduce using rule 115 (logicOp -> AND .)
    OR              reduce using rule 115 (logicOp -> AND .)
    MINUS           reduce using rule 115 (logicOp -> AND .)
    TIMES           reduce using rule 115 (logicOp -> AND .)
    QUESTION_MARK   reduce using rule 115 (logicOp -> AND .)
    OPENING_PARENTHESES reduce using rule 115 (logicOp -> AND .)
    LETTER          reduce using rule 115 (logicOp -> AND .)
    CONST_KW        reduce using rule 115 (logicOp -> AND .)
    TRUE_KW         reduce using rule 115 (logicOp -> AND .)
    FALSE_KW        reduce using rule 115 (logicOp -> AND .)
    THEN_KW         reduce using rule 115 (logicOp -> AND .)
    ELSE_KW         reduce using rule 115 (logicOp -> AND .)


state 60

    (73) eachExpression -> relExpression .

    CLOSING_PARENTHESES reduce using rule 73 (eachExpression -> relExpression .)
    LOGICAL_AND     reduce using rule 73 (eachExpression -> relExpression .)
    LOGICAL_OR      reduce using rule 73 (eachExpression -> relExpression .)
    TILDA           reduce using rule 73 (eachExpression -> relExpression .)
    AND             reduce using rule 73 (eachExpression -> relExpression .)
    OR              reduce using rule 73 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 73 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 73 (eachExpression -> relExpression .)
    COMMA           reduce using rule 73 (eachExpression -> relExpression .)


state 61

    (104) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (117) empty -> .

    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    OPENING_BRACKET reduce using rule 117 (empty -> .)
    DOT             reduce using rule 117 (empty -> .)
    PLUS            reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    DIVIDE          reduce using rule 117 (empty -> .)
    PERCENTAGE      reduce using rule 117 (empty -> .)
    LESSEQUAL       reduce using rule 117 (empty -> .)
    GREATEREQUAL    reduce using rule 117 (empty -> .)
    EQUALEQUAL      reduce using rule 117 (empty -> .)
    LESS_THAN       reduce using rule 117 (empty -> .)
    GREATER_THAN    reduce using rule 117 (empty -> .)
    NOTEQUAL        reduce using rule 117 (empty -> .)
    CLOSING_BRACKET reduce using rule 117 (empty -> .)
    LOGICAL_AND     reduce using rule 117 (empty -> .)
    LOGICAL_OR      reduce using rule 117 (empty -> .)
    TILDA           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    CLOSING_PARENTHESES reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)

    empty                          shift and go to state 7
    numOrletter                    shift and go to state 82

state 62

    (97) factor -> inalterable .

    PLUS            reduce using rule 97 (factor -> inalterable .)
    MINUS           reduce using rule 97 (factor -> inalterable .)
    TIMES           reduce using rule 97 (factor -> inalterable .)
    DIVIDE          reduce using rule 97 (factor -> inalterable .)
    PERCENTAGE      reduce using rule 97 (factor -> inalterable .)
    LESSEQUAL       reduce using rule 97 (factor -> inalterable .)
    GREATEREQUAL    reduce using rule 97 (factor -> inalterable .)
    EQUALEQUAL      reduce using rule 97 (factor -> inalterable .)
    LESS_THAN       reduce using rule 97 (factor -> inalterable .)
    GREATER_THAN    reduce using rule 97 (factor -> inalterable .)
    NOTEQUAL        reduce using rule 97 (factor -> inalterable .)
    LOGICAL_AND     reduce using rule 97 (factor -> inalterable .)
    LOGICAL_OR      reduce using rule 97 (factor -> inalterable .)
    TILDA           reduce using rule 97 (factor -> inalterable .)
    AND             reduce using rule 97 (factor -> inalterable .)
    OR              reduce using rule 97 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 97 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 97 (factor -> inalterable .)
    SEMICOLON       reduce using rule 97 (factor -> inalterable .)
    COMMA           reduce using rule 97 (factor -> inalterable .)


state 63

    (95) unaryop -> TIMES .

    MINUS           reduce using rule 95 (unaryop -> TIMES .)
    TIMES           reduce using rule 95 (unaryop -> TIMES .)
    QUESTION_MARK   reduce using rule 95 (unaryop -> TIMES .)
    OPENING_PARENTHESES reduce using rule 95 (unaryop -> TIMES .)
    LETTER          reduce using rule 95 (unaryop -> TIMES .)
    CONST_KW        reduce using rule 95 (unaryop -> TIMES .)
    TRUE_KW         reduce using rule 95 (unaryop -> TIMES .)
    FALSE_KW        reduce using rule 95 (unaryop -> TIMES .)


state 64

    (75) relExpression -> mathEXP . compareType mathEXP
    (76) relExpression -> mathEXP .
    (85) mathEXP -> mathEXP . op mathEXP
    (77) compareType -> . equal
    (78) compareType -> . nonEqual
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . PERCENTAGE
    (79) equal -> . LESSEQUAL
    (80) equal -> . GREATEREQUAL
    (81) equal -> . EQUALEQUAL
    (82) nonEqual -> . LESS_THAN
    (83) nonEqual -> . GREATER_THAN
    (84) nonEqual -> . NOTEQUAL

    LOGICAL_AND     reduce using rule 76 (relExpression -> mathEXP .)
    LOGICAL_OR      reduce using rule 76 (relExpression -> mathEXP .)
    TILDA           reduce using rule 76 (relExpression -> mathEXP .)
    AND             reduce using rule 76 (relExpression -> mathEXP .)
    OR              reduce using rule 76 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 76 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 76 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 76 (relExpression -> mathEXP .)
    COMMA           reduce using rule 76 (relExpression -> mathEXP .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 87
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 90
    PERCENTAGE      shift and go to state 86
    LESSEQUAL       shift and go to state 94
    GREATEREQUAL    shift and go to state 97
    EQUALEQUAL      shift and go to state 85
    LESS_THAN       shift and go to state 83
    GREATER_THAN    shift and go to state 88
    NOTEQUAL        shift and go to state 89

    equal                          shift and go to state 91
    compareType                    shift and go to state 92
    nonEqual                       shift and go to state 95
    op                             shift and go to state 84

state 65

    (72) eachExpression -> logicOp . eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 98
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 66

    (14) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

    CLOSING_PARENTHESES shift and go to state 99
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

    logicOp                        shift and go to state 77

state 67

    (15) varForm -> LETTER numOrletter . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER numOrletter .

    OPENING_BRACKET shift and go to state 33
    DOUBLE_DOT      reduce using rule 16 (varForm -> LETTER numOrletter .)
    COMMA           reduce using rule 16 (varForm -> LETTER numOrletter .)
    VOID_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    NUMBER          reduce using rule 16 (varForm -> LETTER numOrletter .)
    LETTER          reduce using rule 16 (varForm -> LETTER numOrletter .)
    BOOLEAN_KW      reduce using rule 16 (varForm -> LETTER numOrletter .)
    CHARACTER_KW    reduce using rule 16 (varForm -> LETTER numOrletter .)
    INTEGER_KW      reduce using rule 16 (varForm -> LETTER numOrletter .)
    CHAR_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    BOOL_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    INT_KW          reduce using rule 16 (varForm -> LETTER numOrletter .)
    OPENING_PARENTHESES reduce using rule 16 (varForm -> LETTER numOrletter .)
    $end            reduce using rule 16 (varForm -> LETTER numOrletter .)
    STATIC_KW       reduce using rule 16 (varForm -> LETTER numOrletter .)
    CLOSING_BRACE   reduce using rule 16 (varForm -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 16 (varForm -> LETTER numOrletter .)
    OPENING_BRACE   reduce using rule 16 (varForm -> LETTER numOrletter .)
    IF_KW           reduce using rule 16 (varForm -> LETTER numOrletter .)
    TILL_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    COMEBACK_KW     reduce using rule 16 (varForm -> LETTER numOrletter .)
    GIVEBACK_KW     reduce using rule 16 (varForm -> LETTER numOrletter .)
    CONTINUE_KW     reduce using rule 16 (varForm -> LETTER numOrletter .)
    LOGICAL_AND     reduce using rule 16 (varForm -> LETTER numOrletter .)
    LOGICAL_OR      reduce using rule 16 (varForm -> LETTER numOrletter .)
    TILDA           reduce using rule 16 (varForm -> LETTER numOrletter .)
    AND             reduce using rule 16 (varForm -> LETTER numOrletter .)
    OR              reduce using rule 16 (varForm -> LETTER numOrletter .)
    MINUS           reduce using rule 16 (varForm -> LETTER numOrletter .)
    TIMES           reduce using rule 16 (varForm -> LETTER numOrletter .)
    QUESTION_MARK   reduce using rule 16 (varForm -> LETTER numOrletter .)
    CONST_KW        reduce using rule 16 (varForm -> LETTER numOrletter .)
    TRUE_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    FALSE_KW        reduce using rule 16 (varForm -> LETTER numOrletter .)


state 68

    (30) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 69

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 102
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    unaryExpression                shift and go to state 53
    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    factor                         shift and go to state 57
    mathEXP                        shift and go to state 64
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 110
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    inalterable                    shift and go to state 62
    iterationPhrase                shift and go to state 108
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 70

    (37) paramId -> LETTER numOrletter .
    (38) paramId -> LETTER numOrletter . OPENING_BRACKET CLOSING_BRACKET

    COMMA           reduce using rule 37 (paramId -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 37 (paramId -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> LETTER numOrletter .)
    OPENING_BRACKET shift and go to state 115


state 71

    (33) paramList -> paramList COMMA . paramId
    (37) paramId -> . LETTER numOrletter
    (38) paramId -> . LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 39

    paramId                        shift and go to state 116

state 72

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 102
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    unaryExpression                shift and go to state 53
    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    factor                         shift and go to state 57
    mathEXP                        shift and go to state 64
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 117
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    inalterable                    shift and go to state 62
    iterationPhrase                shift and go to state 108
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 73

    (101) alterable -> alterable DOT . LETTER

    LETTER          shift and go to state 118


state 74

    (100) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    inalterable                    shift and go to state 62
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 119
    unaryExpression                shift and go to state 53
    logicOp                        shift and go to state 65
    mathEXP                        shift and go to state 64

state 75

    (92) unaryExpression -> unaryop unaryExpression .

    PLUS            reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    MINUS           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    TIMES           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    DIVIDE          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    PERCENTAGE      reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    LESSEQUAL       reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    GREATEREQUAL    reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    EQUALEQUAL      reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    LESS_THAN       reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    GREATER_THAN    reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    NOTEQUAL        reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_AND     reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_OR      reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    TILDA           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    AND             reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    OR              reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    COMMA           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)


state 76

    (15) varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .

    DOUBLE_DOT      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    VOID_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    NUMBER          reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    LETTER          reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOLEAN_KW      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHARACTER_KW    reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INTEGER_KW      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHAR_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOL_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INT_KW          reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_PARENTHESES reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    $end            reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    STATIC_KW       reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CLOSING_BRACE   reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_BRACE   reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    IF_KW           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILL_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMEBACK_KW     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    GIVEBACK_KW     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONTINUE_KW     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    LOGICAL_AND     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    LOGICAL_OR      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    AND             reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OR              reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    QUESTION_MARK   reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONST_KW        reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TRUE_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    FALSE_KW        reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)


state 77

    (70) eachExpression -> eachExpression logicOp . eachExpression
    (71) eachExpression -> eachExpression logicOp . THEN_KW
    (74) eachExpression -> eachExpression logicOp . ELSE_KW eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    THEN_KW         shift and go to state 120
    ELSE_KW         shift and go to state 121
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 122
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 78

    (60) allExpression -> alterable . mathOp allExpression
    (61) allExpression -> alterable . PLUSPLUS
    (62) allExpression -> alterable . MINUSMINUS
    (64) allExpression -> alterable . mathOp alterable
    (100) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> alterable . DOT LETTER
    (98) factor -> alterable .
    (65) mathOp -> . EQUAL
    (66) mathOp -> . PLUSEQUAL
    (67) mathOp -> . MINUSEQUAL
    (68) mathOp -> . TIMESEQUAL
    (69) mathOp -> . DIVIDEEQUAL

    PLUSPLUS        shift and go to state 124
    MINUSMINUS      shift and go to state 130
    OPENING_BRACKET shift and go to state 74
    DOT             shift and go to state 73
    PLUS            reduce using rule 98 (factor -> alterable .)
    MINUS           reduce using rule 98 (factor -> alterable .)
    TIMES           reduce using rule 98 (factor -> alterable .)
    DIVIDE          reduce using rule 98 (factor -> alterable .)
    PERCENTAGE      reduce using rule 98 (factor -> alterable .)
    LESSEQUAL       reduce using rule 98 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 98 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 98 (factor -> alterable .)
    LESS_THAN       reduce using rule 98 (factor -> alterable .)
    GREATER_THAN    reduce using rule 98 (factor -> alterable .)
    NOTEQUAL        reduce using rule 98 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 98 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 98 (factor -> alterable .)
    TILDA           reduce using rule 98 (factor -> alterable .)
    AND             reduce using rule 98 (factor -> alterable .)
    OR              reduce using rule 98 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 98 (factor -> alterable .)
    COMMA           reduce using rule 98 (factor -> alterable .)
    SEMICOLON       reduce using rule 98 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 98 (factor -> alterable .)
    EQUAL           shift and go to state 127
    PLUSEQUAL       shift and go to state 123
    MINUSEQUAL      shift and go to state 126
    TIMESEQUAL      shift and go to state 125
    DIVIDEEQUAL     shift and go to state 129

    mathOp                         shift and go to state 128

state 79

    (102) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 131


state 80

    (63) allExpression -> eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

    COMMA           reduce using rule 63 (allExpression -> eachExpression .)
    CLOSING_PARENTHESES reduce using rule 63 (allExpression -> eachExpression .)
    SEMICOLON       reduce using rule 63 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 63 (allExpression -> eachExpression .)
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

    logicOp                        shift and go to state 77

state 81

    (99) alterable -> LETTER . numOrletter
    (104) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (117) empty -> .

    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    PLUSPLUS        reduce using rule 117 (empty -> .)
    MINUSMINUS      reduce using rule 117 (empty -> .)
    OPENING_BRACKET reduce using rule 117 (empty -> .)
    DOT             reduce using rule 117 (empty -> .)
    EQUAL           reduce using rule 117 (empty -> .)
    PLUSEQUAL       reduce using rule 117 (empty -> .)
    MINUSEQUAL      reduce using rule 117 (empty -> .)
    TIMESEQUAL      reduce using rule 117 (empty -> .)
    DIVIDEEQUAL     reduce using rule 117 (empty -> .)
    PLUS            reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    DIVIDE          reduce using rule 117 (empty -> .)
    PERCENTAGE      reduce using rule 117 (empty -> .)
    LESSEQUAL       reduce using rule 117 (empty -> .)
    GREATEREQUAL    reduce using rule 117 (empty -> .)
    EQUALEQUAL      reduce using rule 117 (empty -> .)
    LESS_THAN       reduce using rule 117 (empty -> .)
    GREATER_THAN    reduce using rule 117 (empty -> .)
    NOTEQUAL        reduce using rule 117 (empty -> .)
    LOGICAL_AND     reduce using rule 117 (empty -> .)
    LOGICAL_OR      reduce using rule 117 (empty -> .)
    TILDA           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    CLOSING_PARENTHESES reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    CLOSING_BRACKET reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)

    empty                          shift and go to state 7
    numOrletter                    shift and go to state 132

state 82

    (104) inalterable -> LETTER numOrletter . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> LETTER numOrletter .

    OPENING_PARENTHESES shift and go to state 133
    OPENING_BRACKET reduce using rule 99 (alterable -> LETTER numOrletter .)
    DOT             reduce using rule 99 (alterable -> LETTER numOrletter .)
    PLUS            reduce using rule 99 (alterable -> LETTER numOrletter .)
    MINUS           reduce using rule 99 (alterable -> LETTER numOrletter .)
    TIMES           reduce using rule 99 (alterable -> LETTER numOrletter .)
    DIVIDE          reduce using rule 99 (alterable -> LETTER numOrletter .)
    PERCENTAGE      reduce using rule 99 (alterable -> LETTER numOrletter .)
    LESSEQUAL       reduce using rule 99 (alterable -> LETTER numOrletter .)
    GREATEREQUAL    reduce using rule 99 (alterable -> LETTER numOrletter .)
    EQUALEQUAL      reduce using rule 99 (alterable -> LETTER numOrletter .)
    LESS_THAN       reduce using rule 99 (alterable -> LETTER numOrletter .)
    GREATER_THAN    reduce using rule 99 (alterable -> LETTER numOrletter .)
    NOTEQUAL        reduce using rule 99 (alterable -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 99 (alterable -> LETTER numOrletter .)
    LOGICAL_AND     reduce using rule 99 (alterable -> LETTER numOrletter .)
    LOGICAL_OR      reduce using rule 99 (alterable -> LETTER numOrletter .)
    TILDA           reduce using rule 99 (alterable -> LETTER numOrletter .)
    AND             reduce using rule 99 (alterable -> LETTER numOrletter .)
    OR              reduce using rule 99 (alterable -> LETTER numOrletter .)
    CLOSING_BRACKET reduce using rule 99 (alterable -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 99 (alterable -> LETTER numOrletter .)
    COMMA           reduce using rule 99 (alterable -> LETTER numOrletter .)


state 83

    (82) nonEqual -> LESS_THAN .

    MINUS           reduce using rule 82 (nonEqual -> LESS_THAN .)
    TIMES           reduce using rule 82 (nonEqual -> LESS_THAN .)
    QUESTION_MARK   reduce using rule 82 (nonEqual -> LESS_THAN .)
    OPENING_PARENTHESES reduce using rule 82 (nonEqual -> LESS_THAN .)
    LETTER          reduce using rule 82 (nonEqual -> LESS_THAN .)
    CONST_KW        reduce using rule 82 (nonEqual -> LESS_THAN .)
    TRUE_KW         reduce using rule 82 (nonEqual -> LESS_THAN .)
    FALSE_KW        reduce using rule 82 (nonEqual -> LESS_THAN .)


state 84

    (85) mathEXP -> mathEXP op . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    inalterable                    shift and go to state 62
    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    mathEXP                        shift and go to state 134
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    unaryExpression                shift and go to state 53

state 85

    (81) equal -> EQUALEQUAL .

    MINUS           reduce using rule 81 (equal -> EQUALEQUAL .)
    TIMES           reduce using rule 81 (equal -> EQUALEQUAL .)
    QUESTION_MARK   reduce using rule 81 (equal -> EQUALEQUAL .)
    OPENING_PARENTHESES reduce using rule 81 (equal -> EQUALEQUAL .)
    LETTER          reduce using rule 81 (equal -> EQUALEQUAL .)
    CONST_KW        reduce using rule 81 (equal -> EQUALEQUAL .)
    TRUE_KW         reduce using rule 81 (equal -> EQUALEQUAL .)
    FALSE_KW        reduce using rule 81 (equal -> EQUALEQUAL .)


state 86

    (91) op -> PERCENTAGE .

    MINUS           reduce using rule 91 (op -> PERCENTAGE .)
    TIMES           reduce using rule 91 (op -> PERCENTAGE .)
    QUESTION_MARK   reduce using rule 91 (op -> PERCENTAGE .)
    OPENING_PARENTHESES reduce using rule 91 (op -> PERCENTAGE .)
    LETTER          reduce using rule 91 (op -> PERCENTAGE .)
    CONST_KW        reduce using rule 91 (op -> PERCENTAGE .)
    TRUE_KW         reduce using rule 91 (op -> PERCENTAGE .)
    FALSE_KW        reduce using rule 91 (op -> PERCENTAGE .)


state 87

    (88) op -> MINUS .

    MINUS           reduce using rule 88 (op -> MINUS .)
    TIMES           reduce using rule 88 (op -> MINUS .)
    QUESTION_MARK   reduce using rule 88 (op -> MINUS .)
    OPENING_PARENTHESES reduce using rule 88 (op -> MINUS .)
    LETTER          reduce using rule 88 (op -> MINUS .)
    CONST_KW        reduce using rule 88 (op -> MINUS .)
    TRUE_KW         reduce using rule 88 (op -> MINUS .)
    FALSE_KW        reduce using rule 88 (op -> MINUS .)


state 88

    (83) nonEqual -> GREATER_THAN .

    MINUS           reduce using rule 83 (nonEqual -> GREATER_THAN .)
    TIMES           reduce using rule 83 (nonEqual -> GREATER_THAN .)
    QUESTION_MARK   reduce using rule 83 (nonEqual -> GREATER_THAN .)
    OPENING_PARENTHESES reduce using rule 83 (nonEqual -> GREATER_THAN .)
    LETTER          reduce using rule 83 (nonEqual -> GREATER_THAN .)
    CONST_KW        reduce using rule 83 (nonEqual -> GREATER_THAN .)
    TRUE_KW         reduce using rule 83 (nonEqual -> GREATER_THAN .)
    FALSE_KW        reduce using rule 83 (nonEqual -> GREATER_THAN .)


state 89

    (84) nonEqual -> NOTEQUAL .

    MINUS           reduce using rule 84 (nonEqual -> NOTEQUAL .)
    TIMES           reduce using rule 84 (nonEqual -> NOTEQUAL .)
    QUESTION_MARK   reduce using rule 84 (nonEqual -> NOTEQUAL .)
    OPENING_PARENTHESES reduce using rule 84 (nonEqual -> NOTEQUAL .)
    LETTER          reduce using rule 84 (nonEqual -> NOTEQUAL .)
    CONST_KW        reduce using rule 84 (nonEqual -> NOTEQUAL .)
    TRUE_KW         reduce using rule 84 (nonEqual -> NOTEQUAL .)
    FALSE_KW        reduce using rule 84 (nonEqual -> NOTEQUAL .)


state 90

    (90) op -> DIVIDE .

    MINUS           reduce using rule 90 (op -> DIVIDE .)
    TIMES           reduce using rule 90 (op -> DIVIDE .)
    QUESTION_MARK   reduce using rule 90 (op -> DIVIDE .)
    OPENING_PARENTHESES reduce using rule 90 (op -> DIVIDE .)
    LETTER          reduce using rule 90 (op -> DIVIDE .)
    CONST_KW        reduce using rule 90 (op -> DIVIDE .)
    TRUE_KW         reduce using rule 90 (op -> DIVIDE .)
    FALSE_KW        reduce using rule 90 (op -> DIVIDE .)


state 91

    (77) compareType -> equal .

    MINUS           reduce using rule 77 (compareType -> equal .)
    TIMES           reduce using rule 77 (compareType -> equal .)
    QUESTION_MARK   reduce using rule 77 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 77 (compareType -> equal .)
    LETTER          reduce using rule 77 (compareType -> equal .)
    CONST_KW        reduce using rule 77 (compareType -> equal .)
    TRUE_KW         reduce using rule 77 (compareType -> equal .)
    FALSE_KW        reduce using rule 77 (compareType -> equal .)


state 92

    (75) relExpression -> mathEXP compareType . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    inalterable                    shift and go to state 62
    unaryExpression                shift and go to state 53
    mathEXP                        shift and go to state 135

state 93

    (87) op -> PLUS .

    MINUS           reduce using rule 87 (op -> PLUS .)
    TIMES           reduce using rule 87 (op -> PLUS .)
    QUESTION_MARK   reduce using rule 87 (op -> PLUS .)
    OPENING_PARENTHESES reduce using rule 87 (op -> PLUS .)
    LETTER          reduce using rule 87 (op -> PLUS .)
    CONST_KW        reduce using rule 87 (op -> PLUS .)
    TRUE_KW         reduce using rule 87 (op -> PLUS .)
    FALSE_KW        reduce using rule 87 (op -> PLUS .)


state 94

    (79) equal -> LESSEQUAL .

    MINUS           reduce using rule 79 (equal -> LESSEQUAL .)
    TIMES           reduce using rule 79 (equal -> LESSEQUAL .)
    QUESTION_MARK   reduce using rule 79 (equal -> LESSEQUAL .)
    OPENING_PARENTHESES reduce using rule 79 (equal -> LESSEQUAL .)
    LETTER          reduce using rule 79 (equal -> LESSEQUAL .)
    CONST_KW        reduce using rule 79 (equal -> LESSEQUAL .)
    TRUE_KW         reduce using rule 79 (equal -> LESSEQUAL .)
    FALSE_KW        reduce using rule 79 (equal -> LESSEQUAL .)


state 95

    (78) compareType -> nonEqual .

    MINUS           reduce using rule 78 (compareType -> nonEqual .)
    TIMES           reduce using rule 78 (compareType -> nonEqual .)
    QUESTION_MARK   reduce using rule 78 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 78 (compareType -> nonEqual .)
    LETTER          reduce using rule 78 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 78 (compareType -> nonEqual .)
    TRUE_KW         reduce using rule 78 (compareType -> nonEqual .)
    FALSE_KW        reduce using rule 78 (compareType -> nonEqual .)


state 96

    (89) op -> TIMES .

    MINUS           reduce using rule 89 (op -> TIMES .)
    TIMES           reduce using rule 89 (op -> TIMES .)
    QUESTION_MARK   reduce using rule 89 (op -> TIMES .)
    OPENING_PARENTHESES reduce using rule 89 (op -> TIMES .)
    LETTER          reduce using rule 89 (op -> TIMES .)
    CONST_KW        reduce using rule 89 (op -> TIMES .)
    TRUE_KW         reduce using rule 89 (op -> TIMES .)
    FALSE_KW        reduce using rule 89 (op -> TIMES .)


state 97

    (80) equal -> GREATEREQUAL .

    MINUS           reduce using rule 80 (equal -> GREATEREQUAL .)
    TIMES           reduce using rule 80 (equal -> GREATEREQUAL .)
    QUESTION_MARK   reduce using rule 80 (equal -> GREATEREQUAL .)
    OPENING_PARENTHESES reduce using rule 80 (equal -> GREATEREQUAL .)
    LETTER          reduce using rule 80 (equal -> GREATEREQUAL .)
    CONST_KW        reduce using rule 80 (equal -> GREATEREQUAL .)
    TRUE_KW         reduce using rule 80 (equal -> GREATEREQUAL .)
    FALSE_KW        reduce using rule 80 (equal -> GREATEREQUAL .)


state 98

    (72) eachExpression -> logicOp eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_PARENTHESES reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    SEMICOLON       reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    COMMA           reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

  ! LOGICAL_AND     [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! TILDA           [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! AND             [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! OR              [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]

    logicOp                        shift and go to state 77

state 99

    (14) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    COMMA           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    VOID_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    NUMBER          reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    LETTER          reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOLEAN_KW      reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHARACTER_KW    reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INTEGER_KW      reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHAR_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOL_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INT_KW          reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_PARENTHESES reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    $end            reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    STATIC_KW       reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CLOSING_BRACE   reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_BRACE   reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    IF_KW           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILL_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMEBACK_KW     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    GIVEBACK_KW     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONTINUE_KW     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    AND             reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OR              reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    QUESTION_MARK   reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONST_KW        reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TRUE_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    FALSE_KW        reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 100

    (59) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 136


state 101

    (40) statement -> compoundPhrase .

    CLOSING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    VOID_KW         reduce using rule 40 (statement -> compoundPhrase .)
    NUMBER          reduce using rule 40 (statement -> compoundPhrase .)
    LETTER          reduce using rule 40 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 40 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 40 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 40 (statement -> compoundPhrase .)
    $end            reduce using rule 40 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    IF_KW           reduce using rule 40 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 40 (statement -> compoundPhrase .)
    LOGICAL_AND     reduce using rule 40 (statement -> compoundPhrase .)
    LOGICAL_OR      reduce using rule 40 (statement -> compoundPhrase .)
    TILDA           reduce using rule 40 (statement -> compoundPhrase .)
    AND             reduce using rule 40 (statement -> compoundPhrase .)
    OR              reduce using rule 40 (statement -> compoundPhrase .)
    MINUS           reduce using rule 40 (statement -> compoundPhrase .)
    TIMES           reduce using rule 40 (statement -> compoundPhrase .)
    QUESTION_MARK   reduce using rule 40 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 40 (statement -> compoundPhrase .)
    TRUE_KW         reduce using rule 40 (statement -> compoundPhrase .)
    FALSE_KW        reduce using rule 40 (statement -> compoundPhrase .)
    OTHER_KW        reduce using rule 40 (statement -> compoundPhrase .)


state 102

    (49) phrase -> SEMICOLON .

    CLOSING_BRACE   reduce using rule 49 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 49 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 49 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 49 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 49 (phrase -> SEMICOLON .)
    LOGICAL_AND     reduce using rule 49 (phrase -> SEMICOLON .)
    LOGICAL_OR      reduce using rule 49 (phrase -> SEMICOLON .)
    TILDA           reduce using rule 49 (phrase -> SEMICOLON .)
    AND             reduce using rule 49 (phrase -> SEMICOLON .)
    OR              reduce using rule 49 (phrase -> SEMICOLON .)
    MINUS           reduce using rule 49 (phrase -> SEMICOLON .)
    TIMES           reduce using rule 49 (phrase -> SEMICOLON .)
    QUESTION_MARK   reduce using rule 49 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 49 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 49 (phrase -> SEMICOLON .)
    TRUE_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    FALSE_KW        reduce using rule 49 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    NUMBER          reduce using rule 49 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 49 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 49 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 49 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 49 (phrase -> SEMICOLON .)
    $end            reduce using rule 49 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 49 (phrase -> SEMICOLON .)


state 103

    (44) statement -> continue .

    CLOSING_BRACE   reduce using rule 44 (statement -> continue .)
    VOID_KW         reduce using rule 44 (statement -> continue .)
    NUMBER          reduce using rule 44 (statement -> continue .)
    LETTER          reduce using rule 44 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 44 (statement -> continue .)
    CHARACTER_KW    reduce using rule 44 (statement -> continue .)
    INTEGER_KW      reduce using rule 44 (statement -> continue .)
    CHAR_KW         reduce using rule 44 (statement -> continue .)
    BOOL_KW         reduce using rule 44 (statement -> continue .)
    INT_KW          reduce using rule 44 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 44 (statement -> continue .)
    $end            reduce using rule 44 (statement -> continue .)
    SEMICOLON       reduce using rule 44 (statement -> continue .)
    OPENING_BRACE   reduce using rule 44 (statement -> continue .)
    IF_KW           reduce using rule 44 (statement -> continue .)
    TILL_KW         reduce using rule 44 (statement -> continue .)
    COMEBACK_KW     reduce using rule 44 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 44 (statement -> continue .)
    CONTINUE_KW     reduce using rule 44 (statement -> continue .)
    LOGICAL_AND     reduce using rule 44 (statement -> continue .)
    LOGICAL_OR      reduce using rule 44 (statement -> continue .)
    TILDA           reduce using rule 44 (statement -> continue .)
    AND             reduce using rule 44 (statement -> continue .)
    OR              reduce using rule 44 (statement -> continue .)
    MINUS           reduce using rule 44 (statement -> continue .)
    TIMES           reduce using rule 44 (statement -> continue .)
    QUESTION_MARK   reduce using rule 44 (statement -> continue .)
    CONST_KW        reduce using rule 44 (statement -> continue .)
    TRUE_KW         reduce using rule 44 (statement -> continue .)
    FALSE_KW        reduce using rule 44 (statement -> continue .)
    OTHER_KW        reduce using rule 44 (statement -> continue .)


state 104

    (41) statement -> selectPhrase .

    CLOSING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    VOID_KW         reduce using rule 41 (statement -> selectPhrase .)
    NUMBER          reduce using rule 41 (statement -> selectPhrase .)
    LETTER          reduce using rule 41 (statement -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHARACTER_KW    reduce using rule 41 (statement -> selectPhrase .)
    INTEGER_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHAR_KW         reduce using rule 41 (statement -> selectPhrase .)
    BOOL_KW         reduce using rule 41 (statement -> selectPhrase .)
    INT_KW          reduce using rule 41 (statement -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 41 (statement -> selectPhrase .)
    $end            reduce using rule 41 (statement -> selectPhrase .)
    SEMICOLON       reduce using rule 41 (statement -> selectPhrase .)
    OPENING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    IF_KW           reduce using rule 41 (statement -> selectPhrase .)
    TILL_KW         reduce using rule 41 (statement -> selectPhrase .)
    COMEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    CONTINUE_KW     reduce using rule 41 (statement -> selectPhrase .)
    LOGICAL_AND     reduce using rule 41 (statement -> selectPhrase .)
    LOGICAL_OR      reduce using rule 41 (statement -> selectPhrase .)
    TILDA           reduce using rule 41 (statement -> selectPhrase .)
    AND             reduce using rule 41 (statement -> selectPhrase .)
    OR              reduce using rule 41 (statement -> selectPhrase .)
    MINUS           reduce using rule 41 (statement -> selectPhrase .)
    TIMES           reduce using rule 41 (statement -> selectPhrase .)
    QUESTION_MARK   reduce using rule 41 (statement -> selectPhrase .)
    CONST_KW        reduce using rule 41 (statement -> selectPhrase .)
    TRUE_KW         reduce using rule 41 (statement -> selectPhrase .)
    FALSE_KW        reduce using rule 41 (statement -> selectPhrase .)
    OTHER_KW        reduce using rule 41 (statement -> selectPhrase .)


state 105

    (55) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 137


state 106

    (39) statement -> phrase .

    CLOSING_BRACE   reduce using rule 39 (statement -> phrase .)
    VOID_KW         reduce using rule 39 (statement -> phrase .)
    NUMBER          reduce using rule 39 (statement -> phrase .)
    LETTER          reduce using rule 39 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 39 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 39 (statement -> phrase .)
    INTEGER_KW      reduce using rule 39 (statement -> phrase .)
    CHAR_KW         reduce using rule 39 (statement -> phrase .)
    BOOL_KW         reduce using rule 39 (statement -> phrase .)
    INT_KW          reduce using rule 39 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 39 (statement -> phrase .)
    $end            reduce using rule 39 (statement -> phrase .)
    SEMICOLON       reduce using rule 39 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 39 (statement -> phrase .)
    IF_KW           reduce using rule 39 (statement -> phrase .)
    TILL_KW         reduce using rule 39 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 39 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 39 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 39 (statement -> phrase .)
    LOGICAL_AND     reduce using rule 39 (statement -> phrase .)
    LOGICAL_OR      reduce using rule 39 (statement -> phrase .)
    TILDA           reduce using rule 39 (statement -> phrase .)
    AND             reduce using rule 39 (statement -> phrase .)
    OR              reduce using rule 39 (statement -> phrase .)
    MINUS           reduce using rule 39 (statement -> phrase .)
    TIMES           reduce using rule 39 (statement -> phrase .)
    QUESTION_MARK   reduce using rule 39 (statement -> phrase .)
    CONST_KW        reduce using rule 39 (statement -> phrase .)
    TRUE_KW         reduce using rule 39 (statement -> phrase .)
    FALSE_KW        reduce using rule 39 (statement -> phrase .)
    OTHER_KW        reduce using rule 39 (statement -> phrase .)


state 107

    (57) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (58) returnPhrase -> GIVEBACK_KW . numOrletter SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (117) empty -> .
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    NUMBER          shift and go to state 11
    LETTER          shift and go to state 140
    SEMICOLON       reduce using rule 117 (empty -> .)
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    unaryExpression                shift and go to state 53
    inalterable                    shift and go to state 62
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    numOrletter                    shift and go to state 139
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 138
    empty                          shift and go to state 7
    logicOp                        shift and go to state 65
    mathEXP                        shift and go to state 64

state 108

    (42) statement -> iterationPhrase .

    CLOSING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    VOID_KW         reduce using rule 42 (statement -> iterationPhrase .)
    NUMBER          reduce using rule 42 (statement -> iterationPhrase .)
    LETTER          reduce using rule 42 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 42 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 42 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 42 (statement -> iterationPhrase .)
    $end            reduce using rule 42 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    IF_KW           reduce using rule 42 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 42 (statement -> iterationPhrase .)
    LOGICAL_AND     reduce using rule 42 (statement -> iterationPhrase .)
    LOGICAL_OR      reduce using rule 42 (statement -> iterationPhrase .)
    TILDA           reduce using rule 42 (statement -> iterationPhrase .)
    AND             reduce using rule 42 (statement -> iterationPhrase .)
    OR              reduce using rule 42 (statement -> iterationPhrase .)
    MINUS           reduce using rule 42 (statement -> iterationPhrase .)
    TIMES           reduce using rule 42 (statement -> iterationPhrase .)
    QUESTION_MARK   reduce using rule 42 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 42 (statement -> iterationPhrase .)
    TRUE_KW         reduce using rule 42 (statement -> iterationPhrase .)
    FALSE_KW        reduce using rule 42 (statement -> iterationPhrase .)
    OTHER_KW        reduce using rule 42 (statement -> iterationPhrase .)


state 109

    (45) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> . empty
    (117) empty -> .

    STATIC_KW       reduce using rule 117 (empty -> .)
    BOOLEAN_KW      reduce using rule 117 (empty -> .)
    CHARACTER_KW    reduce using rule 117 (empty -> .)
    INTEGER_KW      reduce using rule 117 (empty -> .)
    CHAR_KW         reduce using rule 117 (empty -> .)
    BOOL_KW         reduce using rule 117 (empty -> .)
    INT_KW          reduce using rule 117 (empty -> .)
    CLOSING_BRACE   reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    OPENING_BRACE   reduce using rule 117 (empty -> .)
    IF_KW           reduce using rule 117 (empty -> .)
    TILL_KW         reduce using rule 117 (empty -> .)
    COMEBACK_KW     reduce using rule 117 (empty -> .)
    GIVEBACK_KW     reduce using rule 117 (empty -> .)
    CONTINUE_KW     reduce using rule 117 (empty -> .)
    LETTER          reduce using rule 117 (empty -> .)
    LOGICAL_AND     reduce using rule 117 (empty -> .)
    LOGICAL_OR      reduce using rule 117 (empty -> .)
    TILDA           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    QUESTION_MARK   reduce using rule 117 (empty -> .)
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    CONST_KW        reduce using rule 117 (empty -> .)
    TRUE_KW         reduce using rule 117 (empty -> .)
    FALSE_KW        reduce using rule 117 (empty -> .)

    empty                          shift and go to state 141
    localDeclarations              shift and go to state 142

state 110

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 143


state 111

    (48) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 144


state 112

    (50) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 145


state 113

    (56) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 146


state 114

    (43) statement -> returnPhrase .

    CLOSING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    VOID_KW         reduce using rule 43 (statement -> returnPhrase .)
    NUMBER          reduce using rule 43 (statement -> returnPhrase .)
    LETTER          reduce using rule 43 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 43 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 43 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 43 (statement -> returnPhrase .)
    INT_KW          reduce using rule 43 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 43 (statement -> returnPhrase .)
    $end            reduce using rule 43 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 43 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    IF_KW           reduce using rule 43 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 43 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 43 (statement -> returnPhrase .)
    LOGICAL_AND     reduce using rule 43 (statement -> returnPhrase .)
    LOGICAL_OR      reduce using rule 43 (statement -> returnPhrase .)
    TILDA           reduce using rule 43 (statement -> returnPhrase .)
    AND             reduce using rule 43 (statement -> returnPhrase .)
    OR              reduce using rule 43 (statement -> returnPhrase .)
    MINUS           reduce using rule 43 (statement -> returnPhrase .)
    TIMES           reduce using rule 43 (statement -> returnPhrase .)
    QUESTION_MARK   reduce using rule 43 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 43 (statement -> returnPhrase .)
    TRUE_KW         reduce using rule 43 (statement -> returnPhrase .)
    FALSE_KW        reduce using rule 43 (statement -> returnPhrase .)
    OTHER_KW        reduce using rule 43 (statement -> returnPhrase .)


state 115

    (38) paramId -> LETTER numOrletter OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 147


state 116

    (33) paramList -> paramList COMMA paramId .

    COMMA           reduce using rule 33 (paramList -> paramList COMMA paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramList COMMA paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramList COMMA paramId .)


state 117

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 118

    (101) alterable -> alterable DOT LETTER .

    PLUSPLUS        reduce using rule 101 (alterable -> alterable DOT LETTER .)
    MINUSMINUS      reduce using rule 101 (alterable -> alterable DOT LETTER .)
    OPENING_BRACKET reduce using rule 101 (alterable -> alterable DOT LETTER .)
    DOT             reduce using rule 101 (alterable -> alterable DOT LETTER .)
    EQUAL           reduce using rule 101 (alterable -> alterable DOT LETTER .)
    PLUSEQUAL       reduce using rule 101 (alterable -> alterable DOT LETTER .)
    MINUSEQUAL      reduce using rule 101 (alterable -> alterable DOT LETTER .)
    TIMESEQUAL      reduce using rule 101 (alterable -> alterable DOT LETTER .)
    DIVIDEEQUAL     reduce using rule 101 (alterable -> alterable DOT LETTER .)
    PLUS            reduce using rule 101 (alterable -> alterable DOT LETTER .)
    MINUS           reduce using rule 101 (alterable -> alterable DOT LETTER .)
    TIMES           reduce using rule 101 (alterable -> alterable DOT LETTER .)
    DIVIDE          reduce using rule 101 (alterable -> alterable DOT LETTER .)
    PERCENTAGE      reduce using rule 101 (alterable -> alterable DOT LETTER .)
    LESSEQUAL       reduce using rule 101 (alterable -> alterable DOT LETTER .)
    GREATEREQUAL    reduce using rule 101 (alterable -> alterable DOT LETTER .)
    EQUALEQUAL      reduce using rule 101 (alterable -> alterable DOT LETTER .)
    LESS_THAN       reduce using rule 101 (alterable -> alterable DOT LETTER .)
    GREATER_THAN    reduce using rule 101 (alterable -> alterable DOT LETTER .)
    NOTEQUAL        reduce using rule 101 (alterable -> alterable DOT LETTER .)
    LOGICAL_AND     reduce using rule 101 (alterable -> alterable DOT LETTER .)
    LOGICAL_OR      reduce using rule 101 (alterable -> alterable DOT LETTER .)
    TILDA           reduce using rule 101 (alterable -> alterable DOT LETTER .)
    AND             reduce using rule 101 (alterable -> alterable DOT LETTER .)
    OR              reduce using rule 101 (alterable -> alterable DOT LETTER .)
    SEMICOLON       reduce using rule 101 (alterable -> alterable DOT LETTER .)
    CLOSING_PARENTHESES reduce using rule 101 (alterable -> alterable DOT LETTER .)
    CLOSING_BRACKET reduce using rule 101 (alterable -> alterable DOT LETTER .)
    COMMA           reduce using rule 101 (alterable -> alterable DOT LETTER .)


state 119

    (100) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 148


state 120

    (71) eachExpression -> eachExpression logicOp THEN_KW .

    CLOSING_PARENTHESES reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    LOGICAL_AND     reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    LOGICAL_OR      reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    TILDA           reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    AND             reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    OR              reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    SEMICOLON       reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    CLOSING_BRACKET reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)
    COMMA           reduce using rule 71 (eachExpression -> eachExpression logicOp THEN_KW .)


state 121

    (74) eachExpression -> eachExpression logicOp ELSE_KW . eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 149
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 122

    (70) eachExpression -> eachExpression logicOp eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_PARENTHESES reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    SEMICOLON       reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    COMMA           reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

  ! LOGICAL_AND     [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! TILDA           [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! AND             [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OR              [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]

    logicOp                        shift and go to state 77

state 123

    (66) mathOp -> PLUSEQUAL .

    LETTER          reduce using rule 66 (mathOp -> PLUSEQUAL .)
    LOGICAL_AND     reduce using rule 66 (mathOp -> PLUSEQUAL .)
    LOGICAL_OR      reduce using rule 66 (mathOp -> PLUSEQUAL .)
    TILDA           reduce using rule 66 (mathOp -> PLUSEQUAL .)
    AND             reduce using rule 66 (mathOp -> PLUSEQUAL .)
    OR              reduce using rule 66 (mathOp -> PLUSEQUAL .)
    MINUS           reduce using rule 66 (mathOp -> PLUSEQUAL .)
    TIMES           reduce using rule 66 (mathOp -> PLUSEQUAL .)
    QUESTION_MARK   reduce using rule 66 (mathOp -> PLUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 66 (mathOp -> PLUSEQUAL .)
    CONST_KW        reduce using rule 66 (mathOp -> PLUSEQUAL .)
    TRUE_KW         reduce using rule 66 (mathOp -> PLUSEQUAL .)
    FALSE_KW        reduce using rule 66 (mathOp -> PLUSEQUAL .)


state 124

    (61) allExpression -> alterable PLUSPLUS .

    COMMA           reduce using rule 61 (allExpression -> alterable PLUSPLUS .)
    CLOSING_PARENTHESES reduce using rule 61 (allExpression -> alterable PLUSPLUS .)
    SEMICOLON       reduce using rule 61 (allExpression -> alterable PLUSPLUS .)
    CLOSING_BRACKET reduce using rule 61 (allExpression -> alterable PLUSPLUS .)


state 125

    (68) mathOp -> TIMESEQUAL .

    LETTER          reduce using rule 68 (mathOp -> TIMESEQUAL .)
    LOGICAL_AND     reduce using rule 68 (mathOp -> TIMESEQUAL .)
    LOGICAL_OR      reduce using rule 68 (mathOp -> TIMESEQUAL .)
    TILDA           reduce using rule 68 (mathOp -> TIMESEQUAL .)
    AND             reduce using rule 68 (mathOp -> TIMESEQUAL .)
    OR              reduce using rule 68 (mathOp -> TIMESEQUAL .)
    MINUS           reduce using rule 68 (mathOp -> TIMESEQUAL .)
    TIMES           reduce using rule 68 (mathOp -> TIMESEQUAL .)
    QUESTION_MARK   reduce using rule 68 (mathOp -> TIMESEQUAL .)
    OPENING_PARENTHESES reduce using rule 68 (mathOp -> TIMESEQUAL .)
    CONST_KW        reduce using rule 68 (mathOp -> TIMESEQUAL .)
    TRUE_KW         reduce using rule 68 (mathOp -> TIMESEQUAL .)
    FALSE_KW        reduce using rule 68 (mathOp -> TIMESEQUAL .)


state 126

    (67) mathOp -> MINUSEQUAL .

    LETTER          reduce using rule 67 (mathOp -> MINUSEQUAL .)
    LOGICAL_AND     reduce using rule 67 (mathOp -> MINUSEQUAL .)
    LOGICAL_OR      reduce using rule 67 (mathOp -> MINUSEQUAL .)
    TILDA           reduce using rule 67 (mathOp -> MINUSEQUAL .)
    AND             reduce using rule 67 (mathOp -> MINUSEQUAL .)
    OR              reduce using rule 67 (mathOp -> MINUSEQUAL .)
    MINUS           reduce using rule 67 (mathOp -> MINUSEQUAL .)
    TIMES           reduce using rule 67 (mathOp -> MINUSEQUAL .)
    QUESTION_MARK   reduce using rule 67 (mathOp -> MINUSEQUAL .)
    OPENING_PARENTHESES reduce using rule 67 (mathOp -> MINUSEQUAL .)
    CONST_KW        reduce using rule 67 (mathOp -> MINUSEQUAL .)
    TRUE_KW         reduce using rule 67 (mathOp -> MINUSEQUAL .)
    FALSE_KW        reduce using rule 67 (mathOp -> MINUSEQUAL .)


state 127

    (65) mathOp -> EQUAL .

    LETTER          reduce using rule 65 (mathOp -> EQUAL .)
    LOGICAL_AND     reduce using rule 65 (mathOp -> EQUAL .)
    LOGICAL_OR      reduce using rule 65 (mathOp -> EQUAL .)
    TILDA           reduce using rule 65 (mathOp -> EQUAL .)
    AND             reduce using rule 65 (mathOp -> EQUAL .)
    OR              reduce using rule 65 (mathOp -> EQUAL .)
    MINUS           reduce using rule 65 (mathOp -> EQUAL .)
    TIMES           reduce using rule 65 (mathOp -> EQUAL .)
    QUESTION_MARK   reduce using rule 65 (mathOp -> EQUAL .)
    OPENING_PARENTHESES reduce using rule 65 (mathOp -> EQUAL .)
    CONST_KW        reduce using rule 65 (mathOp -> EQUAL .)
    TRUE_KW         reduce using rule 65 (mathOp -> EQUAL .)
    FALSE_KW        reduce using rule 65 (mathOp -> EQUAL .)


state 128

    (60) allExpression -> alterable mathOp . allExpression
    (64) allExpression -> alterable mathOp . alterable
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    inalterable                    shift and go to state 62
    constant                       shift and go to state 52
    alterable                      shift and go to state 150
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 151
    unaryExpression                shift and go to state 53
    logicOp                        shift and go to state 65
    mathEXP                        shift and go to state 64

state 129

    (69) mathOp -> DIVIDEEQUAL .

    LETTER          reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    LOGICAL_AND     reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    LOGICAL_OR      reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    TILDA           reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    AND             reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    OR              reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    MINUS           reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    TIMES           reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    QUESTION_MARK   reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    OPENING_PARENTHESES reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    CONST_KW        reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    TRUE_KW         reduce using rule 69 (mathOp -> DIVIDEEQUAL .)
    FALSE_KW        reduce using rule 69 (mathOp -> DIVIDEEQUAL .)


state 130

    (62) allExpression -> alterable MINUSMINUS .

    COMMA           reduce using rule 62 (allExpression -> alterable MINUSMINUS .)
    CLOSING_PARENTHESES reduce using rule 62 (allExpression -> alterable MINUSMINUS .)
    SEMICOLON       reduce using rule 62 (allExpression -> alterable MINUSMINUS .)
    CLOSING_BRACKET reduce using rule 62 (allExpression -> alterable MINUSMINUS .)


state 131

    (102) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PLUS            reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND             reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR              reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 102 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 132

    (99) alterable -> LETTER numOrletter .
    (104) inalterable -> LETTER numOrletter . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PLUSPLUS        reduce using rule 99 (alterable -> LETTER numOrletter .)
    MINUSMINUS      reduce using rule 99 (alterable -> LETTER numOrletter .)
    OPENING_BRACKET reduce using rule 99 (alterable -> LETTER numOrletter .)
    DOT             reduce using rule 99 (alterable -> LETTER numOrletter .)
    EQUAL           reduce using rule 99 (alterable -> LETTER numOrletter .)
    PLUSEQUAL       reduce using rule 99 (alterable -> LETTER numOrletter .)
    MINUSEQUAL      reduce using rule 99 (alterable -> LETTER numOrletter .)
    TIMESEQUAL      reduce using rule 99 (alterable -> LETTER numOrletter .)
    DIVIDEEQUAL     reduce using rule 99 (alterable -> LETTER numOrletter .)
    PLUS            reduce using rule 99 (alterable -> LETTER numOrletter .)
    MINUS           reduce using rule 99 (alterable -> LETTER numOrletter .)
    TIMES           reduce using rule 99 (alterable -> LETTER numOrletter .)
    DIVIDE          reduce using rule 99 (alterable -> LETTER numOrletter .)
    PERCENTAGE      reduce using rule 99 (alterable -> LETTER numOrletter .)
    LESSEQUAL       reduce using rule 99 (alterable -> LETTER numOrletter .)
    GREATEREQUAL    reduce using rule 99 (alterable -> LETTER numOrletter .)
    EQUALEQUAL      reduce using rule 99 (alterable -> LETTER numOrletter .)
    LESS_THAN       reduce using rule 99 (alterable -> LETTER numOrletter .)
    GREATER_THAN    reduce using rule 99 (alterable -> LETTER numOrletter .)
    NOTEQUAL        reduce using rule 99 (alterable -> LETTER numOrletter .)
    LOGICAL_AND     reduce using rule 99 (alterable -> LETTER numOrletter .)
    LOGICAL_OR      reduce using rule 99 (alterable -> LETTER numOrletter .)
    TILDA           reduce using rule 99 (alterable -> LETTER numOrletter .)
    AND             reduce using rule 99 (alterable -> LETTER numOrletter .)
    OR              reduce using rule 99 (alterable -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 99 (alterable -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 99 (alterable -> LETTER numOrletter .)
    CLOSING_BRACKET reduce using rule 99 (alterable -> LETTER numOrletter .)
    COMMA           reduce using rule 99 (alterable -> LETTER numOrletter .)
    OPENING_PARENTHESES shift and go to state 133


state 133

    (104) inalterable -> LETTER numOrletter OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (105) args -> . arguments
    (106) args -> . empty
    (107) arguments -> . arguments COMMA allExpression
    (108) arguments -> . allExpression
    (117) empty -> .
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    CLOSING_PARENTHESES reduce using rule 117 (empty -> .)
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    unaryExpression                shift and go to state 53
    factor                         shift and go to state 57
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    allExpression                  shift and go to state 152
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 80
    arguments                      shift and go to state 155
    args                           shift and go to state 153
    inalterable                    shift and go to state 62
    empty                          shift and go to state 154
    logicOp                        shift and go to state 65
    mathEXP                        shift and go to state 64

state 134

    (85) mathEXP -> mathEXP op mathEXP .
    (85) mathEXP -> mathEXP . op mathEXP
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . PERCENTAGE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENTAGE resolved as shift
    LESSEQUAL       reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    GREATEREQUAL    reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    EQUALEQUAL      reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    LESS_THAN       reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    GREATER_THAN    reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    NOTEQUAL        reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    LOGICAL_AND     reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    LOGICAL_OR      reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    TILDA           reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    AND             reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    OR              reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    SEMICOLON       reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_PARENTHESES reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_BRACKET reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    COMMA           reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 87
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 90
    PERCENTAGE      shift and go to state 86

  ! PLUS            [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! MINUS           [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! TIMES           [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! DIVIDE          [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]

    op                             shift and go to state 84

state 135

    (75) relExpression -> mathEXP compareType mathEXP .
    (85) mathEXP -> mathEXP . op mathEXP
    (87) op -> . PLUS
    (88) op -> . MINUS
    (89) op -> . TIMES
    (90) op -> . DIVIDE
    (91) op -> . PERCENTAGE

    LOGICAL_AND     reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    LOGICAL_OR      reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    TILDA           reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    AND             reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    OR              reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    COMMA           reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 87
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 90
    PERCENTAGE      shift and go to state 86

    op                             shift and go to state 84

state 136

    (59) continue -> CONTINUE_KW SEMICOLON .

    VOID_KW         reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    NUMBER          reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    LETTER          reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    IF_KW           reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    LOGICAL_AND     reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    LOGICAL_OR      reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    TILDA           reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    AND             reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    OR              reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    MINUS           reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    TIMES           reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE_KW         reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE_KW        reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)
    OTHER_KW        reduce using rule 59 (continue -> CONTINUE_KW SEMICOLON .)


state 137

    (55) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 156
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 138

    (57) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 157


state 139

    (58) returnPhrase -> GIVEBACK_KW numOrletter . SEMICOLON

    SEMICOLON       shift and go to state 158


state 140

    (3) numOrletter -> LETTER .
    (99) alterable -> LETTER . numOrletter
    (104) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (117) empty -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 3 (numOrletter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrletter -> LETTER .)
    NUMBER          shift and go to state 11
    LETTER          shift and go to state 13
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    PLUSPLUS        reduce using rule 117 (empty -> .)
    MINUSMINUS      reduce using rule 117 (empty -> .)
    OPENING_BRACKET reduce using rule 117 (empty -> .)
    DOT             reduce using rule 117 (empty -> .)
    EQUAL           reduce using rule 117 (empty -> .)
    PLUSEQUAL       reduce using rule 117 (empty -> .)
    MINUSEQUAL      reduce using rule 117 (empty -> .)
    TIMESEQUAL      reduce using rule 117 (empty -> .)
    DIVIDEEQUAL     reduce using rule 117 (empty -> .)
    PLUS            reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    DIVIDE          reduce using rule 117 (empty -> .)
    PERCENTAGE      reduce using rule 117 (empty -> .)
    LESSEQUAL       reduce using rule 117 (empty -> .)
    GREATEREQUAL    reduce using rule 117 (empty -> .)
    EQUALEQUAL      reduce using rule 117 (empty -> .)
    LESS_THAN       reduce using rule 117 (empty -> .)
    GREATER_THAN    reduce using rule 117 (empty -> .)
    NOTEQUAL        reduce using rule 117 (empty -> .)
    LOGICAL_AND     reduce using rule 117 (empty -> .)
    LOGICAL_OR      reduce using rule 117 (empty -> .)
    TILDA           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)

  ! SEMICOLON       [ reduce using rule 117 (empty -> .) ]

    empty                          shift and go to state 7
    numOrletter                    shift and go to state 132

state 141

    (36) localDeclarations -> empty .

    STATIC_KW       reduce using rule 36 (localDeclarations -> empty .)
    BOOLEAN_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHARACTER_KW    reduce using rule 36 (localDeclarations -> empty .)
    INTEGER_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHAR_KW         reduce using rule 36 (localDeclarations -> empty .)
    BOOL_KW         reduce using rule 36 (localDeclarations -> empty .)
    INT_KW          reduce using rule 36 (localDeclarations -> empty .)
    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> empty .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    IF_KW           reduce using rule 36 (localDeclarations -> empty .)
    TILL_KW         reduce using rule 36 (localDeclarations -> empty .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> empty .)
    LETTER          reduce using rule 36 (localDeclarations -> empty .)
    LOGICAL_AND     reduce using rule 36 (localDeclarations -> empty .)
    LOGICAL_OR      reduce using rule 36 (localDeclarations -> empty .)
    TILDA           reduce using rule 36 (localDeclarations -> empty .)
    AND             reduce using rule 36 (localDeclarations -> empty .)
    OR              reduce using rule 36 (localDeclarations -> empty .)
    MINUS           reduce using rule 36 (localDeclarations -> empty .)
    TIMES           reduce using rule 36 (localDeclarations -> empty .)
    QUESTION_MARK   reduce using rule 36 (localDeclarations -> empty .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> empty .)
    CONST_KW        reduce using rule 36 (localDeclarations -> empty .)
    TRUE_KW         reduce using rule 36 (localDeclarations -> empty .)
    FALSE_KW        reduce using rule 36 (localDeclarations -> empty .)


state 142

    (45) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (35) localDeclarations -> localDeclarations . ScopedVariableDec
    (46) statementList -> . statementList statement
    (47) statementList -> . empty
    (10) ScopedVariableDec -> . scopedSpecifier variableList
    (117) empty -> .
    (17) scopedSpecifier -> . STATIC_KW type
    (18) scopedSpecifier -> . type
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    OPENING_BRACE   reduce using rule 117 (empty -> .)
    IF_KW           reduce using rule 117 (empty -> .)
    TILL_KW         reduce using rule 117 (empty -> .)
    COMEBACK_KW     reduce using rule 117 (empty -> .)
    GIVEBACK_KW     reduce using rule 117 (empty -> .)
    CONTINUE_KW     reduce using rule 117 (empty -> .)
    LETTER          reduce using rule 117 (empty -> .)
    LOGICAL_AND     reduce using rule 117 (empty -> .)
    LOGICAL_OR      reduce using rule 117 (empty -> .)
    TILDA           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    TIMES           reduce using rule 117 (empty -> .)
    QUESTION_MARK   reduce using rule 117 (empty -> .)
    OPENING_PARENTHESES reduce using rule 117 (empty -> .)
    CONST_KW        reduce using rule 117 (empty -> .)
    TRUE_KW         reduce using rule 117 (empty -> .)
    FALSE_KW        reduce using rule 117 (empty -> .)
    STATIC_KW       shift and go to state 162
    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15

    statementList                  shift and go to state 159
    scopedSpecifier                shift and go to state 161
    ScopedVariableDec              shift and go to state 160
    type                           shift and go to state 163
    empty                          shift and go to state 164

state 143

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    NUMBER          reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    LETTER          reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 144

    (48) phrase -> allExpression SEMICOLON .

    OTHER_KW        reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    VOID_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    NUMBER          reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    LETTER          reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    IF_KW           reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    LOGICAL_AND     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    LOGICAL_OR      reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    TILDA           reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    AND             reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    OR              reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    MINUS           reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    TIMES           reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 48 (phrase -> allExpression SEMICOLON .)


state 145

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 61
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    constant                       shift and go to state 52
    alterable                      shift and go to state 44
    factor                         shift and go to state 57
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 165
    inalterable                    shift and go to state 62
    unaryop                        shift and go to state 47
    mathEXP                        shift and go to state 64
    logicOp                        shift and go to state 65
    unaryExpression                shift and go to state 53

state 146

    (56) returnPhrase -> COMEBACK_KW SEMICOLON .

    CLOSING_BRACE   reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VOID_KW         reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    NUMBER          reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LETTER          reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    IF_KW           reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LOGICAL_AND     reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LOGICAL_OR      reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILDA           reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AND             reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OR              reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MINUS           reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIMES           reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QUESTION_MARK   reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE_KW         reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE_KW        reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OTHER_KW        reduce using rule 56 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 147

    (38) paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .

    COMMA           reduce using rule 38 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 38 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 38 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)


state 148

    (100) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    PLUSPLUS        reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSMINUS      reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OPENING_BRACKET reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DOT             reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUAL           reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSEQUAL       reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSEQUAL      reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMESEQUAL      reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDEEQUAL     reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUS            reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDE          reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PERCENTAGE      reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESSEQUAL       reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATEREQUAL    reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUALEQUAL      reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESS_THAN       reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATER_THAN    reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NOTEQUAL        reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_AND     reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_OR      reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND             reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR              reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 100 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 149

    (74) eachExpression -> eachExpression logicOp ELSE_KW eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_PARENTHESES reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    COMMA           reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

  ! LOGICAL_AND     [ reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! AND             [ reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OR              [ reduce using rule 74 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]

    logicOp                        shift and go to state 77

state 150

    (64) allExpression -> alterable mathOp alterable .
    (60) allExpression -> alterable . mathOp allExpression
    (61) allExpression -> alterable . PLUSPLUS
    (62) allExpression -> alterable . MINUSMINUS
    (64) allExpression -> alterable . mathOp alterable
    (100) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> alterable . DOT LETTER
    (98) factor -> alterable .
    (65) mathOp -> . EQUAL
    (66) mathOp -> . PLUSEQUAL
    (67) mathOp -> . MINUSEQUAL
    (68) mathOp -> . TIMESEQUAL
    (69) mathOp -> . DIVIDEEQUAL

  ! reduce/reduce conflict for CLOSING_PARENTHESES resolved using rule 64 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for CLOSING_BRACKET resolved using rule 64 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (allExpression -> alterable mathOp alterable .)
    COMMA           reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    CLOSING_PARENTHESES reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    SEMICOLON       reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    CLOSING_BRACKET reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    PLUSPLUS        shift and go to state 124
    MINUSMINUS      shift and go to state 130
    OPENING_BRACKET shift and go to state 74
    DOT             shift and go to state 73
    PLUS            reduce using rule 98 (factor -> alterable .)
    MINUS           reduce using rule 98 (factor -> alterable .)
    TIMES           reduce using rule 98 (factor -> alterable .)
    DIVIDE          reduce using rule 98 (factor -> alterable .)
    PERCENTAGE      reduce using rule 98 (factor -> alterable .)
    LESSEQUAL       reduce using rule 98 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 98 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 98 (factor -> alterable .)
    LESS_THAN       reduce using rule 98 (factor -> alterable .)
    GREATER_THAN    reduce using rule 98 (factor -> alterable .)
    NOTEQUAL        reduce using rule 98 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 98 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 98 (factor -> alterable .)
    TILDA           reduce using rule 98 (factor -> alterable .)
    AND             reduce using rule 98 (factor -> alterable .)
    OR              reduce using rule 98 (factor -> alterable .)
    EQUAL           shift and go to state 127
    PLUSEQUAL       shift and go to state 123
    MINUSEQUAL      shift and go to state 126
    TIMESEQUAL      shift and go to state 125
    DIVIDEEQUAL     shift and go to state 129

  ! CLOSING_PARENTHESES [ reduce using rule 98 (factor -> alterable .) ]
  ! SEMICOLON       [ reduce using rule 98 (factor -> alterable .) ]
  ! CLOSING_BRACKET [ reduce using rule 98 (factor -> alterable .) ]
  ! COMMA           [ reduce using rule 98 (factor -> alterable .) ]

    mathOp                         shift and go to state 128

state 151

    (60) allExpression -> alterable mathOp allExpression .

    COMMA           reduce using rule 60 (allExpression -> alterable mathOp allExpression .)
    CLOSING_PARENTHESES reduce using rule 60 (allExpression -> alterable mathOp allExpression .)
    SEMICOLON       reduce using rule 60 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 60 (allExpression -> alterable mathOp allExpression .)


state 152

    (108) arguments -> allExpression .

    COMMA           reduce using rule 108 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 108 (arguments -> allExpression .)


state 153

    (104) inalterable -> LETTER numOrletter OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 166


state 154

    (106) args -> empty .

    CLOSING_PARENTHESES reduce using rule 106 (args -> empty .)


state 155

    (105) args -> arguments .
    (107) arguments -> arguments . COMMA allExpression

    CLOSING_PARENTHESES reduce using rule 105 (args -> arguments .)
    COMMA           shift and go to state 167


state 156

    (55) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

    CLOSING_PARENTHESES shift and go to state 168
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

    logicOp                        shift and go to state 77

state 157

    (57) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VOID_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    NUMBER          reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LETTER          reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    IF_KW           reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LOGICAL_AND     reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LOGICAL_OR      reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILDA           reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AND             reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OR              reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MINUS           reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIMES           reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QUESTION_MARK   reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE_KW        reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 57 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 158

    (58) returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .

    CLOSING_BRACE   reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    VOID_KW         reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    NUMBER          reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    LETTER          reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    BOOLEAN_KW      reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CHARACTER_KW    reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    INTEGER_KW      reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CHAR_KW         reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    BOOL_KW         reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    INT_KW          reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    $end            reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    SEMICOLON       reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OPENING_BRACE   reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    IF_KW           reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TILL_KW         reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    COMEBACK_KW     reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    GIVEBACK_KW     reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CONTINUE_KW     reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    LOGICAL_AND     reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    LOGICAL_OR      reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TILDA           reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    AND             reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OR              reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    MINUS           reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TIMES           reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    QUESTION_MARK   reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CONST_KW        reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TRUE_KW         reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    FALSE_KW        reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OTHER_KW        reduce using rule 58 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)


state 159

    (45) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (46) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    CLOSING_BRACE   shift and go to state 169
    SEMICOLON       shift and go to state 102
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    unaryop                        shift and go to state 47
    factor                         shift and go to state 57
    unaryExpression                shift and go to state 53
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 170
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    relExpression                  shift and go to state 60
    iterationPhrase                shift and go to state 108
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 160

    (35) localDeclarations -> localDeclarations ScopedVariableDec .

    STATIC_KW       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INT_KW          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    IF_KW           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    LETTER          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    LOGICAL_AND     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    LOGICAL_OR      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILDA           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    AND             reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OR              reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    MINUS           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TIMES           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QUESTION_MARK   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONST_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TRUE_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    FALSE_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 161

    (10) ScopedVariableDec -> scopedSpecifier . variableList
    (11) variableList -> . variableList COMMA varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> . LETTER numOrletter

    LETTER          shift and go to state 35

    variableList                   shift and go to state 171
    varForm                        shift and go to state 21
    varInitialization              shift and go to state 19

state 162

    (17) scopedSpecifier -> STATIC_KW . type
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 12
    CHARACTER_KW    shift and go to state 17
    INTEGER_KW      shift and go to state 1
    CHAR_KW         shift and go to state 8
    BOOL_KW         shift and go to state 14
    INT_KW          shift and go to state 15

    type                           shift and go to state 172

state 163

    (18) scopedSpecifier -> type .

    LETTER          reduce using rule 18 (scopedSpecifier -> type .)


state 164

    (47) statementList -> empty .

    CLOSING_BRACE   reduce using rule 47 (statementList -> empty .)
    SEMICOLON       reduce using rule 47 (statementList -> empty .)
    OPENING_BRACE   reduce using rule 47 (statementList -> empty .)
    IF_KW           reduce using rule 47 (statementList -> empty .)
    TILL_KW         reduce using rule 47 (statementList -> empty .)
    COMEBACK_KW     reduce using rule 47 (statementList -> empty .)
    GIVEBACK_KW     reduce using rule 47 (statementList -> empty .)
    CONTINUE_KW     reduce using rule 47 (statementList -> empty .)
    LETTER          reduce using rule 47 (statementList -> empty .)
    LOGICAL_AND     reduce using rule 47 (statementList -> empty .)
    LOGICAL_OR      reduce using rule 47 (statementList -> empty .)
    TILDA           reduce using rule 47 (statementList -> empty .)
    AND             reduce using rule 47 (statementList -> empty .)
    OR              reduce using rule 47 (statementList -> empty .)
    MINUS           reduce using rule 47 (statementList -> empty .)
    TIMES           reduce using rule 47 (statementList -> empty .)
    QUESTION_MARK   reduce using rule 47 (statementList -> empty .)
    OPENING_PARENTHESES reduce using rule 47 (statementList -> empty .)
    CONST_KW        reduce using rule 47 (statementList -> empty .)
    TRUE_KW         reduce using rule 47 (statementList -> empty .)
    FALSE_KW        reduce using rule 47 (statementList -> empty .)


state 165

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp THEN_KW
    (74) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR

    CLOSING_PARENTHESES shift and go to state 173
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48

    logicOp                        shift and go to state 77

state 166

    (104) inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PLUS            reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MINUS           reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIMES           reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TILDA           reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND             reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR              reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMMA           reduce using rule 104 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 167

    (107) arguments -> arguments COMMA . allExpression
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    factor                         shift and go to state 57
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    allExpression                  shift and go to state 174
    unaryop                        shift and go to state 47
    relExpression                  shift and go to state 60
    eachExpression                 shift and go to state 80
    inalterable                    shift and go to state 62
    unaryExpression                shift and go to state 53
    logicOp                        shift and go to state 65
    mathEXP                        shift and go to state 64

state 168

    (55) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 102
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    unaryop                        shift and go to state 47
    factor                         shift and go to state 57
    unaryExpression                shift and go to state 53
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 175
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    relExpression                  shift and go to state 60
    iterationPhrase                shift and go to state 108
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 169

    (45) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    OTHER_KW        reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LOGICAL_AND     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LOGICAL_OR      reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILDA           reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AND             reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OR              reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MINUS           reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIMES           reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QUESTION_MARK   reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE_KW        reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    NUMBER          reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 170

    (46) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 46 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 46 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 46 (statementList -> statementList statement .)
    IF_KW           reduce using rule 46 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 46 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 46 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 46 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 46 (statementList -> statementList statement .)
    LETTER          reduce using rule 46 (statementList -> statementList statement .)
    LOGICAL_AND     reduce using rule 46 (statementList -> statementList statement .)
    LOGICAL_OR      reduce using rule 46 (statementList -> statementList statement .)
    TILDA           reduce using rule 46 (statementList -> statementList statement .)
    AND             reduce using rule 46 (statementList -> statementList statement .)
    OR              reduce using rule 46 (statementList -> statementList statement .)
    MINUS           reduce using rule 46 (statementList -> statementList statement .)
    TIMES           reduce using rule 46 (statementList -> statementList statement .)
    QUESTION_MARK   reduce using rule 46 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 46 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 46 (statementList -> statementList statement .)
    TRUE_KW         reduce using rule 46 (statementList -> statementList statement .)
    FALSE_KW        reduce using rule 46 (statementList -> statementList statement .)


state 171

    (10) ScopedVariableDec -> scopedSpecifier variableList .
    (11) variableList -> variableList . COMMA varInitialization

    STATIC_KW       reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOLEAN_KW      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHARACTER_KW    reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    INTEGER_KW      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHAR_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOL_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    INT_KW          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CLOSING_BRACE   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    SEMICOLON       reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_BRACE   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    IF_KW           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILL_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMEBACK_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    GIVEBACK_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONTINUE_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    LETTER          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    LOGICAL_AND     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    LOGICAL_OR      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILDA           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    AND             reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    OR              reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    MINUS           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    TIMES           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    QUESTION_MARK   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_PARENTHESES reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONST_KW        reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    TRUE_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    FALSE_KW        reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMMA           shift and go to state 26


state 172

    (17) scopedSpecifier -> STATIC_KW type .

    LETTER          reduce using rule 17 (scopedSpecifier -> STATIC_KW type .)


state 173

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . ifBody
    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (52) ifBody -> . statement
    (53) ifBody -> . statement OTHER_KW statement
    (54) ifBody -> . SEMICOLON
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    OPENING_BRACE   shift and go to state 178
    SEMICOLON       shift and go to state 177
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    ifBody                         shift and go to state 176
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    unaryop                        shift and go to state 47
    factor                         shift and go to state 57
    unaryExpression                shift and go to state 53
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 179
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    relExpression                  shift and go to state 60
    iterationPhrase                shift and go to state 108
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 174

    (107) arguments -> arguments COMMA allExpression .

    COMMA           reduce using rule 107 (arguments -> arguments COMMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 107 (arguments -> arguments COMMA allExpression .)


state 175

    (55) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OTHER_KW        reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    IF_KW           reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LOGICAL_AND     reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LOGICAL_OR      reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILDA           reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AND             reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OR              reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MINUS           reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIMES           reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QUESTION_MARK   reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE_KW         reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE_KW        reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 55 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)


state 176

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .

    OTHER_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CLOSING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    VOID_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    NUMBER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    LETTER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOLEAN_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHARACTER_KW    reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INTEGER_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHAR_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INT_KW          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_PARENTHESES reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    $end            reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    SEMICOLON       reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    IF_KW           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TILL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    COMEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    GIVEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONTINUE_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    LOGICAL_AND     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    LOGICAL_OR      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TILDA           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    AND             reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OR              reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    MINUS           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TIMES           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    QUESTION_MARK   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONST_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TRUE_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    FALSE_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)


state 177

    (54) ifBody -> SEMICOLON .
    (49) phrase -> SEMICOLON .

  ! reduce/reduce conflict for OTHER_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CLOSING_BRACE resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for VOID_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for LETTER resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for BOOLEAN_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CHARACTER_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for INTEGER_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CHAR_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for BOOL_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for INT_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OPENING_PARENTHESES resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OPENING_BRACE resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for IF_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TILL_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for COMEBACK_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for GIVEBACK_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TILDA resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for AND resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OR resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for MINUS resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for QUESTION_MARK resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CONST_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TRUE_KW resolved using rule 49 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for FALSE_KW resolved using rule 49 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 49 (phrase -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 49 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    NUMBER          reduce using rule 49 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 49 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 49 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 49 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 49 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 49 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 49 (phrase -> SEMICOLON .)
    $end            reduce using rule 49 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 49 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 49 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 49 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    LOGICAL_AND     reduce using rule 49 (phrase -> SEMICOLON .)
    LOGICAL_OR      reduce using rule 49 (phrase -> SEMICOLON .)
    TILDA           reduce using rule 49 (phrase -> SEMICOLON .)
    AND             reduce using rule 49 (phrase -> SEMICOLON .)
    OR              reduce using rule 49 (phrase -> SEMICOLON .)
    MINUS           reduce using rule 49 (phrase -> SEMICOLON .)
    TIMES           reduce using rule 49 (phrase -> SEMICOLON .)
    QUESTION_MARK   reduce using rule 49 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 49 (phrase -> SEMICOLON .)
    TRUE_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    FALSE_KW        reduce using rule 49 (phrase -> SEMICOLON .)

  ! SEMICOLON       [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! OPENING_BRACE   [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! IF_KW           [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! TILL_KW         [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! COMEBACK_KW     [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! GIVEBACK_KW     [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! CONTINUE_KW     [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! LETTER          [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! LOGICAL_AND     [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! LOGICAL_OR      [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! TILDA           [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! AND             [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! OR              [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! MINUS           [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! TIMES           [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! QUESTION_MARK   [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! OPENING_PARENTHESES [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! CONST_KW        [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! TRUE_KW         [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! FALSE_KW        [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! CLOSING_BRACE   [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! VOID_KW         [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! BOOLEAN_KW      [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! CHARACTER_KW    [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! INTEGER_KW      [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! CHAR_KW         [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! BOOL_KW         [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! INT_KW          [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! $end            [ reduce using rule 54 (ifBody -> SEMICOLON .) ]
  ! OTHER_KW        [ reduce using rule 54 (ifBody -> SEMICOLON .) ]


state 178

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE . ifBody ifBody CLOSING_BRACE
    (45) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (52) ifBody -> . statement
    (53) ifBody -> . statement OTHER_KW statement
    (54) ifBody -> . SEMICOLON
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> . empty
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (117) empty -> .
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for OPENING_BRACE resolved as shift
  ! shift/reduce conflict for IF_KW resolved as shift
  ! shift/reduce conflict for TILL_KW resolved as shift
  ! shift/reduce conflict for COMEBACK_KW resolved as shift
  ! shift/reduce conflict for GIVEBACK_KW resolved as shift
  ! shift/reduce conflict for CONTINUE_KW resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for OPENING_PARENTHESES resolved as shift
  ! shift/reduce conflict for CONST_KW resolved as shift
  ! shift/reduce conflict for TRUE_KW resolved as shift
  ! shift/reduce conflict for FALSE_KW resolved as shift
    SEMICOLON       shift and go to state 177
    STATIC_KW       reduce using rule 117 (empty -> .)
    BOOLEAN_KW      reduce using rule 117 (empty -> .)
    CHARACTER_KW    reduce using rule 117 (empty -> .)
    INTEGER_KW      reduce using rule 117 (empty -> .)
    CHAR_KW         reduce using rule 117 (empty -> .)
    BOOL_KW         reduce using rule 117 (empty -> .)
    INT_KW          reduce using rule 117 (empty -> .)
    CLOSING_BRACE   reduce using rule 117 (empty -> .)
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

  ! SEMICOLON       [ reduce using rule 117 (empty -> .) ]
  ! OPENING_BRACE   [ reduce using rule 117 (empty -> .) ]
  ! IF_KW           [ reduce using rule 117 (empty -> .) ]
  ! TILL_KW         [ reduce using rule 117 (empty -> .) ]
  ! COMEBACK_KW     [ reduce using rule 117 (empty -> .) ]
  ! GIVEBACK_KW     [ reduce using rule 117 (empty -> .) ]
  ! CONTINUE_KW     [ reduce using rule 117 (empty -> .) ]
  ! LETTER          [ reduce using rule 117 (empty -> .) ]
  ! LOGICAL_AND     [ reduce using rule 117 (empty -> .) ]
  ! LOGICAL_OR      [ reduce using rule 117 (empty -> .) ]
  ! TILDA           [ reduce using rule 117 (empty -> .) ]
  ! AND             [ reduce using rule 117 (empty -> .) ]
  ! OR              [ reduce using rule 117 (empty -> .) ]
  ! MINUS           [ reduce using rule 117 (empty -> .) ]
  ! TIMES           [ reduce using rule 117 (empty -> .) ]
  ! QUESTION_MARK   [ reduce using rule 117 (empty -> .) ]
  ! OPENING_PARENTHESES [ reduce using rule 117 (empty -> .) ]
  ! CONST_KW        [ reduce using rule 117 (empty -> .) ]
  ! TRUE_KW         [ reduce using rule 117 (empty -> .) ]
  ! FALSE_KW        [ reduce using rule 117 (empty -> .) ]

    unaryExpression                shift and go to state 53
    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    ifBody                         shift and go to state 180
    localDeclarations              shift and go to state 142
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    phrase                         shift and go to state 106
    unaryop                        shift and go to state 47
    factor                         shift and go to state 57
    mathEXP                        shift and go to state 64
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 179
    returnPhrase                   shift and go to state 114
    relExpression                  shift and go to state 60
    empty                          shift and go to state 141
    inalterable                    shift and go to state 62
    iterationPhrase                shift and go to state 108
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 179

    (52) ifBody -> statement .
    (53) ifBody -> statement . OTHER_KW statement

  ! shift/reduce conflict for OTHER_KW resolved as shift
    SEMICOLON       reduce using rule 52 (ifBody -> statement .)
    OPENING_BRACE   reduce using rule 52 (ifBody -> statement .)
    IF_KW           reduce using rule 52 (ifBody -> statement .)
    TILL_KW         reduce using rule 52 (ifBody -> statement .)
    COMEBACK_KW     reduce using rule 52 (ifBody -> statement .)
    GIVEBACK_KW     reduce using rule 52 (ifBody -> statement .)
    CONTINUE_KW     reduce using rule 52 (ifBody -> statement .)
    LETTER          reduce using rule 52 (ifBody -> statement .)
    LOGICAL_AND     reduce using rule 52 (ifBody -> statement .)
    LOGICAL_OR      reduce using rule 52 (ifBody -> statement .)
    TILDA           reduce using rule 52 (ifBody -> statement .)
    AND             reduce using rule 52 (ifBody -> statement .)
    OR              reduce using rule 52 (ifBody -> statement .)
    MINUS           reduce using rule 52 (ifBody -> statement .)
    TIMES           reduce using rule 52 (ifBody -> statement .)
    QUESTION_MARK   reduce using rule 52 (ifBody -> statement .)
    OPENING_PARENTHESES reduce using rule 52 (ifBody -> statement .)
    CONST_KW        reduce using rule 52 (ifBody -> statement .)
    TRUE_KW         reduce using rule 52 (ifBody -> statement .)
    FALSE_KW        reduce using rule 52 (ifBody -> statement .)
    CLOSING_BRACE   reduce using rule 52 (ifBody -> statement .)
    VOID_KW         reduce using rule 52 (ifBody -> statement .)
    NUMBER          reduce using rule 52 (ifBody -> statement .)
    BOOLEAN_KW      reduce using rule 52 (ifBody -> statement .)
    CHARACTER_KW    reduce using rule 52 (ifBody -> statement .)
    INTEGER_KW      reduce using rule 52 (ifBody -> statement .)
    CHAR_KW         reduce using rule 52 (ifBody -> statement .)
    BOOL_KW         reduce using rule 52 (ifBody -> statement .)
    INT_KW          reduce using rule 52 (ifBody -> statement .)
    $end            reduce using rule 52 (ifBody -> statement .)
    OTHER_KW        shift and go to state 181

  ! OTHER_KW        [ reduce using rule 52 (ifBody -> statement .) ]


state 180

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody . ifBody CLOSING_BRACE
    (52) ifBody -> . statement
    (53) ifBody -> . statement OTHER_KW statement
    (54) ifBody -> . SEMICOLON
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 177
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    ifBody                         shift and go to state 182
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    unaryop                        shift and go to state 47
    factor                         shift and go to state 57
    unaryExpression                shift and go to state 53
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 179
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    relExpression                  shift and go to state 60
    iterationPhrase                shift and go to state 108
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 181

    (53) ifBody -> statement OTHER_KW . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (55) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (56) returnPhrase -> . COMEBACK_KW SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (58) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (59) continue -> . CONTINUE_KW SEMICOLON
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PLUSPLUS
    (62) allExpression -> . alterable MINUSMINUS
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . LETTER numOrletter
    (100) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (101) alterable -> . alterable DOT LETTER
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp THEN_KW
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (112) logicOp -> . LOGICAL_AND
    (113) logicOp -> . LOGICAL_OR
    (114) logicOp -> . TILDA
    (115) logicOp -> . AND
    (116) logicOp -> . OR
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . MINUS
    (95) unaryop -> . TIMES
    (96) unaryop -> . QUESTION_MARK
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (103) inalterable -> . constant
    (104) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (109) constant -> . CONST_KW
    (110) constant -> . TRUE_KW
    (111) constant -> . FALSE_KW

    SEMICOLON       shift and go to state 102
    OPENING_BRACE   shift and go to state 109
    IF_KW           shift and go to state 112
    TILL_KW         shift and go to state 105
    COMEBACK_KW     shift and go to state 113
    GIVEBACK_KW     shift and go to state 107
    CONTINUE_KW     shift and go to state 100
    LETTER          shift and go to state 81
    LOGICAL_AND     shift and go to state 43
    LOGICAL_OR      shift and go to state 50
    TILDA           shift and go to state 49
    AND             shift and go to state 59
    OR              shift and go to state 48
    MINUS           shift and go to state 45
    TIMES           shift and go to state 63
    QUESTION_MARK   shift and go to state 58
    OPENING_PARENTHESES shift and go to state 55
    CONST_KW        shift and go to state 56
    TRUE_KW         shift and go to state 51
    FALSE_KW        shift and go to state 46

    selectPhrase                   shift and go to state 104
    constant                       shift and go to state 52
    alterable                      shift and go to state 78
    eachExpression                 shift and go to state 80
    allExpression                  shift and go to state 111
    unaryop                        shift and go to state 47
    factor                         shift and go to state 57
    unaryExpression                shift and go to state 53
    compoundPhrase                 shift and go to state 101
    statement                      shift and go to state 183
    returnPhrase                   shift and go to state 114
    phrase                         shift and go to state 106
    relExpression                  shift and go to state 60
    iterationPhrase                shift and go to state 108
    inalterable                    shift and go to state 62
    mathEXP                        shift and go to state 64
    continue                       shift and go to state 103
    logicOp                        shift and go to state 65

state 182

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 184


state 183

    (53) ifBody -> statement OTHER_KW statement .

    SEMICOLON       reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OPENING_BRACE   reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    IF_KW           reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    TILL_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    COMEBACK_KW     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    GIVEBACK_KW     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CONTINUE_KW     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    LETTER          reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    LOGICAL_AND     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    LOGICAL_OR      reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    TILDA           reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    AND             reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OR              reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    MINUS           reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    TIMES           reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    QUESTION_MARK   reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OPENING_PARENTHESES reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CONST_KW        reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    TRUE_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    FALSE_KW        reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CLOSING_BRACE   reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    VOID_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    NUMBER          reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    BOOLEAN_KW      reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CHARACTER_KW    reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    INTEGER_KW      reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CHAR_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    BOOL_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    INT_KW          reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    $end            reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OTHER_KW        reduce using rule 53 (ifBody -> statement OTHER_KW statement .)


state 184

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .

    OTHER_KW        reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    VOID_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    NUMBER          reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    LETTER          reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHAR_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOL_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INT_KW          reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    $end            reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    SEMICOLON       reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    IF_KW           reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TILL_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    LOGICAL_AND     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    LOGICAL_OR      reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TILDA           reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    AND             reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OR              reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    MINUS           reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TIMES           reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    QUESTION_MARK   reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONST_KW        reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TRUE_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    FALSE_KW        reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 20 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 20 resolved as shift
WARNING: shift/reduce conflict for OPENING_PARENTHESES in state 24 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 35 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 35 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 98 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 98 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 122 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 122 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for PERCENTAGE in state 134 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 149 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 149 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 149 resolved as shift
WARNING: shift/reduce conflict for OR in state 149 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 178 resolved as shift
WARNING: shift/reduce conflict for OPENING_BRACE in state 178 resolved as shift
WARNING: shift/reduce conflict for IF_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for TILL_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for COMEBACK_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for GIVEBACK_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 178 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 178 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 178 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 178 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 178 resolved as shift
WARNING: shift/reduce conflict for OPENING_PARENTHESES in state 178 resolved as shift
WARNING: shift/reduce conflict for CONST_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for TRUE_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for FALSE_KW in state 178 resolved as shift
WARNING: shift/reduce conflict for OTHER_KW in state 179 resolved as shift
WARNING: reduce/reduce conflict in state 140 resolved using rule (numOrletter -> LETTER)
WARNING: rejected rule (empty -> <empty>) in state 140
WARNING: reduce/reduce conflict in state 150 resolved using rule (allExpression -> alterable mathOp alterable)
WARNING: rejected rule (factor -> alterable) in state 150
WARNING: reduce/reduce conflict in state 177 resolved using rule (phrase -> SEMICOLON)
WARNING: rejected rule (ifBody -> SEMICOLON) in state 177
WARNING: Rule (ifBody -> SEMICOLON) is never reduced
