Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrletter -> NUMBER
Rule 3     numOrletter -> LETTER
Rule 4     numOrletter -> empty
Rule 5     list -> list declaration
Rule 6     list -> declaration
Rule 7     declaration -> function
Rule 8     declaration -> varDeclaration
Rule 9     varDeclaration -> type variableList SEMICOLON
Rule 10    ScopedVariableDec -> scopedSpecifier variableList
Rule 11    variableList -> variableList COMMA varInitialization
Rule 12    variableList -> varInitialization
Rule 13    varInitialization -> varForm
Rule 14    varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 15    varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
Rule 16    varForm -> LETTER numOrletter
Rule 17    scopedSpecifier -> STATIC_KW type
Rule 18    scopedSpecifier -> type
Rule 19    type -> BOOLEAN_KW
Rule 20    type -> CHARACTER_KW
Rule 21    type -> INTEGER_KW
Rule 22    type -> CHAR_KW
Rule 23    type -> BOOL_KW
Rule 24    type -> INT_KW
Rule 25    function -> VOID_KW
Rule 26    function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
Rule 27    function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> empty
Rule 30    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList COMMA paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> localDeclarations ScopedVariableDec
Rule 36    localDeclarations -> empty
Rule 37    paramId -> LETTER numOrletter
Rule 38    paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET
Rule 39    statement -> phrase
Rule 40    statement -> compoundPhrase
Rule 41    statement -> selectPhrase
Rule 42    statement -> iterationPhrase
Rule 43    statement -> returnPhrase
Rule 44    statement -> continue
Rule 45    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 46    statementList -> statementList statement
Rule 47    statementList -> empty
Rule 48    phrase -> allExpression SEMICOLON
Rule 49    phrase -> SEMICOLON
Rule 50    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
Rule 51    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
Rule 52    ifBody -> statement
Rule 53    ifBody -> statement OTHER_KW statement
Rule 54    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 55    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 56    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 57    returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON
Rule 58    continue -> CONTINUE_KW SEMICOLON
Rule 59    allExpression -> alterable mathOp allExpression
Rule 60    allExpression -> alterable PLUSPLUS
Rule 61    allExpression -> alterable MINUSMINUS
Rule 62    allExpression -> alterable mathOp alterable
Rule 63    mathOp -> EQUAL
Rule 64    mathOp -> PLUSEQUAL
Rule 65    mathOp -> MINUSEQUAL
Rule 66    mathOp -> TIMESEQUAL
Rule 67    mathOp -> DIVIDEEQUAL
Rule 68    eachExpression -> eachExpression LOGICAL_AND eachExpression
Rule 69    eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression
Rule 70    eachExpression -> LOGICAL_AND eachExpression
Rule 71    eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression
Rule 72    eachExpression -> eachExpression LOGICAL_OR eachExpression
Rule 73    eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression
Rule 74    eachExpression -> LOGICAL_OR eachExpression
Rule 75    eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression
Rule 76    eachExpression -> eachExpression TILDA eachExpression
Rule 77    eachExpression -> eachExpression TILDA THEN_KW eachExpression
Rule 78    eachExpression -> TILDA eachExpression
Rule 79    eachExpression -> eachExpression TILDA ELSE_KW eachExpression
Rule 80    eachExpression -> eachExpression AND eachExpression
Rule 81    eachExpression -> eachExpression AND THEN_KW eachExpression
Rule 82    eachExpression -> AND eachExpression
Rule 83    eachExpression -> eachExpression AND ELSE_KW eachExpression
Rule 84    eachExpression -> eachExpression OR eachExpression
Rule 85    eachExpression -> eachExpression OR THEN_KW eachExpression
Rule 86    eachExpression -> OR eachExpression
Rule 87    eachExpression -> eachExpression OR ELSE_KW eachExpression
Rule 88    eachExpression -> relExpression
Rule 89    relExpression -> mathEXP compareType mathEXP
Rule 90    relExpression -> mathEXP
Rule 91    compareType -> equal
Rule 92    compareType -> nonEqual
Rule 93    equal -> LESSEQUAL
Rule 94    equal -> GREATEREQUAL
Rule 95    equal -> EQUALEQUAL
Rule 96    nonEqual -> LESS_THAN
Rule 97    nonEqual -> GREATER_THAN
Rule 98    nonEqual -> NOTEQUAL
Rule 99    mathEXP -> mathEXP PLUS mathEXP
Rule 100   mathEXP -> mathEXP MINUS mathEXP
Rule 101   mathEXP -> mathEXP TIMES mathEXP
Rule 102   mathEXP -> mathEXP DIVIDE mathEXP
Rule 103   mathEXP -> mathEXP PERCENTAGE mathEXP
Rule 104   mathEXP -> unaryExpression
Rule 105   unaryExpression -> unaryop unaryExpression
Rule 106   unaryExpression -> factor
Rule 107   unaryop -> MINUS
Rule 108   unaryop -> TIMES
Rule 109   unaryop -> QUESTION_MARK
Rule 110   factor -> inalterable
Rule 111   factor -> alterable
Rule 112   alterable -> LETTER numOrletter
Rule 113   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 114   alterable -> alterable DOT LETTER
Rule 115   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 116   inalterable -> constant
Rule 117   inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 118   args -> arguments
Rule 119   args -> empty
Rule 120   arguments -> arguments COMMA allExpression
Rule 121   arguments -> allExpression
Rule 122   constant -> CONST_KW
Rule 123   constant -> TRUE_KW
Rule 124   constant -> FALSE_KW
Rule 125   empty -> <empty>

Terminals, with rules where they appear

AND                  : 80 81 82 83
BOOLEAN_KW           : 19
BOOL_KW              : 23
CHARACTER_KW         : 20
CHAR_KW              : 22
CLOSING_BRACE        : 26 45 51
CLOSING_BRACKET      : 15 38 113
CLOSING_PARENTHESES  : 14 26 27 50 51 54 115 117
COMEBACK_KW          : 55
COMMA                : 11 33 120
COMMENT              : 
CONST_KW             : 122
CONTINUE_KW          : 58
DIVIDE               : 102
DIVIDEEQUAL          : 67
DOT                  : 114
DOUBLE_DOT           : 14
ELSE_KW              : 71 75 79 83 87
EQUAL                : 63
EQUALEQUAL           : 95
FALSE_KW             : 124
GIVEBACK_KW          : 56 57
GREATEREQUAL         : 94
GREATER_THAN         : 97
IF_KW                : 50 51
INTEGER_KW           : 21
INT_KW               : 24
LESSEQUAL            : 93
LESS_THAN            : 96
LETTER               : 3 15 16 27 37 38 112 114 117
LOGICAL_AND          : 68 69 70 71
LOGICAL_OR           : 72 73 74 75
MINUS                : 100 107
MINUSEQUAL           : 65
MINUSMINUS           : 61
NOTEQUAL             : 98
NUMBER               : 2
OPENING_BRACE        : 26 45 51
OPENING_BRACKET      : 15 38 113
OPENING_PARENTHESES  : 14 26 27 50 51 54 115 117
OR                   : 84 85 86 87
OTHER_KW             : 53
PERCENTAGE           : 103
PLUS                 : 99
PLUSEQUAL            : 64
PLUSPLUS             : 60
QUESTION_MARK        : 109
SEMICOLON            : 9 30 48 49 55 56 57 58
STATIC_KW            : 17
THEN_KW              : 69 73 77 81 85
TILDA                : 76 77 78 79
TILL_KW              : 54
TIMES                : 101 108
TIMESEQUAL           : 66
TRUE_KW              : 123
VOID_KW              : 25
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 35
allExpression        : 48 56 59 113 115 120 121
alterable            : 59 60 61 62 62 111 113 114
args                 : 117
arguments            : 118 120
compareType          : 89
compoundPhrase       : 40
constant             : 116
continue             : 44
declaration          : 5 6
eachExpression       : 14 15 50 51 54 68 68 69 69 70 71 71 72 72 73 73 74 75 75 76 76 77 77 78 79 79 80 80 81 81 82 83 83 84 84 85 85 86 87 87
empty                : 4 29 36 47 119
equal                : 91
factor               : 106
function             : 7
ifBody               : 50 51 51
inalterable          : 110
iterationPhrase      : 42
list                 : 1 5
listOfParameters     : 28 30
localDeclarations    : 35 45
mathEXP              : 89 89 90 99 99 100 100 101 101 102 102 103 103
mathOp               : 59 62
nonEqual             : 92
numOrletter          : 15 16 26 27 37 38 57 112 117
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 26 27
phrase               : 39
program              : 0
relExpression        : 88
returnPhrase         : 43
scopedSpecifier      : 10
selectPhrase         : 41
statement            : 26 27 46 52 53 53 54
statementList        : 45 46
type                 : 9 17 18 27 32
unaryExpression      : 104 105
unaryop              : 105
varDeclaration       : 8
varForm              : 13 14
varInitialization    : 11 12
variableList         : 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (5) list -> . list declaration
    (6) list -> . declaration
    (7) declaration -> . function
    (8) declaration -> . varDeclaration
    (25) function -> . VOID_KW
    (26) function -> . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (27) function -> . type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> . type variableList SEMICOLON
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW
    (125) empty -> .

    VOID_KW         shift and go to state 4
    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11
    OPENING_PARENTHESES reduce using rule 125 (empty -> .)

    declaration                    shift and go to state 13
    empty                          shift and go to state 14
    program                        shift and go to state 15
    function                       shift and go to state 10
    varDeclaration                 shift and go to state 2
    type                           shift and go to state 1
    list                           shift and go to state 8
    numOrletter                    shift and go to state 17

state 1

    (27) function -> type . LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> type . variableList SEMICOLON
    (11) variableList -> . variableList COMMA varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> . LETTER numOrletter

    LETTER          shift and go to state 18

    varInitialization              shift and go to state 21
    varForm                        shift and go to state 19
    variableList                   shift and go to state 20

state 2

    (8) declaration -> varDeclaration .

    VOID_KW         reduce using rule 8 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 8 (declaration -> varDeclaration .)
    LETTER          reduce using rule 8 (declaration -> varDeclaration .)
    BOOLEAN_KW      reduce using rule 8 (declaration -> varDeclaration .)
    CHARACTER_KW    reduce using rule 8 (declaration -> varDeclaration .)
    INTEGER_KW      reduce using rule 8 (declaration -> varDeclaration .)
    CHAR_KW         reduce using rule 8 (declaration -> varDeclaration .)
    BOOL_KW         reduce using rule 8 (declaration -> varDeclaration .)
    INT_KW          reduce using rule 8 (declaration -> varDeclaration .)
    OPENING_PARENTHESES reduce using rule 8 (declaration -> varDeclaration .)
    $end            reduce using rule 8 (declaration -> varDeclaration .)


state 3

    (3) numOrletter -> LETTER .

    PLUSPLUS        reduce using rule 3 (numOrletter -> LETTER .)
    MINUSMINUS      reduce using rule 3 (numOrletter -> LETTER .)
    OPENING_BRACKET reduce using rule 3 (numOrletter -> LETTER .)
    DOT             reduce using rule 3 (numOrletter -> LETTER .)
    EQUAL           reduce using rule 3 (numOrletter -> LETTER .)
    PLUSEQUAL       reduce using rule 3 (numOrletter -> LETTER .)
    MINUSEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    TIMESEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    DIVIDEEQUAL     reduce using rule 3 (numOrletter -> LETTER .)
    OPENING_PARENTHESES reduce using rule 3 (numOrletter -> LETTER .)
    COMMA           reduce using rule 3 (numOrletter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 3 (numOrletter -> LETTER .)
    PLUS            reduce using rule 3 (numOrletter -> LETTER .)
    MINUS           reduce using rule 3 (numOrletter -> LETTER .)
    TIMES           reduce using rule 3 (numOrletter -> LETTER .)
    DIVIDE          reduce using rule 3 (numOrletter -> LETTER .)
    PERCENTAGE      reduce using rule 3 (numOrletter -> LETTER .)
    LESSEQUAL       reduce using rule 3 (numOrletter -> LETTER .)
    GREATEREQUAL    reduce using rule 3 (numOrletter -> LETTER .)
    EQUALEQUAL      reduce using rule 3 (numOrletter -> LETTER .)
    LESS_THAN       reduce using rule 3 (numOrletter -> LETTER .)
    GREATER_THAN    reduce using rule 3 (numOrletter -> LETTER .)
    NOTEQUAL        reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_BRACKET reduce using rule 3 (numOrletter -> LETTER .)
    LOGICAL_AND     reduce using rule 3 (numOrletter -> LETTER .)
    LOGICAL_OR      reduce using rule 3 (numOrletter -> LETTER .)
    TILDA           reduce using rule 3 (numOrletter -> LETTER .)
    AND             reduce using rule 3 (numOrletter -> LETTER .)
    OR              reduce using rule 3 (numOrletter -> LETTER .)
    DOUBLE_DOT      reduce using rule 3 (numOrletter -> LETTER .)
    STATIC_KW       reduce using rule 3 (numOrletter -> LETTER .)
    BOOLEAN_KW      reduce using rule 3 (numOrletter -> LETTER .)
    CHARACTER_KW    reduce using rule 3 (numOrletter -> LETTER .)
    INTEGER_KW      reduce using rule 3 (numOrletter -> LETTER .)
    CHAR_KW         reduce using rule 3 (numOrletter -> LETTER .)
    BOOL_KW         reduce using rule 3 (numOrletter -> LETTER .)
    INT_KW          reduce using rule 3 (numOrletter -> LETTER .)
    CLOSING_BRACE   reduce using rule 3 (numOrletter -> LETTER .)
    OPENING_BRACE   reduce using rule 3 (numOrletter -> LETTER .)
    IF_KW           reduce using rule 3 (numOrletter -> LETTER .)
    TILL_KW         reduce using rule 3 (numOrletter -> LETTER .)
    COMEBACK_KW     reduce using rule 3 (numOrletter -> LETTER .)
    GIVEBACK_KW     reduce using rule 3 (numOrletter -> LETTER .)
    CONTINUE_KW     reduce using rule 3 (numOrletter -> LETTER .)
    LETTER          reduce using rule 3 (numOrletter -> LETTER .)


state 4

    (25) function -> VOID_KW .

    VOID_KW         reduce using rule 25 (function -> VOID_KW .)
    NUMBER          reduce using rule 25 (function -> VOID_KW .)
    LETTER          reduce using rule 25 (function -> VOID_KW .)
    BOOLEAN_KW      reduce using rule 25 (function -> VOID_KW .)
    CHARACTER_KW    reduce using rule 25 (function -> VOID_KW .)
    INTEGER_KW      reduce using rule 25 (function -> VOID_KW .)
    CHAR_KW         reduce using rule 25 (function -> VOID_KW .)
    BOOL_KW         reduce using rule 25 (function -> VOID_KW .)
    INT_KW          reduce using rule 25 (function -> VOID_KW .)
    OPENING_PARENTHESES reduce using rule 25 (function -> VOID_KW .)
    $end            reduce using rule 25 (function -> VOID_KW .)


state 5

    (23) type -> BOOL_KW .

    LETTER          reduce using rule 23 (type -> BOOL_KW .)


state 6

    (19) type -> BOOLEAN_KW .

    LETTER          reduce using rule 19 (type -> BOOLEAN_KW .)


state 7

    (21) type -> INTEGER_KW .

    LETTER          reduce using rule 21 (type -> INTEGER_KW .)


state 8

    (1) program -> list .
    (5) list -> list . declaration
    (7) declaration -> . function
    (8) declaration -> . varDeclaration
    (25) function -> . VOID_KW
    (26) function -> . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (27) function -> . type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> . type variableList SEMICOLON
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW
    (125) empty -> .

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 4
    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11
    OPENING_PARENTHESES reduce using rule 125 (empty -> .)

    declaration                    shift and go to state 22
    empty                          shift and go to state 14
    function                       shift and go to state 10
    varDeclaration                 shift and go to state 2
    type                           shift and go to state 1
    numOrletter                    shift and go to state 17

state 9

    (22) type -> CHAR_KW .

    LETTER          reduce using rule 22 (type -> CHAR_KW .)


state 10

    (7) declaration -> function .

    VOID_KW         reduce using rule 7 (declaration -> function .)
    NUMBER          reduce using rule 7 (declaration -> function .)
    LETTER          reduce using rule 7 (declaration -> function .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> function .)
    CHARACTER_KW    reduce using rule 7 (declaration -> function .)
    INTEGER_KW      reduce using rule 7 (declaration -> function .)
    CHAR_KW         reduce using rule 7 (declaration -> function .)
    BOOL_KW         reduce using rule 7 (declaration -> function .)
    INT_KW          reduce using rule 7 (declaration -> function .)
    OPENING_PARENTHESES reduce using rule 7 (declaration -> function .)
    $end            reduce using rule 7 (declaration -> function .)


state 11

    (24) type -> INT_KW .

    LETTER          reduce using rule 24 (type -> INT_KW .)


state 12

    (2) numOrletter -> NUMBER .

    PLUSPLUS        reduce using rule 2 (numOrletter -> NUMBER .)
    MINUSMINUS      reduce using rule 2 (numOrletter -> NUMBER .)
    OPENING_BRACKET reduce using rule 2 (numOrletter -> NUMBER .)
    DOT             reduce using rule 2 (numOrletter -> NUMBER .)
    EQUAL           reduce using rule 2 (numOrletter -> NUMBER .)
    PLUSEQUAL       reduce using rule 2 (numOrletter -> NUMBER .)
    MINUSEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    TIMESEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    DIVIDEEQUAL     reduce using rule 2 (numOrletter -> NUMBER .)
    OPENING_PARENTHESES reduce using rule 2 (numOrletter -> NUMBER .)
    COMMA           reduce using rule 2 (numOrletter -> NUMBER .)
    SEMICOLON       reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_PARENTHESES reduce using rule 2 (numOrletter -> NUMBER .)
    PLUS            reduce using rule 2 (numOrletter -> NUMBER .)
    MINUS           reduce using rule 2 (numOrletter -> NUMBER .)
    TIMES           reduce using rule 2 (numOrletter -> NUMBER .)
    DIVIDE          reduce using rule 2 (numOrletter -> NUMBER .)
    PERCENTAGE      reduce using rule 2 (numOrletter -> NUMBER .)
    LESSEQUAL       reduce using rule 2 (numOrletter -> NUMBER .)
    GREATEREQUAL    reduce using rule 2 (numOrletter -> NUMBER .)
    EQUALEQUAL      reduce using rule 2 (numOrletter -> NUMBER .)
    LESS_THAN       reduce using rule 2 (numOrletter -> NUMBER .)
    GREATER_THAN    reduce using rule 2 (numOrletter -> NUMBER .)
    NOTEQUAL        reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_BRACKET reduce using rule 2 (numOrletter -> NUMBER .)
    LOGICAL_AND     reduce using rule 2 (numOrletter -> NUMBER .)
    LOGICAL_OR      reduce using rule 2 (numOrletter -> NUMBER .)
    TILDA           reduce using rule 2 (numOrletter -> NUMBER .)
    AND             reduce using rule 2 (numOrletter -> NUMBER .)
    OR              reduce using rule 2 (numOrletter -> NUMBER .)
    DOUBLE_DOT      reduce using rule 2 (numOrletter -> NUMBER .)
    STATIC_KW       reduce using rule 2 (numOrletter -> NUMBER .)
    BOOLEAN_KW      reduce using rule 2 (numOrletter -> NUMBER .)
    CHARACTER_KW    reduce using rule 2 (numOrletter -> NUMBER .)
    INTEGER_KW      reduce using rule 2 (numOrletter -> NUMBER .)
    CHAR_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    BOOL_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    INT_KW          reduce using rule 2 (numOrletter -> NUMBER .)
    CLOSING_BRACE   reduce using rule 2 (numOrletter -> NUMBER .)
    OPENING_BRACE   reduce using rule 2 (numOrletter -> NUMBER .)
    IF_KW           reduce using rule 2 (numOrletter -> NUMBER .)
    TILL_KW         reduce using rule 2 (numOrletter -> NUMBER .)
    COMEBACK_KW     reduce using rule 2 (numOrletter -> NUMBER .)
    GIVEBACK_KW     reduce using rule 2 (numOrletter -> NUMBER .)
    CONTINUE_KW     reduce using rule 2 (numOrletter -> NUMBER .)
    LETTER          reduce using rule 2 (numOrletter -> NUMBER .)


state 13

    (6) list -> declaration .

    VOID_KW         reduce using rule 6 (list -> declaration .)
    NUMBER          reduce using rule 6 (list -> declaration .)
    LETTER          reduce using rule 6 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 6 (list -> declaration .)
    CHARACTER_KW    reduce using rule 6 (list -> declaration .)
    INTEGER_KW      reduce using rule 6 (list -> declaration .)
    CHAR_KW         reduce using rule 6 (list -> declaration .)
    BOOL_KW         reduce using rule 6 (list -> declaration .)
    INT_KW          reduce using rule 6 (list -> declaration .)
    OPENING_PARENTHESES reduce using rule 6 (list -> declaration .)
    $end            reduce using rule 6 (list -> declaration .)


state 14

    (4) numOrletter -> empty .

    PLUSPLUS        reduce using rule 4 (numOrletter -> empty .)
    MINUSMINUS      reduce using rule 4 (numOrletter -> empty .)
    OPENING_BRACKET reduce using rule 4 (numOrletter -> empty .)
    DOT             reduce using rule 4 (numOrletter -> empty .)
    EQUAL           reduce using rule 4 (numOrletter -> empty .)
    PLUSEQUAL       reduce using rule 4 (numOrletter -> empty .)
    MINUSEQUAL      reduce using rule 4 (numOrletter -> empty .)
    TIMESEQUAL      reduce using rule 4 (numOrletter -> empty .)
    DIVIDEEQUAL     reduce using rule 4 (numOrletter -> empty .)
    OPENING_PARENTHESES reduce using rule 4 (numOrletter -> empty .)
    COMMA           reduce using rule 4 (numOrletter -> empty .)
    SEMICOLON       reduce using rule 4 (numOrletter -> empty .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrletter -> empty .)
    PLUS            reduce using rule 4 (numOrletter -> empty .)
    MINUS           reduce using rule 4 (numOrletter -> empty .)
    TIMES           reduce using rule 4 (numOrletter -> empty .)
    DIVIDE          reduce using rule 4 (numOrletter -> empty .)
    PERCENTAGE      reduce using rule 4 (numOrletter -> empty .)
    LESSEQUAL       reduce using rule 4 (numOrletter -> empty .)
    GREATEREQUAL    reduce using rule 4 (numOrletter -> empty .)
    EQUALEQUAL      reduce using rule 4 (numOrletter -> empty .)
    LESS_THAN       reduce using rule 4 (numOrletter -> empty .)
    GREATER_THAN    reduce using rule 4 (numOrletter -> empty .)
    NOTEQUAL        reduce using rule 4 (numOrletter -> empty .)
    CLOSING_BRACKET reduce using rule 4 (numOrletter -> empty .)
    LOGICAL_AND     reduce using rule 4 (numOrletter -> empty .)
    LOGICAL_OR      reduce using rule 4 (numOrletter -> empty .)
    TILDA           reduce using rule 4 (numOrletter -> empty .)
    AND             reduce using rule 4 (numOrletter -> empty .)
    OR              reduce using rule 4 (numOrletter -> empty .)
    DOUBLE_DOT      reduce using rule 4 (numOrletter -> empty .)
    STATIC_KW       reduce using rule 4 (numOrletter -> empty .)
    BOOLEAN_KW      reduce using rule 4 (numOrletter -> empty .)
    CHARACTER_KW    reduce using rule 4 (numOrletter -> empty .)
    INTEGER_KW      reduce using rule 4 (numOrletter -> empty .)
    CHAR_KW         reduce using rule 4 (numOrletter -> empty .)
    BOOL_KW         reduce using rule 4 (numOrletter -> empty .)
    INT_KW          reduce using rule 4 (numOrletter -> empty .)
    CLOSING_BRACE   reduce using rule 4 (numOrletter -> empty .)
    OPENING_BRACE   reduce using rule 4 (numOrletter -> empty .)
    IF_KW           reduce using rule 4 (numOrletter -> empty .)
    TILL_KW         reduce using rule 4 (numOrletter -> empty .)
    COMEBACK_KW     reduce using rule 4 (numOrletter -> empty .)
    GIVEBACK_KW     reduce using rule 4 (numOrletter -> empty .)
    CONTINUE_KW     reduce using rule 4 (numOrletter -> empty .)
    LETTER          reduce using rule 4 (numOrletter -> empty .)


state 15

    (0) S' -> program .



state 16

    (20) type -> CHARACTER_KW .

    LETTER          reduce using rule 20 (type -> CHARACTER_KW .)


state 17

    (26) function -> numOrletter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 23


state 18

    (27) function -> type LETTER . numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (15) varForm -> LETTER . numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (125) empty -> .

    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    OPENING_PARENTHESES reduce using rule 125 (empty -> .)
    OPENING_BRACKET reduce using rule 125 (empty -> .)
    DOUBLE_DOT      reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)

    empty                          shift and go to state 14
    numOrletter                    shift and go to state 24

state 19

    (13) varInitialization -> varForm .
    (14) varInitialization -> varForm . DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    SEMICOLON       reduce using rule 13 (varInitialization -> varForm .)
    COMMA           reduce using rule 13 (varInitialization -> varForm .)
    STATIC_KW       reduce using rule 13 (varInitialization -> varForm .)
    BOOLEAN_KW      reduce using rule 13 (varInitialization -> varForm .)
    CHARACTER_KW    reduce using rule 13 (varInitialization -> varForm .)
    INTEGER_KW      reduce using rule 13 (varInitialization -> varForm .)
    CHAR_KW         reduce using rule 13 (varInitialization -> varForm .)
    BOOL_KW         reduce using rule 13 (varInitialization -> varForm .)
    INT_KW          reduce using rule 13 (varInitialization -> varForm .)
    CLOSING_BRACE   reduce using rule 13 (varInitialization -> varForm .)
    OPENING_BRACE   reduce using rule 13 (varInitialization -> varForm .)
    IF_KW           reduce using rule 13 (varInitialization -> varForm .)
    TILL_KW         reduce using rule 13 (varInitialization -> varForm .)
    COMEBACK_KW     reduce using rule 13 (varInitialization -> varForm .)
    GIVEBACK_KW     reduce using rule 13 (varInitialization -> varForm .)
    CONTINUE_KW     reduce using rule 13 (varInitialization -> varForm .)
    LETTER          reduce using rule 13 (varInitialization -> varForm .)
    DOUBLE_DOT      shift and go to state 25


state 20

    (9) varDeclaration -> type variableList . SEMICOLON
    (11) variableList -> variableList . COMMA varInitialization

    SEMICOLON       shift and go to state 27
    COMMA           shift and go to state 26


state 21

    (12) variableList -> varInitialization .

    COMMA           reduce using rule 12 (variableList -> varInitialization .)
    STATIC_KW       reduce using rule 12 (variableList -> varInitialization .)
    BOOLEAN_KW      reduce using rule 12 (variableList -> varInitialization .)
    CHARACTER_KW    reduce using rule 12 (variableList -> varInitialization .)
    INTEGER_KW      reduce using rule 12 (variableList -> varInitialization .)
    CHAR_KW         reduce using rule 12 (variableList -> varInitialization .)
    BOOL_KW         reduce using rule 12 (variableList -> varInitialization .)
    INT_KW          reduce using rule 12 (variableList -> varInitialization .)
    CLOSING_BRACE   reduce using rule 12 (variableList -> varInitialization .)
    SEMICOLON       reduce using rule 12 (variableList -> varInitialization .)
    OPENING_BRACE   reduce using rule 12 (variableList -> varInitialization .)
    IF_KW           reduce using rule 12 (variableList -> varInitialization .)
    TILL_KW         reduce using rule 12 (variableList -> varInitialization .)
    COMEBACK_KW     reduce using rule 12 (variableList -> varInitialization .)
    GIVEBACK_KW     reduce using rule 12 (variableList -> varInitialization .)
    CONTINUE_KW     reduce using rule 12 (variableList -> varInitialization .)
    LETTER          reduce using rule 12 (variableList -> varInitialization .)


state 22

    (5) list -> list declaration .

    VOID_KW         reduce using rule 5 (list -> list declaration .)
    NUMBER          reduce using rule 5 (list -> list declaration .)
    LETTER          reduce using rule 5 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> list declaration .)
    INTEGER_KW      reduce using rule 5 (list -> list declaration .)
    CHAR_KW         reduce using rule 5 (list -> list declaration .)
    BOOL_KW         reduce using rule 5 (list -> list declaration .)
    INT_KW          reduce using rule 5 (list -> list declaration .)
    OPENING_PARENTHESES reduce using rule 5 (list -> list declaration .)
    $end            reduce using rule 5 (list -> list declaration .)


state 23

    (26) function -> numOrletter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (125) empty -> .
    (32) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11

    type                           shift and go to state 28
    paramTypeList                  shift and go to state 30
    empty                          shift and go to state 31
    parameter                      shift and go to state 29
    listOfParameters               shift and go to state 32

state 24

    (27) function -> type LETTER numOrletter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (15) varForm -> LETTER numOrletter . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER numOrletter .

    OPENING_PARENTHESES shift and go to state 34
    OPENING_BRACKET shift and go to state 33
    DOUBLE_DOT      reduce using rule 16 (varForm -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 16 (varForm -> LETTER numOrletter .)
    COMMA           reduce using rule 16 (varForm -> LETTER numOrletter .)


state 25

    (14) varInitialization -> varForm DOUBLE_DOT . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 35


state 26

    (11) variableList -> variableList COMMA . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> . LETTER numOrletter

    LETTER          shift and go to state 36

    varInitialization              shift and go to state 37
    varForm                        shift and go to state 19

state 27

    (9) varDeclaration -> type variableList SEMICOLON .

    VOID_KW         reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    NUMBER          reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    LETTER          reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    CHAR_KW         reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    BOOL_KW         reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    INT_KW          reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    $end            reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)


state 28

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList COMMA paramId
    (34) paramList -> . paramId
    (37) paramId -> . LETTER numOrletter
    (38) paramId -> . LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 39

    paramId                        shift and go to state 38
    paramList                      shift and go to state 40

state 29

    (26) function -> numOrletter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE

    CLOSING_PARENTHESES shift and go to state 41


state 30

    (31) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 31 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 31 (listOfParameters -> paramTypeList .)


state 31

    (29) parameter -> empty .

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> empty .)


state 32

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 42


state 33

    (15) varForm -> LETTER numOrletter OPENING_BRACKET . eachExpression CLOSING_BRACKET
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 45

state 34

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (28) parameter -> . listOfParameters
    (29) parameter -> . empty
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (125) empty -> .
    (32) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11

    type                           shift and go to state 28
    paramTypeList                  shift and go to state 30
    empty                          shift and go to state 31
    parameter                      shift and go to state 65
    listOfParameters               shift and go to state 32

state 35

    (14) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    constant                       shift and go to state 50
    relExpression                  shift and go to state 49
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 66

state 36

    (15) varForm -> LETTER . numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (125) empty -> .

  ! shift/reduce conflict for LETTER resolved as shift
    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    OPENING_BRACKET reduce using rule 125 (empty -> .)
    DOUBLE_DOT      reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    STATIC_KW       reduce using rule 125 (empty -> .)
    BOOLEAN_KW      reduce using rule 125 (empty -> .)
    CHARACTER_KW    reduce using rule 125 (empty -> .)
    INTEGER_KW      reduce using rule 125 (empty -> .)
    CHAR_KW         reduce using rule 125 (empty -> .)
    BOOL_KW         reduce using rule 125 (empty -> .)
    INT_KW          reduce using rule 125 (empty -> .)
    CLOSING_BRACE   reduce using rule 125 (empty -> .)
    OPENING_BRACE   reduce using rule 125 (empty -> .)
    IF_KW           reduce using rule 125 (empty -> .)
    TILL_KW         reduce using rule 125 (empty -> .)
    COMEBACK_KW     reduce using rule 125 (empty -> .)
    GIVEBACK_KW     reduce using rule 125 (empty -> .)
    CONTINUE_KW     reduce using rule 125 (empty -> .)

  ! LETTER          [ reduce using rule 125 (empty -> .) ]

    empty                          shift and go to state 14
    numOrletter                    shift and go to state 67

state 37

    (11) variableList -> variableList COMMA varInitialization .

    COMMA           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    STATIC_KW       reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    BOOLEAN_KW      reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CHARACTER_KW    reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    INTEGER_KW      reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CHAR_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    BOOL_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    INT_KW          reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CLOSING_BRACE   reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    SEMICOLON       reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    OPENING_BRACE   reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    IF_KW           reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    TILL_KW         reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    COMEBACK_KW     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    GIVEBACK_KW     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    CONTINUE_KW     reduce using rule 11 (variableList -> variableList COMMA varInitialization .)
    LETTER          reduce using rule 11 (variableList -> variableList COMMA varInitialization .)


state 38

    (34) paramList -> paramId .

    COMMA           reduce using rule 34 (paramList -> paramId .)
    SEMICOLON       reduce using rule 34 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 34 (paramList -> paramId .)


state 39

    (37) paramId -> LETTER . numOrletter
    (38) paramId -> LETTER . numOrletter OPENING_BRACKET CLOSING_BRACKET
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (125) empty -> .

    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    OPENING_BRACKET reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)

    empty                          shift and go to state 14
    numOrletter                    shift and go to state 68

state 40

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . COMMA paramId

    SEMICOLON       reduce using rule 32 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 32 (paramTypeList -> type paramList .)
    COMMA           shift and go to state 69


state 41

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE statement CLOSING_BRACE

    OPENING_BRACE   shift and go to state 70


state 42

    (30) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (32) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11

    type                           shift and go to state 28
    paramTypeList                  shift and go to state 71

state 43

    (122) constant -> CONST_KW .

    PLUS            reduce using rule 122 (constant -> CONST_KW .)
    MINUS           reduce using rule 122 (constant -> CONST_KW .)
    TIMES           reduce using rule 122 (constant -> CONST_KW .)
    DIVIDE          reduce using rule 122 (constant -> CONST_KW .)
    PERCENTAGE      reduce using rule 122 (constant -> CONST_KW .)
    LESSEQUAL       reduce using rule 122 (constant -> CONST_KW .)
    GREATEREQUAL    reduce using rule 122 (constant -> CONST_KW .)
    EQUALEQUAL      reduce using rule 122 (constant -> CONST_KW .)
    LESS_THAN       reduce using rule 122 (constant -> CONST_KW .)
    GREATER_THAN    reduce using rule 122 (constant -> CONST_KW .)
    NOTEQUAL        reduce using rule 122 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 122 (constant -> CONST_KW .)
    LOGICAL_AND     reduce using rule 122 (constant -> CONST_KW .)
    LOGICAL_OR      reduce using rule 122 (constant -> CONST_KW .)
    TILDA           reduce using rule 122 (constant -> CONST_KW .)
    AND             reduce using rule 122 (constant -> CONST_KW .)
    OR              reduce using rule 122 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 122 (constant -> CONST_KW .)


state 44

    (89) relExpression -> mathEXP . compareType mathEXP
    (90) relExpression -> mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP
    (91) compareType -> . equal
    (92) compareType -> . nonEqual
    (93) equal -> . LESSEQUAL
    (94) equal -> . GREATEREQUAL
    (95) equal -> . EQUALEQUAL
    (96) nonEqual -> . LESS_THAN
    (97) nonEqual -> . GREATER_THAN
    (98) nonEqual -> . NOTEQUAL

    LOGICAL_AND     reduce using rule 90 (relExpression -> mathEXP .)
    LOGICAL_OR      reduce using rule 90 (relExpression -> mathEXP .)
    TILDA           reduce using rule 90 (relExpression -> mathEXP .)
    AND             reduce using rule 90 (relExpression -> mathEXP .)
    OR              reduce using rule 90 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 90 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 90 (relExpression -> mathEXP .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 77
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 72
    PERCENTAGE      shift and go to state 81
    LESSEQUAL       shift and go to state 73
    GREATEREQUAL    shift and go to state 82
    EQUALEQUAL      shift and go to state 74
    LESS_THAN       shift and go to state 83
    GREATER_THAN    shift and go to state 84
    NOTEQUAL        shift and go to state 76

    nonEqual                       shift and go to state 79
    compareType                    shift and go to state 80
    equal                          shift and go to state 78

state 45

    (15) varForm -> LETTER numOrletter OPENING_BRACKET eachExpression . CLOSING_BRACKET
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_BRACKET shift and go to state 88
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91


state 46

    (117) inalterable -> LETTER . numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (125) empty -> .

    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    OPENING_PARENTHESES reduce using rule 125 (empty -> .)
    OPENING_BRACKET reduce using rule 125 (empty -> .)
    DOT             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    TIMES           reduce using rule 125 (empty -> .)
    DIVIDE          reduce using rule 125 (empty -> .)
    PERCENTAGE      reduce using rule 125 (empty -> .)
    LESSEQUAL       reduce using rule 125 (empty -> .)
    GREATEREQUAL    reduce using rule 125 (empty -> .)
    EQUALEQUAL      reduce using rule 125 (empty -> .)
    LESS_THAN       reduce using rule 125 (empty -> .)
    GREATER_THAN    reduce using rule 125 (empty -> .)
    NOTEQUAL        reduce using rule 125 (empty -> .)
    CLOSING_BRACKET reduce using rule 125 (empty -> .)
    LOGICAL_AND     reduce using rule 125 (empty -> .)
    LOGICAL_OR      reduce using rule 125 (empty -> .)
    TILDA           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)

    empty                          shift and go to state 14
    numOrletter                    shift and go to state 92

state 47

    (78) eachExpression -> TILDA . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 93

state 48

    (123) constant -> TRUE_KW .

    PLUS            reduce using rule 123 (constant -> TRUE_KW .)
    MINUS           reduce using rule 123 (constant -> TRUE_KW .)
    TIMES           reduce using rule 123 (constant -> TRUE_KW .)
    DIVIDE          reduce using rule 123 (constant -> TRUE_KW .)
    PERCENTAGE      reduce using rule 123 (constant -> TRUE_KW .)
    LESSEQUAL       reduce using rule 123 (constant -> TRUE_KW .)
    GREATEREQUAL    reduce using rule 123 (constant -> TRUE_KW .)
    EQUALEQUAL      reduce using rule 123 (constant -> TRUE_KW .)
    LESS_THAN       reduce using rule 123 (constant -> TRUE_KW .)
    GREATER_THAN    reduce using rule 123 (constant -> TRUE_KW .)
    NOTEQUAL        reduce using rule 123 (constant -> TRUE_KW .)
    CLOSING_BRACKET reduce using rule 123 (constant -> TRUE_KW .)
    LOGICAL_AND     reduce using rule 123 (constant -> TRUE_KW .)
    LOGICAL_OR      reduce using rule 123 (constant -> TRUE_KW .)
    TILDA           reduce using rule 123 (constant -> TRUE_KW .)
    AND             reduce using rule 123 (constant -> TRUE_KW .)
    OR              reduce using rule 123 (constant -> TRUE_KW .)
    CLOSING_PARENTHESES reduce using rule 123 (constant -> TRUE_KW .)


state 49

    (88) eachExpression -> relExpression .

    LOGICAL_AND     reduce using rule 88 (eachExpression -> relExpression .)
    LOGICAL_OR      reduce using rule 88 (eachExpression -> relExpression .)
    TILDA           reduce using rule 88 (eachExpression -> relExpression .)
    AND             reduce using rule 88 (eachExpression -> relExpression .)
    OR              reduce using rule 88 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 88 (eachExpression -> relExpression .)
    CLOSING_PARENTHESES reduce using rule 88 (eachExpression -> relExpression .)


state 50

    (116) inalterable -> constant .

    PLUS            reduce using rule 116 (inalterable -> constant .)
    MINUS           reduce using rule 116 (inalterable -> constant .)
    TIMES           reduce using rule 116 (inalterable -> constant .)
    DIVIDE          reduce using rule 116 (inalterable -> constant .)
    PERCENTAGE      reduce using rule 116 (inalterable -> constant .)
    LESSEQUAL       reduce using rule 116 (inalterable -> constant .)
    GREATEREQUAL    reduce using rule 116 (inalterable -> constant .)
    EQUALEQUAL      reduce using rule 116 (inalterable -> constant .)
    LESS_THAN       reduce using rule 116 (inalterable -> constant .)
    GREATER_THAN    reduce using rule 116 (inalterable -> constant .)
    NOTEQUAL        reduce using rule 116 (inalterable -> constant .)
    LOGICAL_AND     reduce using rule 116 (inalterable -> constant .)
    LOGICAL_OR      reduce using rule 116 (inalterable -> constant .)
    TILDA           reduce using rule 116 (inalterable -> constant .)
    AND             reduce using rule 116 (inalterable -> constant .)
    OR              reduce using rule 116 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 116 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 116 (inalterable -> constant .)


state 51

    (82) eachExpression -> AND . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 94

state 52

    (86) eachExpression -> OR . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 95

state 53

    (70) eachExpression -> LOGICAL_AND . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 96

state 54

    (104) mathEXP -> unaryExpression .

    PLUS            reduce using rule 104 (mathEXP -> unaryExpression .)
    MINUS           reduce using rule 104 (mathEXP -> unaryExpression .)
    TIMES           reduce using rule 104 (mathEXP -> unaryExpression .)
    DIVIDE          reduce using rule 104 (mathEXP -> unaryExpression .)
    PERCENTAGE      reduce using rule 104 (mathEXP -> unaryExpression .)
    LESSEQUAL       reduce using rule 104 (mathEXP -> unaryExpression .)
    GREATEREQUAL    reduce using rule 104 (mathEXP -> unaryExpression .)
    EQUALEQUAL      reduce using rule 104 (mathEXP -> unaryExpression .)
    LESS_THAN       reduce using rule 104 (mathEXP -> unaryExpression .)
    GREATER_THAN    reduce using rule 104 (mathEXP -> unaryExpression .)
    NOTEQUAL        reduce using rule 104 (mathEXP -> unaryExpression .)
    LOGICAL_AND     reduce using rule 104 (mathEXP -> unaryExpression .)
    LOGICAL_OR      reduce using rule 104 (mathEXP -> unaryExpression .)
    TILDA           reduce using rule 104 (mathEXP -> unaryExpression .)
    AND             reduce using rule 104 (mathEXP -> unaryExpression .)
    OR              reduce using rule 104 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 104 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 104 (mathEXP -> unaryExpression .)


state 55

    (115) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    LETTER          shift and go to state 99

    alterable                      shift and go to state 97
    allExpression                  shift and go to state 98

state 56

    (110) factor -> inalterable .

    PLUS            reduce using rule 110 (factor -> inalterable .)
    MINUS           reduce using rule 110 (factor -> inalterable .)
    TIMES           reduce using rule 110 (factor -> inalterable .)
    DIVIDE          reduce using rule 110 (factor -> inalterable .)
    PERCENTAGE      reduce using rule 110 (factor -> inalterable .)
    LESSEQUAL       reduce using rule 110 (factor -> inalterable .)
    GREATEREQUAL    reduce using rule 110 (factor -> inalterable .)
    EQUALEQUAL      reduce using rule 110 (factor -> inalterable .)
    LESS_THAN       reduce using rule 110 (factor -> inalterable .)
    GREATER_THAN    reduce using rule 110 (factor -> inalterable .)
    NOTEQUAL        reduce using rule 110 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 110 (factor -> inalterable .)
    LOGICAL_AND     reduce using rule 110 (factor -> inalterable .)
    LOGICAL_OR      reduce using rule 110 (factor -> inalterable .)
    TILDA           reduce using rule 110 (factor -> inalterable .)
    AND             reduce using rule 110 (factor -> inalterable .)
    OR              reduce using rule 110 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 110 (factor -> inalterable .)


state 57

    (108) unaryop -> TIMES .

    MINUS           reduce using rule 108 (unaryop -> TIMES .)
    TIMES           reduce using rule 108 (unaryop -> TIMES .)
    QUESTION_MARK   reduce using rule 108 (unaryop -> TIMES .)
    OPENING_PARENTHESES reduce using rule 108 (unaryop -> TIMES .)
    LETTER          reduce using rule 108 (unaryop -> TIMES .)
    CONST_KW        reduce using rule 108 (unaryop -> TIMES .)
    TRUE_KW         reduce using rule 108 (unaryop -> TIMES .)
    FALSE_KW        reduce using rule 108 (unaryop -> TIMES .)


state 58

    (111) factor -> alterable .
    (113) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> alterable . DOT LETTER

    PLUS            reduce using rule 111 (factor -> alterable .)
    MINUS           reduce using rule 111 (factor -> alterable .)
    TIMES           reduce using rule 111 (factor -> alterable .)
    DIVIDE          reduce using rule 111 (factor -> alterable .)
    PERCENTAGE      reduce using rule 111 (factor -> alterable .)
    LESSEQUAL       reduce using rule 111 (factor -> alterable .)
    GREATEREQUAL    reduce using rule 111 (factor -> alterable .)
    EQUALEQUAL      reduce using rule 111 (factor -> alterable .)
    LESS_THAN       reduce using rule 111 (factor -> alterable .)
    GREATER_THAN    reduce using rule 111 (factor -> alterable .)
    NOTEQUAL        reduce using rule 111 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 111 (factor -> alterable .)
    LOGICAL_AND     reduce using rule 111 (factor -> alterable .)
    LOGICAL_OR      reduce using rule 111 (factor -> alterable .)
    TILDA           reduce using rule 111 (factor -> alterable .)
    AND             reduce using rule 111 (factor -> alterable .)
    OR              reduce using rule 111 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 111 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 101
    DOT             shift and go to state 100


state 59

    (107) unaryop -> MINUS .

    MINUS           reduce using rule 107 (unaryop -> MINUS .)
    TIMES           reduce using rule 107 (unaryop -> MINUS .)
    QUESTION_MARK   reduce using rule 107 (unaryop -> MINUS .)
    OPENING_PARENTHESES reduce using rule 107 (unaryop -> MINUS .)
    LETTER          reduce using rule 107 (unaryop -> MINUS .)
    CONST_KW        reduce using rule 107 (unaryop -> MINUS .)
    TRUE_KW         reduce using rule 107 (unaryop -> MINUS .)
    FALSE_KW        reduce using rule 107 (unaryop -> MINUS .)


state 60

    (109) unaryop -> QUESTION_MARK .

    MINUS           reduce using rule 109 (unaryop -> QUESTION_MARK .)
    TIMES           reduce using rule 109 (unaryop -> QUESTION_MARK .)
    QUESTION_MARK   reduce using rule 109 (unaryop -> QUESTION_MARK .)
    OPENING_PARENTHESES reduce using rule 109 (unaryop -> QUESTION_MARK .)
    LETTER          reduce using rule 109 (unaryop -> QUESTION_MARK .)
    CONST_KW        reduce using rule 109 (unaryop -> QUESTION_MARK .)
    TRUE_KW         reduce using rule 109 (unaryop -> QUESTION_MARK .)
    FALSE_KW        reduce using rule 109 (unaryop -> QUESTION_MARK .)


state 61

    (105) unaryExpression -> unaryop . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 102

state 62

    (74) eachExpression -> LOGICAL_OR . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 103

state 63

    (124) constant -> FALSE_KW .

    PLUS            reduce using rule 124 (constant -> FALSE_KW .)
    MINUS           reduce using rule 124 (constant -> FALSE_KW .)
    TIMES           reduce using rule 124 (constant -> FALSE_KW .)
    DIVIDE          reduce using rule 124 (constant -> FALSE_KW .)
    PERCENTAGE      reduce using rule 124 (constant -> FALSE_KW .)
    LESSEQUAL       reduce using rule 124 (constant -> FALSE_KW .)
    GREATEREQUAL    reduce using rule 124 (constant -> FALSE_KW .)
    EQUALEQUAL      reduce using rule 124 (constant -> FALSE_KW .)
    LESS_THAN       reduce using rule 124 (constant -> FALSE_KW .)
    GREATER_THAN    reduce using rule 124 (constant -> FALSE_KW .)
    NOTEQUAL        reduce using rule 124 (constant -> FALSE_KW .)
    CLOSING_BRACKET reduce using rule 124 (constant -> FALSE_KW .)
    LOGICAL_AND     reduce using rule 124 (constant -> FALSE_KW .)
    LOGICAL_OR      reduce using rule 124 (constant -> FALSE_KW .)
    TILDA           reduce using rule 124 (constant -> FALSE_KW .)
    AND             reduce using rule 124 (constant -> FALSE_KW .)
    OR              reduce using rule 124 (constant -> FALSE_KW .)
    CLOSING_PARENTHESES reduce using rule 124 (constant -> FALSE_KW .)


state 64

    (106) unaryExpression -> factor .

    PLUS            reduce using rule 106 (unaryExpression -> factor .)
    MINUS           reduce using rule 106 (unaryExpression -> factor .)
    TIMES           reduce using rule 106 (unaryExpression -> factor .)
    DIVIDE          reduce using rule 106 (unaryExpression -> factor .)
    PERCENTAGE      reduce using rule 106 (unaryExpression -> factor .)
    LESSEQUAL       reduce using rule 106 (unaryExpression -> factor .)
    GREATEREQUAL    reduce using rule 106 (unaryExpression -> factor .)
    EQUALEQUAL      reduce using rule 106 (unaryExpression -> factor .)
    LESS_THAN       reduce using rule 106 (unaryExpression -> factor .)
    GREATER_THAN    reduce using rule 106 (unaryExpression -> factor .)
    NOTEQUAL        reduce using rule 106 (unaryExpression -> factor .)
    LOGICAL_AND     reduce using rule 106 (unaryExpression -> factor .)
    LOGICAL_OR      reduce using rule 106 (unaryExpression -> factor .)
    TILDA           reduce using rule 106 (unaryExpression -> factor .)
    AND             reduce using rule 106 (unaryExpression -> factor .)
    OR              reduce using rule 106 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 106 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 106 (unaryExpression -> factor .)


state 65

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 104


state 66

    (14) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 105
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91


state 67

    (15) varForm -> LETTER numOrletter . OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> LETTER numOrletter .

    OPENING_BRACKET shift and go to state 33
    DOUBLE_DOT      reduce using rule 16 (varForm -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 16 (varForm -> LETTER numOrletter .)
    COMMA           reduce using rule 16 (varForm -> LETTER numOrletter .)
    STATIC_KW       reduce using rule 16 (varForm -> LETTER numOrletter .)
    BOOLEAN_KW      reduce using rule 16 (varForm -> LETTER numOrletter .)
    CHARACTER_KW    reduce using rule 16 (varForm -> LETTER numOrletter .)
    INTEGER_KW      reduce using rule 16 (varForm -> LETTER numOrletter .)
    CHAR_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    BOOL_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    INT_KW          reduce using rule 16 (varForm -> LETTER numOrletter .)
    CLOSING_BRACE   reduce using rule 16 (varForm -> LETTER numOrletter .)
    OPENING_BRACE   reduce using rule 16 (varForm -> LETTER numOrletter .)
    IF_KW           reduce using rule 16 (varForm -> LETTER numOrletter .)
    TILL_KW         reduce using rule 16 (varForm -> LETTER numOrletter .)
    COMEBACK_KW     reduce using rule 16 (varForm -> LETTER numOrletter .)
    GIVEBACK_KW     reduce using rule 16 (varForm -> LETTER numOrletter .)
    CONTINUE_KW     reduce using rule 16 (varForm -> LETTER numOrletter .)
    LETTER          reduce using rule 16 (varForm -> LETTER numOrletter .)


state 68

    (37) paramId -> LETTER numOrletter .
    (38) paramId -> LETTER numOrletter . OPENING_BRACKET CLOSING_BRACKET

    COMMA           reduce using rule 37 (paramId -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 37 (paramId -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> LETTER numOrletter .)
    OPENING_BRACKET shift and go to state 106


state 69

    (33) paramList -> paramList COMMA . paramId
    (37) paramId -> . LETTER numOrletter
    (38) paramId -> . LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 39

    paramId                        shift and go to state 107

state 70

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    alterable                      shift and go to state 97
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    compoundPhrase                 shift and go to state 110
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 121
    iterationPhrase                shift and go to state 109

state 71

    (30) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 72

    (102) mathEXP -> mathEXP DIVIDE . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 123
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 54

state 73

    (93) equal -> LESSEQUAL .

    MINUS           reduce using rule 93 (equal -> LESSEQUAL .)
    TIMES           reduce using rule 93 (equal -> LESSEQUAL .)
    QUESTION_MARK   reduce using rule 93 (equal -> LESSEQUAL .)
    OPENING_PARENTHESES reduce using rule 93 (equal -> LESSEQUAL .)
    LETTER          reduce using rule 93 (equal -> LESSEQUAL .)
    CONST_KW        reduce using rule 93 (equal -> LESSEQUAL .)
    TRUE_KW         reduce using rule 93 (equal -> LESSEQUAL .)
    FALSE_KW        reduce using rule 93 (equal -> LESSEQUAL .)


state 74

    (95) equal -> EQUALEQUAL .

    MINUS           reduce using rule 95 (equal -> EQUALEQUAL .)
    TIMES           reduce using rule 95 (equal -> EQUALEQUAL .)
    QUESTION_MARK   reduce using rule 95 (equal -> EQUALEQUAL .)
    OPENING_PARENTHESES reduce using rule 95 (equal -> EQUALEQUAL .)
    LETTER          reduce using rule 95 (equal -> EQUALEQUAL .)
    CONST_KW        reduce using rule 95 (equal -> EQUALEQUAL .)
    TRUE_KW         reduce using rule 95 (equal -> EQUALEQUAL .)
    FALSE_KW        reduce using rule 95 (equal -> EQUALEQUAL .)


state 75

    (101) mathEXP -> mathEXP TIMES . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 124
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 54

state 76

    (98) nonEqual -> NOTEQUAL .

    MINUS           reduce using rule 98 (nonEqual -> NOTEQUAL .)
    TIMES           reduce using rule 98 (nonEqual -> NOTEQUAL .)
    QUESTION_MARK   reduce using rule 98 (nonEqual -> NOTEQUAL .)
    OPENING_PARENTHESES reduce using rule 98 (nonEqual -> NOTEQUAL .)
    LETTER          reduce using rule 98 (nonEqual -> NOTEQUAL .)
    CONST_KW        reduce using rule 98 (nonEqual -> NOTEQUAL .)
    TRUE_KW         reduce using rule 98 (nonEqual -> NOTEQUAL .)
    FALSE_KW        reduce using rule 98 (nonEqual -> NOTEQUAL .)


state 77

    (100) mathEXP -> mathEXP MINUS . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 125
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 54

state 78

    (91) compareType -> equal .

    MINUS           reduce using rule 91 (compareType -> equal .)
    TIMES           reduce using rule 91 (compareType -> equal .)
    QUESTION_MARK   reduce using rule 91 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 91 (compareType -> equal .)
    LETTER          reduce using rule 91 (compareType -> equal .)
    CONST_KW        reduce using rule 91 (compareType -> equal .)
    TRUE_KW         reduce using rule 91 (compareType -> equal .)
    FALSE_KW        reduce using rule 91 (compareType -> equal .)


state 79

    (92) compareType -> nonEqual .

    MINUS           reduce using rule 92 (compareType -> nonEqual .)
    TIMES           reduce using rule 92 (compareType -> nonEqual .)
    QUESTION_MARK   reduce using rule 92 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 92 (compareType -> nonEqual .)
    LETTER          reduce using rule 92 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 92 (compareType -> nonEqual .)
    TRUE_KW         reduce using rule 92 (compareType -> nonEqual .)
    FALSE_KW        reduce using rule 92 (compareType -> nonEqual .)


state 80

    (89) relExpression -> mathEXP compareType . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 126
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 54

state 81

    (103) mathEXP -> mathEXP PERCENTAGE . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 127
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 54

state 82

    (94) equal -> GREATEREQUAL .

    MINUS           reduce using rule 94 (equal -> GREATEREQUAL .)
    TIMES           reduce using rule 94 (equal -> GREATEREQUAL .)
    QUESTION_MARK   reduce using rule 94 (equal -> GREATEREQUAL .)
    OPENING_PARENTHESES reduce using rule 94 (equal -> GREATEREQUAL .)
    LETTER          reduce using rule 94 (equal -> GREATEREQUAL .)
    CONST_KW        reduce using rule 94 (equal -> GREATEREQUAL .)
    TRUE_KW         reduce using rule 94 (equal -> GREATEREQUAL .)
    FALSE_KW        reduce using rule 94 (equal -> GREATEREQUAL .)


state 83

    (96) nonEqual -> LESS_THAN .

    MINUS           reduce using rule 96 (nonEqual -> LESS_THAN .)
    TIMES           reduce using rule 96 (nonEqual -> LESS_THAN .)
    QUESTION_MARK   reduce using rule 96 (nonEqual -> LESS_THAN .)
    OPENING_PARENTHESES reduce using rule 96 (nonEqual -> LESS_THAN .)
    LETTER          reduce using rule 96 (nonEqual -> LESS_THAN .)
    CONST_KW        reduce using rule 96 (nonEqual -> LESS_THAN .)
    TRUE_KW         reduce using rule 96 (nonEqual -> LESS_THAN .)
    FALSE_KW        reduce using rule 96 (nonEqual -> LESS_THAN .)


state 84

    (97) nonEqual -> GREATER_THAN .

    MINUS           reduce using rule 97 (nonEqual -> GREATER_THAN .)
    TIMES           reduce using rule 97 (nonEqual -> GREATER_THAN .)
    QUESTION_MARK   reduce using rule 97 (nonEqual -> GREATER_THAN .)
    OPENING_PARENTHESES reduce using rule 97 (nonEqual -> GREATER_THAN .)
    LETTER          reduce using rule 97 (nonEqual -> GREATER_THAN .)
    CONST_KW        reduce using rule 97 (nonEqual -> GREATER_THAN .)
    TRUE_KW         reduce using rule 97 (nonEqual -> GREATER_THAN .)
    FALSE_KW        reduce using rule 97 (nonEqual -> GREATER_THAN .)


state 85

    (99) mathEXP -> mathEXP PLUS . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 128
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    unaryExpression                shift and go to state 54

state 86

    (68) eachExpression -> eachExpression LOGICAL_AND . eachExpression
    (69) eachExpression -> eachExpression LOGICAL_AND . THEN_KW eachExpression
    (71) eachExpression -> eachExpression LOGICAL_AND . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 131
    ELSE_KW         shift and go to state 130
    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 129

state 87

    (76) eachExpression -> eachExpression TILDA . eachExpression
    (77) eachExpression -> eachExpression TILDA . THEN_KW eachExpression
    (79) eachExpression -> eachExpression TILDA . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 134
    ELSE_KW         shift and go to state 133
    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 132

state 88

    (15) varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .

    DOUBLE_DOT      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    STATIC_KW       reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOLEAN_KW      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHARACTER_KW    reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INTEGER_KW      reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CHAR_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    BOOL_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    INT_KW          reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CLOSING_BRACE   reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    OPENING_BRACE   reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    IF_KW           reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    TILL_KW         reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    COMEBACK_KW     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    GIVEBACK_KW     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    CONTINUE_KW     reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)
    LETTER          reduce using rule 15 (varForm -> LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET .)


state 89

    (72) eachExpression -> eachExpression LOGICAL_OR . eachExpression
    (73) eachExpression -> eachExpression LOGICAL_OR . THEN_KW eachExpression
    (75) eachExpression -> eachExpression LOGICAL_OR . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 137
    ELSE_KW         shift and go to state 136
    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 135

state 90

    (80) eachExpression -> eachExpression AND . eachExpression
    (81) eachExpression -> eachExpression AND . THEN_KW eachExpression
    (83) eachExpression -> eachExpression AND . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 139
    ELSE_KW         shift and go to state 140
    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 138

state 91

    (84) eachExpression -> eachExpression OR . eachExpression
    (85) eachExpression -> eachExpression OR . THEN_KW eachExpression
    (87) eachExpression -> eachExpression OR . ELSE_KW eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    THEN_KW         shift and go to state 143
    ELSE_KW         shift and go to state 142
    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 141

state 92

    (117) inalterable -> LETTER numOrletter . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> LETTER numOrletter .

    OPENING_PARENTHESES shift and go to state 144
    OPENING_BRACKET reduce using rule 112 (alterable -> LETTER numOrletter .)
    DOT             reduce using rule 112 (alterable -> LETTER numOrletter .)
    PLUS            reduce using rule 112 (alterable -> LETTER numOrletter .)
    MINUS           reduce using rule 112 (alterable -> LETTER numOrletter .)
    TIMES           reduce using rule 112 (alterable -> LETTER numOrletter .)
    DIVIDE          reduce using rule 112 (alterable -> LETTER numOrletter .)
    PERCENTAGE      reduce using rule 112 (alterable -> LETTER numOrletter .)
    LESSEQUAL       reduce using rule 112 (alterable -> LETTER numOrletter .)
    GREATEREQUAL    reduce using rule 112 (alterable -> LETTER numOrletter .)
    EQUALEQUAL      reduce using rule 112 (alterable -> LETTER numOrletter .)
    LESS_THAN       reduce using rule 112 (alterable -> LETTER numOrletter .)
    GREATER_THAN    reduce using rule 112 (alterable -> LETTER numOrletter .)
    NOTEQUAL        reduce using rule 112 (alterable -> LETTER numOrletter .)
    LOGICAL_AND     reduce using rule 112 (alterable -> LETTER numOrletter .)
    LOGICAL_OR      reduce using rule 112 (alterable -> LETTER numOrletter .)
    TILDA           reduce using rule 112 (alterable -> LETTER numOrletter .)
    AND             reduce using rule 112 (alterable -> LETTER numOrletter .)
    OR              reduce using rule 112 (alterable -> LETTER numOrletter .)
    CLOSING_BRACKET reduce using rule 112 (alterable -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 112 (alterable -> LETTER numOrletter .)


state 93

    (78) eachExpression -> TILDA eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 78 (eachExpression -> TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 78 (eachExpression -> TILDA eachExpression .)
    TILDA           reduce using rule 78 (eachExpression -> TILDA eachExpression .)
    AND             reduce using rule 78 (eachExpression -> TILDA eachExpression .)
    OR              reduce using rule 78 (eachExpression -> TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 78 (eachExpression -> TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 78 (eachExpression -> TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 86 ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! TILDA           [ shift and go to state 87 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 94

    (82) eachExpression -> AND eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 82 (eachExpression -> AND eachExpression .)
    LOGICAL_OR      reduce using rule 82 (eachExpression -> AND eachExpression .)
    AND             reduce using rule 82 (eachExpression -> AND eachExpression .)
    OR              reduce using rule 82 (eachExpression -> AND eachExpression .)
    CLOSING_BRACKET reduce using rule 82 (eachExpression -> AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 82 (eachExpression -> AND eachExpression .)
    TILDA           shift and go to state 87

  ! TILDA           [ reduce using rule 82 (eachExpression -> AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 86 ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 95

    (86) eachExpression -> OR eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 86 (eachExpression -> OR eachExpression .)
    OR              reduce using rule 86 (eachExpression -> OR eachExpression .)
    CLOSING_BRACKET reduce using rule 86 (eachExpression -> OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 86 (eachExpression -> OR eachExpression .)
    LOGICAL_AND     shift and go to state 86
    TILDA           shift and go to state 87
    AND             shift and go to state 90

  ! LOGICAL_AND     [ reduce using rule 86 (eachExpression -> OR eachExpression .) ]
  ! TILDA           [ reduce using rule 86 (eachExpression -> OR eachExpression .) ]
  ! AND             [ reduce using rule 86 (eachExpression -> OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! OR              [ shift and go to state 91 ]


state 96

    (70) eachExpression -> LOGICAL_AND eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .)
    LOGICAL_OR      reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .)
    AND             reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .)
    OR              reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .)
    CLOSING_BRACKET reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .)
    TILDA           shift and go to state 87

  ! TILDA           [ reduce using rule 70 (eachExpression -> LOGICAL_AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 86 ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 97

    (59) allExpression -> alterable . mathOp allExpression
    (60) allExpression -> alterable . PLUSPLUS
    (61) allExpression -> alterable . MINUSMINUS
    (62) allExpression -> alterable . mathOp alterable
    (113) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> alterable . DOT LETTER
    (63) mathOp -> . EQUAL
    (64) mathOp -> . PLUSEQUAL
    (65) mathOp -> . MINUSEQUAL
    (66) mathOp -> . TIMESEQUAL
    (67) mathOp -> . DIVIDEEQUAL

    PLUSPLUS        shift and go to state 146
    MINUSMINUS      shift and go to state 151
    OPENING_BRACKET shift and go to state 101
    DOT             shift and go to state 100
    EQUAL           shift and go to state 150
    PLUSEQUAL       shift and go to state 148
    MINUSEQUAL      shift and go to state 145
    TIMESEQUAL      shift and go to state 149
    DIVIDEEQUAL     shift and go to state 152

    mathOp                         shift and go to state 147

state 98

    (115) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 153


state 99

    (112) alterable -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (125) empty -> .

    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    PLUSPLUS        reduce using rule 125 (empty -> .)
    MINUSMINUS      reduce using rule 125 (empty -> .)
    OPENING_BRACKET reduce using rule 125 (empty -> .)
    DOT             reduce using rule 125 (empty -> .)
    EQUAL           reduce using rule 125 (empty -> .)
    PLUSEQUAL       reduce using rule 125 (empty -> .)
    MINUSEQUAL      reduce using rule 125 (empty -> .)
    TIMESEQUAL      reduce using rule 125 (empty -> .)
    DIVIDEEQUAL     reduce using rule 125 (empty -> .)
    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    CLOSING_BRACKET reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)

    empty                          shift and go to state 14
    numOrletter                    shift and go to state 154

state 100

    (114) alterable -> alterable DOT . LETTER

    LETTER          shift and go to state 155


state 101

    (113) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    LETTER          shift and go to state 99

    alterable                      shift and go to state 97
    allExpression                  shift and go to state 156

state 102

    (105) unaryExpression -> unaryop unaryExpression .

    PLUS            reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    MINUS           reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    TIMES           reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    DIVIDE          reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    PERCENTAGE      reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LESSEQUAL       reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    GREATEREQUAL    reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    EQUALEQUAL      reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LESS_THAN       reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    GREATER_THAN    reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    NOTEQUAL        reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_AND     reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    LOGICAL_OR      reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    TILDA           reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    AND             reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    OR              reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 105 (unaryExpression -> unaryop unaryExpression .)


state 103

    (74) eachExpression -> LOGICAL_OR eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .)
    OR              reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .)
    CLOSING_BRACKET reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .)
    LOGICAL_AND     shift and go to state 86
    TILDA           shift and go to state 87
    AND             shift and go to state 90

  ! LOGICAL_AND     [ reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .) ]
  ! TILDA           [ reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .) ]
  ! AND             [ reduce using rule 74 (eachExpression -> LOGICAL_OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! OR              [ shift and go to state 91 ]


state 104

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    iterationPhrase                shift and go to state 109
    alterable                      shift and go to state 97
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 157
    compoundPhrase                 shift and go to state 110

state 105

    (14) varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMMA           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    STATIC_KW       reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOLEAN_KW      reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHARACTER_KW    reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INTEGER_KW      reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CHAR_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    BOOL_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    INT_KW          reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CLOSING_BRACE   reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    OPENING_BRACE   reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    IF_KW           reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    TILL_KW         reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMEBACK_KW     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    GIVEBACK_KW     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    CONTINUE_KW     reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    LETTER          reduce using rule 14 (varInitialization -> varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 106

    (38) paramId -> LETTER numOrletter OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 158


state 107

    (33) paramList -> paramList COMMA paramId .

    COMMA           reduce using rule 33 (paramList -> paramList COMMA paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramList COMMA paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramList COMMA paramId .)


state 108

    (56) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (57) returnPhrase -> GIVEBACK_KW . numOrletter SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (125) empty -> .

    NUMBER          shift and go to state 12
    LETTER          shift and go to state 160
    SEMICOLON       reduce using rule 125 (empty -> .)

    alterable                      shift and go to state 97
    allExpression                  shift and go to state 159
    empty                          shift and go to state 14
    numOrletter                    shift and go to state 161

state 109

    (42) statement -> iterationPhrase .

    VOID_KW         reduce using rule 42 (statement -> iterationPhrase .)
    NUMBER          reduce using rule 42 (statement -> iterationPhrase .)
    LETTER          reduce using rule 42 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 42 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 42 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 42 (statement -> iterationPhrase .)
    $end            reduce using rule 42 (statement -> iterationPhrase .)
    CLOSING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    OTHER_KW        reduce using rule 42 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    IF_KW           reduce using rule 42 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 42 (statement -> iterationPhrase .)


state 110

    (40) statement -> compoundPhrase .

    VOID_KW         reduce using rule 40 (statement -> compoundPhrase .)
    NUMBER          reduce using rule 40 (statement -> compoundPhrase .)
    LETTER          reduce using rule 40 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 40 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 40 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 40 (statement -> compoundPhrase .)
    $end            reduce using rule 40 (statement -> compoundPhrase .)
    CLOSING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    OTHER_KW        reduce using rule 40 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    IF_KW           reduce using rule 40 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 40 (statement -> compoundPhrase .)


state 111

    (55) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 162


state 112

    (44) statement -> continue .

    VOID_KW         reduce using rule 44 (statement -> continue .)
    NUMBER          reduce using rule 44 (statement -> continue .)
    LETTER          reduce using rule 44 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 44 (statement -> continue .)
    CHARACTER_KW    reduce using rule 44 (statement -> continue .)
    INTEGER_KW      reduce using rule 44 (statement -> continue .)
    CHAR_KW         reduce using rule 44 (statement -> continue .)
    BOOL_KW         reduce using rule 44 (statement -> continue .)
    INT_KW          reduce using rule 44 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 44 (statement -> continue .)
    $end            reduce using rule 44 (statement -> continue .)
    CLOSING_BRACE   reduce using rule 44 (statement -> continue .)
    OTHER_KW        reduce using rule 44 (statement -> continue .)
    SEMICOLON       reduce using rule 44 (statement -> continue .)
    OPENING_BRACE   reduce using rule 44 (statement -> continue .)
    IF_KW           reduce using rule 44 (statement -> continue .)
    TILL_KW         reduce using rule 44 (statement -> continue .)
    COMEBACK_KW     reduce using rule 44 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 44 (statement -> continue .)
    CONTINUE_KW     reduce using rule 44 (statement -> continue .)


state 113

    (43) statement -> returnPhrase .

    VOID_KW         reduce using rule 43 (statement -> returnPhrase .)
    NUMBER          reduce using rule 43 (statement -> returnPhrase .)
    LETTER          reduce using rule 43 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 43 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 43 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 43 (statement -> returnPhrase .)
    INT_KW          reduce using rule 43 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 43 (statement -> returnPhrase .)
    $end            reduce using rule 43 (statement -> returnPhrase .)
    CLOSING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    OTHER_KW        reduce using rule 43 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 43 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    IF_KW           reduce using rule 43 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 43 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 43 (statement -> returnPhrase .)


state 114

    (48) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 163


state 115

    (39) statement -> phrase .

    VOID_KW         reduce using rule 39 (statement -> phrase .)
    NUMBER          reduce using rule 39 (statement -> phrase .)
    LETTER          reduce using rule 39 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 39 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 39 (statement -> phrase .)
    INTEGER_KW      reduce using rule 39 (statement -> phrase .)
    CHAR_KW         reduce using rule 39 (statement -> phrase .)
    BOOL_KW         reduce using rule 39 (statement -> phrase .)
    INT_KW          reduce using rule 39 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 39 (statement -> phrase .)
    $end            reduce using rule 39 (statement -> phrase .)
    CLOSING_BRACE   reduce using rule 39 (statement -> phrase .)
    OTHER_KW        reduce using rule 39 (statement -> phrase .)
    SEMICOLON       reduce using rule 39 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 39 (statement -> phrase .)
    IF_KW           reduce using rule 39 (statement -> phrase .)
    TILL_KW         reduce using rule 39 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 39 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 39 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 39 (statement -> phrase .)


state 116

    (49) phrase -> SEMICOLON .

    CLOSING_BRACE   reduce using rule 49 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    NUMBER          reduce using rule 49 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 49 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 49 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 49 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 49 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 49 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 49 (phrase -> SEMICOLON .)
    $end            reduce using rule 49 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 49 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 49 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 49 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 49 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 49 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 49 (phrase -> SEMICOLON .)


state 117

    (45) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> . empty
    (125) empty -> .

    STATIC_KW       reduce using rule 125 (empty -> .)
    BOOLEAN_KW      reduce using rule 125 (empty -> .)
    CHARACTER_KW    reduce using rule 125 (empty -> .)
    INTEGER_KW      reduce using rule 125 (empty -> .)
    CHAR_KW         reduce using rule 125 (empty -> .)
    BOOL_KW         reduce using rule 125 (empty -> .)
    INT_KW          reduce using rule 125 (empty -> .)
    CLOSING_BRACE   reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    OPENING_BRACE   reduce using rule 125 (empty -> .)
    IF_KW           reduce using rule 125 (empty -> .)
    TILL_KW         reduce using rule 125 (empty -> .)
    COMEBACK_KW     reduce using rule 125 (empty -> .)
    GIVEBACK_KW     reduce using rule 125 (empty -> .)
    CONTINUE_KW     reduce using rule 125 (empty -> .)
    LETTER          reduce using rule 125 (empty -> .)

    empty                          shift and go to state 164
    localDeclarations              shift and go to state 165

state 118

    (41) statement -> selectPhrase .

    VOID_KW         reduce using rule 41 (statement -> selectPhrase .)
    NUMBER          reduce using rule 41 (statement -> selectPhrase .)
    LETTER          reduce using rule 41 (statement -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHARACTER_KW    reduce using rule 41 (statement -> selectPhrase .)
    INTEGER_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHAR_KW         reduce using rule 41 (statement -> selectPhrase .)
    BOOL_KW         reduce using rule 41 (statement -> selectPhrase .)
    INT_KW          reduce using rule 41 (statement -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 41 (statement -> selectPhrase .)
    $end            reduce using rule 41 (statement -> selectPhrase .)
    CLOSING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    OTHER_KW        reduce using rule 41 (statement -> selectPhrase .)
    SEMICOLON       reduce using rule 41 (statement -> selectPhrase .)
    OPENING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    IF_KW           reduce using rule 41 (statement -> selectPhrase .)
    TILL_KW         reduce using rule 41 (statement -> selectPhrase .)
    COMEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    CONTINUE_KW     reduce using rule 41 (statement -> selectPhrase .)


state 119

    (54) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 166


state 120

    (58) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 167


state 121

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 168


state 122

    (50) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 169


state 123

    (102) mathEXP -> mathEXP DIVIDE mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    MINUS           reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TIMES           reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    DIVIDE          reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESSEQUAL       reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATEREQUAL    reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    EQUALEQUAL      reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LESS_THAN       reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    GREATER_THAN    reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    NOTEQUAL        reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_AND     reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    LOGICAL_OR      reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    TILDA           reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    AND             reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    OR              reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_BRACKET reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .)
    PERCENTAGE      shift and go to state 81

  ! PERCENTAGE      [ reduce using rule 102 (mathEXP -> mathEXP DIVIDE mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 72 ]


state 124

    (101) mathEXP -> mathEXP TIMES mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    MINUS           reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    TIMES           reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    DIVIDE          reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LESSEQUAL       reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATEREQUAL    reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    EQUALEQUAL      reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LESS_THAN       reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    GREATER_THAN    reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    NOTEQUAL        reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_AND     reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    LOGICAL_OR      reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    TILDA           reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    AND             reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    OR              reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_BRACKET reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    CLOSING_PARENTHESES reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .)
    PERCENTAGE      shift and go to state 81

  ! PERCENTAGE      [ reduce using rule 101 (mathEXP -> mathEXP TIMES mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 72 ]


state 125

    (100) mathEXP -> mathEXP MINUS mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    MINUS           reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LESSEQUAL       reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATEREQUAL    reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    EQUALEQUAL      reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LESS_THAN       reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    GREATER_THAN    reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    NOTEQUAL        reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_AND     reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    LOGICAL_OR      reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    TILDA           reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    AND             reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    OR              reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_BRACKET reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 72
    PERCENTAGE      shift and go to state 81

  ! TIMES           [ reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 100 (mathEXP -> mathEXP MINUS mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 77 ]


state 126

    (89) relExpression -> mathEXP compareType mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    LOGICAL_AND     reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    LOGICAL_OR      reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    TILDA           reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    AND             reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    OR              reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 89 (relExpression -> mathEXP compareType mathEXP .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 77
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 72
    PERCENTAGE      shift and go to state 81


state 127

    (103) mathEXP -> mathEXP PERCENTAGE mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    MINUS           reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TIMES           reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    DIVIDE          reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    PERCENTAGE      reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESSEQUAL       reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATEREQUAL    reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    EQUALEQUAL      reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LESS_THAN       reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    GREATER_THAN    reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    NOTEQUAL        reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_AND     reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    LOGICAL_OR      reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    TILDA           reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    AND             reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    OR              reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_BRACKET reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)
    CLOSING_PARENTHESES reduce using rule 103 (mathEXP -> mathEXP PERCENTAGE mathEXP .)

  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! PERCENTAGE      [ shift and go to state 81 ]


state 128

    (99) mathEXP -> mathEXP PLUS mathEXP .
    (99) mathEXP -> mathEXP . PLUS mathEXP
    (100) mathEXP -> mathEXP . MINUS mathEXP
    (101) mathEXP -> mathEXP . TIMES mathEXP
    (102) mathEXP -> mathEXP . DIVIDE mathEXP
    (103) mathEXP -> mathEXP . PERCENTAGE mathEXP

    PLUS            reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    MINUS           reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LESSEQUAL       reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATEREQUAL    reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    EQUALEQUAL      reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LESS_THAN       reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    GREATER_THAN    reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    NOTEQUAL        reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_AND     reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    LOGICAL_OR      reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    TILDA           reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    AND             reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    OR              reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_BRACKET reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    CLOSING_PARENTHESES reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 72
    PERCENTAGE      shift and go to state 81

  ! TIMES           [ reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! DIVIDE          [ reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PERCENTAGE      [ reduce using rule 99 (mathEXP -> mathEXP PLUS mathEXP .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 77 ]


state 129

    (68) eachExpression -> eachExpression LOGICAL_AND eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    LOGICAL_OR      reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    AND             reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    OR              reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_BRACKET reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .)
    TILDA           shift and go to state 87

  ! TILDA           [ reduce using rule 68 (eachExpression -> eachExpression LOGICAL_AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 86 ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 130

    (71) eachExpression -> eachExpression LOGICAL_AND ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 170

state 131

    (69) eachExpression -> eachExpression LOGICAL_AND THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 171

state 132

    (76) eachExpression -> eachExpression TILDA eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)
    LOGICAL_OR      reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)
    TILDA           reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)
    AND             reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)
    OR              reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)
    CLOSING_BRACKET reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)
    CLOSING_PARENTHESES reduce using rule 76 (eachExpression -> eachExpression TILDA eachExpression .)

  ! LOGICAL_AND     [ shift and go to state 86 ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! TILDA           [ shift and go to state 87 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 133

    (79) eachExpression -> eachExpression TILDA ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 172

state 134

    (77) eachExpression -> eachExpression TILDA THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 173

state 135

    (72) eachExpression -> eachExpression LOGICAL_OR eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    OR              reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_BRACKET reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .)
    LOGICAL_AND     shift and go to state 86
    TILDA           shift and go to state 87
    AND             shift and go to state 90

  ! LOGICAL_AND     [ reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! TILDA           [ reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! AND             [ reduce using rule 72 (eachExpression -> eachExpression LOGICAL_OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! OR              [ shift and go to state 91 ]


state 136

    (75) eachExpression -> eachExpression LOGICAL_OR ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 174

state 137

    (73) eachExpression -> eachExpression LOGICAL_OR THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 175

state 138

    (80) eachExpression -> eachExpression AND eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_AND     reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .)
    LOGICAL_OR      reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .)
    AND             reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .)
    OR              reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_BRACKET reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .)
    CLOSING_PARENTHESES reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .)
    TILDA           shift and go to state 87

  ! TILDA           [ reduce using rule 80 (eachExpression -> eachExpression AND eachExpression .) ]
  ! LOGICAL_AND     [ shift and go to state 86 ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 139

    (81) eachExpression -> eachExpression AND THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 176

state 140

    (83) eachExpression -> eachExpression AND ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 177

state 141

    (84) eachExpression -> eachExpression OR eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    LOGICAL_OR      reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .)
    OR              reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_BRACKET reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .)
    CLOSING_PARENTHESES reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .)
    LOGICAL_AND     shift and go to state 86
    TILDA           shift and go to state 87
    AND             shift and go to state 90

  ! LOGICAL_AND     [ reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .) ]
  ! TILDA           [ reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .) ]
  ! AND             [ reduce using rule 84 (eachExpression -> eachExpression OR eachExpression .) ]
  ! LOGICAL_OR      [ shift and go to state 89 ]
  ! OR              [ shift and go to state 91 ]


state 142

    (87) eachExpression -> eachExpression OR ELSE_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 178

state 143

    (85) eachExpression -> eachExpression OR THEN_KW . eachExpression
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 179

state 144

    (117) inalterable -> LETTER numOrletter OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (118) args -> . arguments
    (119) args -> . empty
    (120) arguments -> . arguments COMMA allExpression
    (121) arguments -> . allExpression
    (125) empty -> .
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    CLOSING_PARENTHESES reduce using rule 125 (empty -> .)
    LETTER          shift and go to state 99

    args                           shift and go to state 182
    arguments                      shift and go to state 183
    alterable                      shift and go to state 97
    allExpression                  shift and go to state 180
    empty                          shift and go to state 181

state 145

    (65) mathOp -> MINUSEQUAL .

    LETTER          reduce using rule 65 (mathOp -> MINUSEQUAL .)


state 146

    (60) allExpression -> alterable PLUSPLUS .

    CLOSING_PARENTHESES reduce using rule 60 (allExpression -> alterable PLUSPLUS .)
    SEMICOLON       reduce using rule 60 (allExpression -> alterable PLUSPLUS .)
    CLOSING_BRACKET reduce using rule 60 (allExpression -> alterable PLUSPLUS .)
    COMMA           reduce using rule 60 (allExpression -> alterable PLUSPLUS .)


state 147

    (59) allExpression -> alterable mathOp . allExpression
    (62) allExpression -> alterable mathOp . alterable
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    LETTER          shift and go to state 99

    alterable                      shift and go to state 185
    allExpression                  shift and go to state 184

state 148

    (64) mathOp -> PLUSEQUAL .

    LETTER          reduce using rule 64 (mathOp -> PLUSEQUAL .)


state 149

    (66) mathOp -> TIMESEQUAL .

    LETTER          reduce using rule 66 (mathOp -> TIMESEQUAL .)


state 150

    (63) mathOp -> EQUAL .

    LETTER          reduce using rule 63 (mathOp -> EQUAL .)


state 151

    (61) allExpression -> alterable MINUSMINUS .

    CLOSING_PARENTHESES reduce using rule 61 (allExpression -> alterable MINUSMINUS .)
    SEMICOLON       reduce using rule 61 (allExpression -> alterable MINUSMINUS .)
    CLOSING_BRACKET reduce using rule 61 (allExpression -> alterable MINUSMINUS .)
    COMMA           reduce using rule 61 (allExpression -> alterable MINUSMINUS .)


state 152

    (67) mathOp -> DIVIDEEQUAL .

    LETTER          reduce using rule 67 (mathOp -> DIVIDEEQUAL .)


state 153

    (115) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PLUS            reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MINUS           reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIMES           reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TILDA           reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND             reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR              reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 115 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 154

    (112) alterable -> LETTER numOrletter .

    PLUSPLUS        reduce using rule 112 (alterable -> LETTER numOrletter .)
    MINUSMINUS      reduce using rule 112 (alterable -> LETTER numOrletter .)
    OPENING_BRACKET reduce using rule 112 (alterable -> LETTER numOrletter .)
    DOT             reduce using rule 112 (alterable -> LETTER numOrletter .)
    EQUAL           reduce using rule 112 (alterable -> LETTER numOrletter .)
    PLUSEQUAL       reduce using rule 112 (alterable -> LETTER numOrletter .)
    MINUSEQUAL      reduce using rule 112 (alterable -> LETTER numOrletter .)
    TIMESEQUAL      reduce using rule 112 (alterable -> LETTER numOrletter .)
    DIVIDEEQUAL     reduce using rule 112 (alterable -> LETTER numOrletter .)
    CLOSING_PARENTHESES reduce using rule 112 (alterable -> LETTER numOrletter .)
    SEMICOLON       reduce using rule 112 (alterable -> LETTER numOrletter .)
    CLOSING_BRACKET reduce using rule 112 (alterable -> LETTER numOrletter .)
    COMMA           reduce using rule 112 (alterable -> LETTER numOrletter .)


state 155

    (114) alterable -> alterable DOT LETTER .

    OPENING_BRACKET reduce using rule 114 (alterable -> alterable DOT LETTER .)
    DOT             reduce using rule 114 (alterable -> alterable DOT LETTER .)
    PLUS            reduce using rule 114 (alterable -> alterable DOT LETTER .)
    MINUS           reduce using rule 114 (alterable -> alterable DOT LETTER .)
    TIMES           reduce using rule 114 (alterable -> alterable DOT LETTER .)
    DIVIDE          reduce using rule 114 (alterable -> alterable DOT LETTER .)
    PERCENTAGE      reduce using rule 114 (alterable -> alterable DOT LETTER .)
    LESSEQUAL       reduce using rule 114 (alterable -> alterable DOT LETTER .)
    GREATEREQUAL    reduce using rule 114 (alterable -> alterable DOT LETTER .)
    EQUALEQUAL      reduce using rule 114 (alterable -> alterable DOT LETTER .)
    LESS_THAN       reduce using rule 114 (alterable -> alterable DOT LETTER .)
    GREATER_THAN    reduce using rule 114 (alterable -> alterable DOT LETTER .)
    NOTEQUAL        reduce using rule 114 (alterable -> alterable DOT LETTER .)
    LOGICAL_AND     reduce using rule 114 (alterable -> alterable DOT LETTER .)
    LOGICAL_OR      reduce using rule 114 (alterable -> alterable DOT LETTER .)
    TILDA           reduce using rule 114 (alterable -> alterable DOT LETTER .)
    AND             reduce using rule 114 (alterable -> alterable DOT LETTER .)
    OR              reduce using rule 114 (alterable -> alterable DOT LETTER .)
    CLOSING_BRACKET reduce using rule 114 (alterable -> alterable DOT LETTER .)
    CLOSING_PARENTHESES reduce using rule 114 (alterable -> alterable DOT LETTER .)
    PLUSPLUS        reduce using rule 114 (alterable -> alterable DOT LETTER .)
    MINUSMINUS      reduce using rule 114 (alterable -> alterable DOT LETTER .)
    EQUAL           reduce using rule 114 (alterable -> alterable DOT LETTER .)
    PLUSEQUAL       reduce using rule 114 (alterable -> alterable DOT LETTER .)
    MINUSEQUAL      reduce using rule 114 (alterable -> alterable DOT LETTER .)
    TIMESEQUAL      reduce using rule 114 (alterable -> alterable DOT LETTER .)
    DIVIDEEQUAL     reduce using rule 114 (alterable -> alterable DOT LETTER .)
    SEMICOLON       reduce using rule 114 (alterable -> alterable DOT LETTER .)
    COMMA           reduce using rule 114 (alterable -> alterable DOT LETTER .)


state 156

    (113) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 186


state 157

    (27) function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 27 (function -> type LETTER numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 158

    (38) paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .

    COMMA           reduce using rule 38 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 38 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 38 (paramId -> LETTER numOrletter OPENING_BRACKET CLOSING_BRACKET .)


state 159

    (56) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 187


state 160

    (3) numOrletter -> LETTER .
    (112) alterable -> LETTER . numOrletter
    (2) numOrletter -> . NUMBER
    (3) numOrletter -> . LETTER
    (4) numOrletter -> . empty
    (125) empty -> .

    SEMICOLON       reduce using rule 3 (numOrletter -> LETTER .)
    NUMBER          shift and go to state 12
    LETTER          shift and go to state 3
    PLUSPLUS        reduce using rule 125 (empty -> .)
    MINUSMINUS      reduce using rule 125 (empty -> .)
    OPENING_BRACKET reduce using rule 125 (empty -> .)
    DOT             reduce using rule 125 (empty -> .)
    EQUAL           reduce using rule 125 (empty -> .)
    PLUSEQUAL       reduce using rule 125 (empty -> .)
    MINUSEQUAL      reduce using rule 125 (empty -> .)
    TIMESEQUAL      reduce using rule 125 (empty -> .)
    DIVIDEEQUAL     reduce using rule 125 (empty -> .)

    empty                          shift and go to state 14
    numOrletter                    shift and go to state 154

state 161

    (57) returnPhrase -> GIVEBACK_KW numOrletter . SEMICOLON

    SEMICOLON       shift and go to state 188


state 162

    (55) returnPhrase -> COMEBACK_KW SEMICOLON .

    CLOSING_BRACE   reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VOID_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    NUMBER          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LETTER          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    IF_KW           reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OTHER_KW        reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 163

    (48) phrase -> allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    VOID_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    NUMBER          reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    LETTER          reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    IF_KW           reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 48 (phrase -> allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 48 (phrase -> allExpression SEMICOLON .)


state 164

    (36) localDeclarations -> empty .

    STATIC_KW       reduce using rule 36 (localDeclarations -> empty .)
    BOOLEAN_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHARACTER_KW    reduce using rule 36 (localDeclarations -> empty .)
    INTEGER_KW      reduce using rule 36 (localDeclarations -> empty .)
    CHAR_KW         reduce using rule 36 (localDeclarations -> empty .)
    BOOL_KW         reduce using rule 36 (localDeclarations -> empty .)
    INT_KW          reduce using rule 36 (localDeclarations -> empty .)
    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> empty .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> empty .)
    IF_KW           reduce using rule 36 (localDeclarations -> empty .)
    TILL_KW         reduce using rule 36 (localDeclarations -> empty .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> empty .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> empty .)
    LETTER          reduce using rule 36 (localDeclarations -> empty .)


state 165

    (45) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (35) localDeclarations -> localDeclarations . ScopedVariableDec
    (46) statementList -> . statementList statement
    (47) statementList -> . empty
    (10) ScopedVariableDec -> . scopedSpecifier variableList
    (125) empty -> .
    (17) scopedSpecifier -> . STATIC_KW type
    (18) scopedSpecifier -> . type
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    OPENING_BRACE   reduce using rule 125 (empty -> .)
    IF_KW           reduce using rule 125 (empty -> .)
    TILL_KW         reduce using rule 125 (empty -> .)
    COMEBACK_KW     reduce using rule 125 (empty -> .)
    GIVEBACK_KW     reduce using rule 125 (empty -> .)
    CONTINUE_KW     reduce using rule 125 (empty -> .)
    LETTER          reduce using rule 125 (empty -> .)
    STATIC_KW       shift and go to state 191
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11

    type                           shift and go to state 189
    statementList                  shift and go to state 190
    empty                          shift and go to state 193
    ScopedVariableDec              shift and go to state 194
    scopedSpecifier                shift and go to state 192

state 166

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 195

state 167

    (58) continue -> CONTINUE_KW SEMICOLON .

    OTHER_KW        reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    IF_KW           reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    LETTER          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    VOID_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    NUMBER          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)


state 168

    (26) function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .

    VOID_KW         reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    NUMBER          reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    LETTER          reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    INT_KW          reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)
    $end            reduce using rule 26 (function -> numOrletter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE statement CLOSING_BRACE .)


state 169

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (68) eachExpression -> . eachExpression LOGICAL_AND eachExpression
    (69) eachExpression -> . eachExpression LOGICAL_AND THEN_KW eachExpression
    (70) eachExpression -> . LOGICAL_AND eachExpression
    (71) eachExpression -> . eachExpression LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> . eachExpression LOGICAL_OR eachExpression
    (73) eachExpression -> . eachExpression LOGICAL_OR THEN_KW eachExpression
    (74) eachExpression -> . LOGICAL_OR eachExpression
    (75) eachExpression -> . eachExpression LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> . eachExpression TILDA eachExpression
    (77) eachExpression -> . eachExpression TILDA THEN_KW eachExpression
    (78) eachExpression -> . TILDA eachExpression
    (79) eachExpression -> . eachExpression TILDA ELSE_KW eachExpression
    (80) eachExpression -> . eachExpression AND eachExpression
    (81) eachExpression -> . eachExpression AND THEN_KW eachExpression
    (82) eachExpression -> . AND eachExpression
    (83) eachExpression -> . eachExpression AND ELSE_KW eachExpression
    (84) eachExpression -> . eachExpression OR eachExpression
    (85) eachExpression -> . eachExpression OR THEN_KW eachExpression
    (86) eachExpression -> . OR eachExpression
    (87) eachExpression -> . eachExpression OR ELSE_KW eachExpression
    (88) eachExpression -> . relExpression
    (89) relExpression -> . mathEXP compareType mathEXP
    (90) relExpression -> . mathEXP
    (99) mathEXP -> . mathEXP PLUS mathEXP
    (100) mathEXP -> . mathEXP MINUS mathEXP
    (101) mathEXP -> . mathEXP TIMES mathEXP
    (102) mathEXP -> . mathEXP DIVIDE mathEXP
    (103) mathEXP -> . mathEXP PERCENTAGE mathEXP
    (104) mathEXP -> . unaryExpression
    (105) unaryExpression -> . unaryop unaryExpression
    (106) unaryExpression -> . factor
    (107) unaryop -> . MINUS
    (108) unaryop -> . TIMES
    (109) unaryop -> . QUESTION_MARK
    (110) factor -> . inalterable
    (111) factor -> . alterable
    (115) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (116) inalterable -> . constant
    (117) inalterable -> . LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER
    (122) constant -> . CONST_KW
    (123) constant -> . TRUE_KW
    (124) constant -> . FALSE_KW

    LOGICAL_AND     shift and go to state 53
    LOGICAL_OR      shift and go to state 62
    TILDA           shift and go to state 47
    AND             shift and go to state 51
    OR              shift and go to state 52
    MINUS           shift and go to state 59
    TIMES           shift and go to state 57
    QUESTION_MARK   shift and go to state 60
    OPENING_PARENTHESES shift and go to state 55
    LETTER          shift and go to state 46
    CONST_KW        shift and go to state 43
    TRUE_KW         shift and go to state 48
    FALSE_KW        shift and go to state 63

    inalterable                    shift and go to state 56
    mathEXP                        shift and go to state 44
    alterable                      shift and go to state 58
    unaryop                        shift and go to state 61
    relExpression                  shift and go to state 49
    constant                       shift and go to state 50
    factor                         shift and go to state 64
    unaryExpression                shift and go to state 54
    eachExpression                 shift and go to state 196

state 170

    (71) eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .) ]
  ! AND             [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .) ]
  ! OR              [ reduce using rule 71 (eachExpression -> eachExpression LOGICAL_AND ELSE_KW eachExpression .) ]


state 171

    (69) eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]
  ! OR              [ reduce using rule 69 (eachExpression -> eachExpression LOGICAL_AND THEN_KW eachExpression .) ]


state 172

    (79) eachExpression -> eachExpression TILDA ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .) ]
  ! AND             [ reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .) ]
  ! OR              [ reduce using rule 79 (eachExpression -> eachExpression TILDA ELSE_KW eachExpression .) ]


state 173

    (77) eachExpression -> eachExpression TILDA THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]
  ! OR              [ reduce using rule 77 (eachExpression -> eachExpression TILDA THEN_KW eachExpression .) ]


state 174

    (75) eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .) ]
  ! AND             [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .) ]
  ! OR              [ reduce using rule 75 (eachExpression -> eachExpression LOGICAL_OR ELSE_KW eachExpression .) ]


state 175

    (73) eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]
  ! OR              [ reduce using rule 73 (eachExpression -> eachExpression LOGICAL_OR THEN_KW eachExpression .) ]


state 176

    (81) eachExpression -> eachExpression AND THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]
  ! OR              [ reduce using rule 81 (eachExpression -> eachExpression AND THEN_KW eachExpression .) ]


state 177

    (83) eachExpression -> eachExpression AND ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .) ]
  ! AND             [ reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .) ]
  ! OR              [ reduce using rule 83 (eachExpression -> eachExpression AND ELSE_KW eachExpression .) ]


state 178

    (87) eachExpression -> eachExpression OR ELSE_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .) ]
  ! AND             [ reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .) ]
  ! OR              [ reduce using rule 87 (eachExpression -> eachExpression OR ELSE_KW eachExpression .) ]


state 179

    (85) eachExpression -> eachExpression OR THEN_KW eachExpression .
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for TILDA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSING_BRACKET reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! LOGICAL_AND     [ reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! LOGICAL_OR      [ reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! TILDA           [ reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! AND             [ reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]
  ! OR              [ reduce using rule 85 (eachExpression -> eachExpression OR THEN_KW eachExpression .) ]


state 180

    (121) arguments -> allExpression .

    COMMA           reduce using rule 121 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 121 (arguments -> allExpression .)


state 181

    (119) args -> empty .

    CLOSING_PARENTHESES reduce using rule 119 (args -> empty .)


state 182

    (117) inalterable -> LETTER numOrletter OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 197


state 183

    (118) args -> arguments .
    (120) arguments -> arguments . COMMA allExpression

    CLOSING_PARENTHESES reduce using rule 118 (args -> arguments .)
    COMMA           shift and go to state 198


state 184

    (59) allExpression -> alterable mathOp allExpression .

    CLOSING_PARENTHESES reduce using rule 59 (allExpression -> alterable mathOp allExpression .)
    SEMICOLON       reduce using rule 59 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 59 (allExpression -> alterable mathOp allExpression .)
    COMMA           reduce using rule 59 (allExpression -> alterable mathOp allExpression .)


state 185

    (62) allExpression -> alterable mathOp alterable .
    (59) allExpression -> alterable . mathOp allExpression
    (60) allExpression -> alterable . PLUSPLUS
    (61) allExpression -> alterable . MINUSMINUS
    (62) allExpression -> alterable . mathOp alterable
    (113) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> alterable . DOT LETTER
    (63) mathOp -> . EQUAL
    (64) mathOp -> . PLUSEQUAL
    (65) mathOp -> . MINUSEQUAL
    (66) mathOp -> . TIMESEQUAL
    (67) mathOp -> . DIVIDEEQUAL

    CLOSING_PARENTHESES reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    SEMICOLON       reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    CLOSING_BRACKET reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    COMMA           reduce using rule 62 (allExpression -> alterable mathOp alterable .)
    PLUSPLUS        shift and go to state 146
    MINUSMINUS      shift and go to state 151
    OPENING_BRACKET shift and go to state 101
    DOT             shift and go to state 100
    EQUAL           shift and go to state 150
    PLUSEQUAL       shift and go to state 148
    MINUSEQUAL      shift and go to state 145
    TIMESEQUAL      shift and go to state 149
    DIVIDEEQUAL     shift and go to state 152

    mathOp                         shift and go to state 147

state 186

    (113) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    OPENING_BRACKET reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DOT             reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUS            reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUS           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMES           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDE          reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PERCENTAGE      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESSEQUAL       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATEREQUAL    reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUALEQUAL      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LESS_THAN       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GREATER_THAN    reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NOTEQUAL        reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_AND     reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LOGICAL_OR      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TILDA           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND             reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR              reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSPLUS        reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSMINUS      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQUAL           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLUSEQUAL       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MINUSEQUAL      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIMESEQUAL      reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIVIDEEQUAL     reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMMA           reduce using rule 113 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 187

    (56) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    CLOSING_BRACE   reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VOID_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    NUMBER          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LETTER          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    IF_KW           reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 188

    (57) returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .

    CLOSING_BRACE   reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    VOID_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    NUMBER          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    LETTER          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    BOOLEAN_KW      reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CHARACTER_KW    reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    INTEGER_KW      reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CHAR_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    BOOL_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    INT_KW          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    $end            reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    SEMICOLON       reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    IF_KW           reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    TILL_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    COMEBACK_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    GIVEBACK_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)
    OTHER_KW        reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrletter SEMICOLON .)


state 189

    (18) scopedSpecifier -> type .

    LETTER          reduce using rule 18 (scopedSpecifier -> type .)


state 190

    (45) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (46) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    CLOSING_BRACE   shift and go to state 199
    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    alterable                      shift and go to state 97
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 200
    compoundPhrase                 shift and go to state 110
    iterationPhrase                shift and go to state 109

state 191

    (17) scopedSpecifier -> STATIC_KW . type
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 16
    INTEGER_KW      shift and go to state 7
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 5
    INT_KW          shift and go to state 11

    type                           shift and go to state 201

state 192

    (10) ScopedVariableDec -> scopedSpecifier . variableList
    (11) variableList -> . variableList COMMA varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm DOUBLE_DOT OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrletter OPENING_BRACKET eachExpression CLOSING_BRACKET
    (16) varForm -> . LETTER numOrletter

    LETTER          shift and go to state 36

    varForm                        shift and go to state 19
    variableList                   shift and go to state 202
    varInitialization              shift and go to state 21

state 193

    (47) statementList -> empty .

    CLOSING_BRACE   reduce using rule 47 (statementList -> empty .)
    SEMICOLON       reduce using rule 47 (statementList -> empty .)
    OPENING_BRACE   reduce using rule 47 (statementList -> empty .)
    IF_KW           reduce using rule 47 (statementList -> empty .)
    TILL_KW         reduce using rule 47 (statementList -> empty .)
    COMEBACK_KW     reduce using rule 47 (statementList -> empty .)
    GIVEBACK_KW     reduce using rule 47 (statementList -> empty .)
    CONTINUE_KW     reduce using rule 47 (statementList -> empty .)
    LETTER          reduce using rule 47 (statementList -> empty .)


state 194

    (35) localDeclarations -> localDeclarations ScopedVariableDec .

    STATIC_KW       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INT_KW          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    IF_KW           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILL_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    LETTER          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 195

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 203
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91


state 196

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (68) eachExpression -> eachExpression . LOGICAL_AND eachExpression
    (69) eachExpression -> eachExpression . LOGICAL_AND THEN_KW eachExpression
    (71) eachExpression -> eachExpression . LOGICAL_AND ELSE_KW eachExpression
    (72) eachExpression -> eachExpression . LOGICAL_OR eachExpression
    (73) eachExpression -> eachExpression . LOGICAL_OR THEN_KW eachExpression
    (75) eachExpression -> eachExpression . LOGICAL_OR ELSE_KW eachExpression
    (76) eachExpression -> eachExpression . TILDA eachExpression
    (77) eachExpression -> eachExpression . TILDA THEN_KW eachExpression
    (79) eachExpression -> eachExpression . TILDA ELSE_KW eachExpression
    (80) eachExpression -> eachExpression . AND eachExpression
    (81) eachExpression -> eachExpression . AND THEN_KW eachExpression
    (83) eachExpression -> eachExpression . AND ELSE_KW eachExpression
    (84) eachExpression -> eachExpression . OR eachExpression
    (85) eachExpression -> eachExpression . OR THEN_KW eachExpression
    (87) eachExpression -> eachExpression . OR ELSE_KW eachExpression

    CLOSING_PARENTHESES shift and go to state 204
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 89
    TILDA           shift and go to state 87
    AND             shift and go to state 90
    OR              shift and go to state 91


state 197

    (117) inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PLUS            reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MINUS           reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIMES           reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DIVIDE          reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PERCENTAGE      reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESSEQUAL       reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATEREQUAL    reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQUALEQUAL      reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LESS_THAN       reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GREATER_THAN    reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NOTEQUAL        reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_AND     reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LOGICAL_OR      reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TILDA           reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND             reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR              reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 117 (inalterable -> LETTER numOrletter OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 198

    (120) arguments -> arguments COMMA . allExpression
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    LETTER          shift and go to state 99

    alterable                      shift and go to state 97
    allExpression                  shift and go to state 205

state 199

    (45) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    NUMBER          reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 45 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 200

    (46) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 46 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 46 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 46 (statementList -> statementList statement .)
    IF_KW           reduce using rule 46 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 46 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 46 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 46 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 46 (statementList -> statementList statement .)
    LETTER          reduce using rule 46 (statementList -> statementList statement .)


state 201

    (17) scopedSpecifier -> STATIC_KW type .

    LETTER          reduce using rule 17 (scopedSpecifier -> STATIC_KW type .)


state 202

    (10) ScopedVariableDec -> scopedSpecifier variableList .
    (11) variableList -> variableList . COMMA varInitialization

    STATIC_KW       reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOLEAN_KW      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHARACTER_KW    reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    INTEGER_KW      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CHAR_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    BOOL_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    INT_KW          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CLOSING_BRACE   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    SEMICOLON       reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    OPENING_BRACE   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    IF_KW           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    TILL_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMEBACK_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    GIVEBACK_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    CONTINUE_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    LETTER          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList .)
    COMMA           shift and go to state 26


state 203

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    iterationPhrase                shift and go to state 109
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    alterable                      shift and go to state 97
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 206
    compoundPhrase                 shift and go to state 110

state 204

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . ifBody
    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (52) ifBody -> . statement
    (53) ifBody -> . statement OTHER_KW statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    OPENING_BRACE   shift and go to state 208
    SEMICOLON       shift and go to state 116
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    ifBody                         shift and go to state 207
    alterable                      shift and go to state 97
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 209
    compoundPhrase                 shift and go to state 110
    iterationPhrase                shift and go to state 109

state 205

    (120) arguments -> arguments COMMA allExpression .

    COMMA           reduce using rule 120 (arguments -> arguments COMMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 120 (arguments -> arguments COMMA allExpression .)


state 206

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    OTHER_KW        reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    IF_KW           reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    VOID_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)


state 207

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .

    CLOSING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    VOID_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    NUMBER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    LETTER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOLEAN_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHARACTER_KW    reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INTEGER_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHAR_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INT_KW          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_PARENTHESES reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    $end            reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    SEMICOLON       reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    IF_KW           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TILL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    COMEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    GIVEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONTINUE_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OTHER_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)


state 208

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE . ifBody ifBody CLOSING_BRACE
    (45) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (52) ifBody -> . statement
    (53) ifBody -> . statement OTHER_KW statement
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> . empty
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (125) empty -> .
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for OPENING_BRACE resolved as shift
  ! shift/reduce conflict for IF_KW resolved as shift
  ! shift/reduce conflict for TILL_KW resolved as shift
  ! shift/reduce conflict for COMEBACK_KW resolved as shift
  ! shift/reduce conflict for GIVEBACK_KW resolved as shift
  ! shift/reduce conflict for CONTINUE_KW resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
    STATIC_KW       reduce using rule 125 (empty -> .)
    BOOLEAN_KW      reduce using rule 125 (empty -> .)
    CHARACTER_KW    reduce using rule 125 (empty -> .)
    INTEGER_KW      reduce using rule 125 (empty -> .)
    CHAR_KW         reduce using rule 125 (empty -> .)
    BOOL_KW         reduce using rule 125 (empty -> .)
    INT_KW          reduce using rule 125 (empty -> .)
    CLOSING_BRACE   reduce using rule 125 (empty -> .)
    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

  ! SEMICOLON       [ reduce using rule 125 (empty -> .) ]
  ! OPENING_BRACE   [ reduce using rule 125 (empty -> .) ]
  ! IF_KW           [ reduce using rule 125 (empty -> .) ]
  ! TILL_KW         [ reduce using rule 125 (empty -> .) ]
  ! COMEBACK_KW     [ reduce using rule 125 (empty -> .) ]
  ! GIVEBACK_KW     [ reduce using rule 125 (empty -> .) ]
  ! CONTINUE_KW     [ reduce using rule 125 (empty -> .) ]
  ! LETTER          [ reduce using rule 125 (empty -> .) ]

    selectPhrase                   shift and go to state 118
    iterationPhrase                shift and go to state 109
    allExpression                  shift and go to state 114
    alterable                      shift and go to state 97
    continue                       shift and go to state 112
    empty                          shift and go to state 164
    phrase                         shift and go to state 115
    ifBody                         shift and go to state 210
    statement                      shift and go to state 209
    returnPhrase                   shift and go to state 113
    compoundPhrase                 shift and go to state 110
    localDeclarations              shift and go to state 165

state 209

    (52) ifBody -> statement .
    (53) ifBody -> statement . OTHER_KW statement

  ! shift/reduce conflict for OTHER_KW resolved as shift
    CLOSING_BRACE   reduce using rule 52 (ifBody -> statement .)
    VOID_KW         reduce using rule 52 (ifBody -> statement .)
    NUMBER          reduce using rule 52 (ifBody -> statement .)
    LETTER          reduce using rule 52 (ifBody -> statement .)
    BOOLEAN_KW      reduce using rule 52 (ifBody -> statement .)
    CHARACTER_KW    reduce using rule 52 (ifBody -> statement .)
    INTEGER_KW      reduce using rule 52 (ifBody -> statement .)
    CHAR_KW         reduce using rule 52 (ifBody -> statement .)
    BOOL_KW         reduce using rule 52 (ifBody -> statement .)
    INT_KW          reduce using rule 52 (ifBody -> statement .)
    OPENING_PARENTHESES reduce using rule 52 (ifBody -> statement .)
    $end            reduce using rule 52 (ifBody -> statement .)
    SEMICOLON       reduce using rule 52 (ifBody -> statement .)
    OPENING_BRACE   reduce using rule 52 (ifBody -> statement .)
    IF_KW           reduce using rule 52 (ifBody -> statement .)
    TILL_KW         reduce using rule 52 (ifBody -> statement .)
    COMEBACK_KW     reduce using rule 52 (ifBody -> statement .)
    GIVEBACK_KW     reduce using rule 52 (ifBody -> statement .)
    CONTINUE_KW     reduce using rule 52 (ifBody -> statement .)
    OTHER_KW        shift and go to state 211

  ! OTHER_KW        [ reduce using rule 52 (ifBody -> statement .) ]


state 210

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody . ifBody CLOSING_BRACE
    (52) ifBody -> . statement
    (53) ifBody -> . statement OTHER_KW statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    ifBody                         shift and go to state 212
    alterable                      shift and go to state 97
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 209
    compoundPhrase                 shift and go to state 110
    iterationPhrase                shift and go to state 109

state 211

    (53) ifBody -> statement OTHER_KW . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression SEMICOLON
    (49) phrase -> . SEMICOLON
    (45) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (51) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrletter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PLUSPLUS
    (61) allExpression -> . alterable MINUSMINUS
    (62) allExpression -> . alterable mathOp alterable
    (112) alterable -> . LETTER numOrletter
    (113) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (114) alterable -> . alterable DOT LETTER

    SEMICOLON       shift and go to state 116
    OPENING_BRACE   shift and go to state 117
    IF_KW           shift and go to state 122
    TILL_KW         shift and go to state 119
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 108
    CONTINUE_KW     shift and go to state 120
    LETTER          shift and go to state 99

    selectPhrase                   shift and go to state 118
    iterationPhrase                shift and go to state 109
    continue                       shift and go to state 112
    allExpression                  shift and go to state 114
    phrase                         shift and go to state 115
    alterable                      shift and go to state 97
    returnPhrase                   shift and go to state 113
    statement                      shift and go to state 213
    compoundPhrase                 shift and go to state 110

state 212

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 214


state 213

    (53) ifBody -> statement OTHER_KW statement .

    CLOSING_BRACE   reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    VOID_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    NUMBER          reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    LETTER          reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    BOOLEAN_KW      reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CHARACTER_KW    reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    INTEGER_KW      reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CHAR_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    BOOL_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    INT_KW          reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OPENING_PARENTHESES reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    $end            reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    SEMICOLON       reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OPENING_BRACE   reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    IF_KW           reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    TILL_KW         reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    COMEBACK_KW     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    GIVEBACK_KW     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    CONTINUE_KW     reduce using rule 53 (ifBody -> statement OTHER_KW statement .)
    OTHER_KW        reduce using rule 53 (ifBody -> statement OTHER_KW statement .)


state 214

    (51) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .

    CLOSING_BRACE   reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    VOID_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    NUMBER          reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    LETTER          reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHAR_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOL_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INT_KW          reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    $end            reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    SEMICOLON       reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    IF_KW           reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TILL_KW         reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OTHER_KW        reduce using rule 51 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LETTER in state 36 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 170 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 170 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 170 resolved as shift
WARNING: shift/reduce conflict for AND in state 170 resolved as shift
WARNING: shift/reduce conflict for OR in state 170 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 171 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 171 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 172 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 172 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 172 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 173 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 173 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 173 resolved as shift
WARNING: shift/reduce conflict for AND in state 173 resolved as shift
WARNING: shift/reduce conflict for OR in state 173 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 174 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 174 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 174 resolved as shift
WARNING: shift/reduce conflict for AND in state 174 resolved as shift
WARNING: shift/reduce conflict for OR in state 174 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 175 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 175 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 175 resolved as shift
WARNING: shift/reduce conflict for AND in state 175 resolved as shift
WARNING: shift/reduce conflict for OR in state 175 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 176 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 176 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 176 resolved as shift
WARNING: shift/reduce conflict for AND in state 176 resolved as shift
WARNING: shift/reduce conflict for OR in state 176 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 177 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 177 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 177 resolved as shift
WARNING: shift/reduce conflict for AND in state 177 resolved as shift
WARNING: shift/reduce conflict for OR in state 177 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 178 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 178 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 179 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 179 resolved as shift
WARNING: shift/reduce conflict for TILDA in state 179 resolved as shift
WARNING: shift/reduce conflict for AND in state 179 resolved as shift
WARNING: shift/reduce conflict for OR in state 179 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 208 resolved as shift
WARNING: shift/reduce conflict for OPENING_BRACE in state 208 resolved as shift
WARNING: shift/reduce conflict for IF_KW in state 208 resolved as shift
WARNING: shift/reduce conflict for TILL_KW in state 208 resolved as shift
WARNING: shift/reduce conflict for COMEBACK_KW in state 208 resolved as shift
WARNING: shift/reduce conflict for GIVEBACK_KW in state 208 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_KW in state 208 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 208 resolved as shift
WARNING: shift/reduce conflict for OTHER_KW in state 209 resolved as shift
